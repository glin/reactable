[{"path":[]},{"path":[]},{"path":"/reactable/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"Development","what":"Prerequisites","title":"Contributing","text":"R >= 3.1 Node.js LTS","code":""},{"path":"/reactable/CONTRIBUTING.html","id":"installation","dir":"","previous_headings":"Development","what":"Installation","title":"Contributing","text":"Install dependencies R: Install dependencies JavaScript:","code":"# install.packages(\"devtools\") devtools::install_dev_deps() npm install"},{"path":"/reactable/CONTRIBUTING.html","id":"building","dir":"","previous_headings":"Development","what":"Building","title":"Contributing","text":"Build JS/CSS bundle (outputs inst/htmlwidgets): load (devtools::load_all()) reinstall package. generated files added separate commit, preferably per branch.","code":"npm run build"},{"path":"/reactable/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"Development","what":"Testing","title":"Contributing","text":"Run R tests: Run JavaScript tests:","code":"devtools::test()  # With test coverage (requires DT) # install.packages(\"DT\") covr::report() npm test  # With test coverage npm run test:cover  # Update test snapshots npm run test:update"},{"path":"/reactable/CONTRIBUTING.html","id":"linting-and-formatting","dir":"","previous_headings":"Development","what":"Linting and Formatting","title":"Contributing","text":"Lint format JS/CSS:","code":"npm run lint npm run format"},{"path":"/reactable/articles/building-twitter-followers.html","id":"get-the-data","dir":"Articles","previous_headings":"","what":"Get the data","title":"Building the Twitter Followers Demo","text":"FiveThirtyEight shares data many articles online https://data.fivethirtyeight.com, licensed CC 4.0. can download raw data article, ’ll conveniently begin working cleaned CSV file: twitter_followers.csv.","code":"data <- read.csv(\"https://glin.github.io/reactable/articles/twitter-followers/twitter_followers.csv\",                  stringsAsFactors = FALSE)  dplyr::glimpse(data) ## Rows: 20 ## Columns: 3 ## $ account                 <chr> \"marwilliamson\", \"BernieSanders\", \"Hickenloope… ## $ followers               <int> 2610335, 9254423, 144816, 4246252, 3558333, 26… ## $ exclusive_followers_pct <dbl> 0.748, 0.632, 0.563, 0.525, 0.438, 0.434, 0.34…"},{"path":"/reactable/articles/building-twitter-followers.html","id":"create-a-basic-table","dir":"Articles","previous_headings":"","what":"Create a basic table","title":"Building the Twitter Followers Demo","text":"first thing ’ll create basic table using reactable(): can already sort table, ’s default sorting “exclusive followers” column. numeric columns still unformatted sort ascending order (smallest largest) default. Let’s customize default sorting, add proper column names, format data. ’ll use reactable’s built-column formatters add @ symbol Twitter handles, add thousands separators follower counts, format percentages 1 decimal place.","code":"library(reactable)  reactable(data) reactable(   data,   defaultSorted = \"exclusive_followers_pct\",   columns = list(     account = colDef(       name = \"Account\",       format = colFormat(prefix = \"@\")     ),     followers = colDef(       name = \"Followers\",       defaultSortOrder = \"desc\",       format = colFormat(separators = TRUE)     ),     exclusive_followers_pct = colDef(       name = \"Exclusive Followers\",       defaultSortOrder = \"desc\",       format = colFormat(percent = TRUE, digits = 1)     )   ) )"},{"path":"/reactable/articles/building-twitter-followers.html","id":"add-bar-charts","dir":"Articles","previous_headings":"","what":"Add bar charts","title":"Building the Twitter Followers Demo","text":"Next, ’ll add bar charts numeric percentage columns. FiveThirtyEight table uses pure HTML CSS create bar charts, ’ll something similar using method based CSS flexbox (also shown Demo Cookbook). ’ll generate bar chart HTML help htmltools package, render cells via custom render functions. Since ’re taking cell rendering custom render functions, ’ll also manually format numbers percentages now. Custom cell renderers override column formatters, may change future. Tip: ’re ever curious see HTML table made, can open browser’s developer tools inspect HTML CSS behind table. figured bar charts made, colors fonts used, . bar charts look good, aren’t aligned numbers different widths. Let’s fix giving numeric label width. One way format labels fixed-width strings, use monospaced font character takes width. (alternate method shown Demo Cookbook.) Note: fonts numerals equal width, others . tables numeric columns, using font tabular monospaced figures can make numbers easier align read. can learn different types fonts article, Proportional vs. Tabular Figures.","code":"library(htmltools)  # Render a bar chart with a label on the left bar_chart <- function(label, width = \"100%\", height = \"0.875rem\", fill = \"#00bfc4\", background = NULL) {   bar <- div(style = list(background = fill, width = width, height = height))   chart <- div(style = list(flexGrow = 1, marginLeft = \"0.375rem\", background = background), bar)   div(style = list(display = \"flex\", alignItems = \"center\"), label, chart) }  reactable(   data,   defaultSorted = \"exclusive_followers_pct\",   columns = list(     account = colDef(       name = \"Account\",       format = colFormat(prefix = \"@\")     ),     followers = colDef(       name = \"Followers\",       defaultSortOrder = \"desc\",       # Render the bar charts using a custom cell render function       cell = function(value) {         width <- paste0(value * 100 / max(data$followers), \"%\")         # Add thousands separators         value <- format(value, big.mark = \",\")         bar_chart(value, width = width, fill = \"#3fc1c9\")       },       # And left-align the columns       align = \"left\"     ),     exclusive_followers_pct = colDef(       name = \"Exclusive Followers\",       defaultSortOrder = \"desc\",       # Render the bar charts using a custom cell render function       cell = function(value) {         # Format as percentages with 1 decimal place         value <- paste0(format(value * 100, nsmall = 1), \"%\")         bar_chart(value, width = value, fill = \"#fc5185\", background = \"#e1e1e1\")       },       # And left-align the columns       align = \"left\"     )   ) ) reactable(   data,   defaultSorted = \"exclusive_followers_pct\",   columns = list(     account = colDef(       name = \"Account\",       format = colFormat(prefix = \"@\")     ),     followers = colDef(       name = \"Followers\",       defaultSortOrder = \"desc\",       cell = function(value) {         width <- paste0(value * 100 / max(data$followers), \"%\")         value <- format(value, big.mark = \",\")         # Fix each label using the width of the widest number (incl. thousands separators)         value <- format(value, width = 9, justify = \"right\")         bar_chart(value, width = width, fill = \"#3fc1c9\")       },       align = \"left\",       # Use the operating system's default monospace font, and       # preserve white space to prevent it from being collapsed by default       style = list(fontFamily = \"monospace\", whiteSpace = \"pre\")     ),     exclusive_followers_pct = colDef(       name = \"Exclusive Followers\",       defaultSortOrder = \"desc\",       cell = function(value) {         value <- paste0(format(value * 100, nsmall = 1), \"%\")         # Fix width here to align single and double-digit percentages         value <- format(value, width = 5, justify = \"right\")         bar_chart(value, width = value, fill = \"#fc5185\", background = \"#e1e1e1\")       },       align = \"left\",       style = list(fontFamily = \"monospace\", whiteSpace = \"pre\")     )   ) )"},{"path":"/reactable/articles/building-twitter-followers.html","id":"dynamic-formatting","dir":"Articles","previous_headings":"","what":"Dynamic formatting","title":"Building the Twitter Followers Demo","text":"FiveThirtyEight table nifty little detail showing percent sign first row “exclusive followers” column reduce repetition. sort table, ’ll notice percent always appears first row regardless row order. achieve dynamic behavior like , ’ll write JavaScript. need access client-side (browser) state table know row first sorting. isn’t possible R (least without Shiny), ’ll render cells using custom JavaScript render function shown Demo Cookbook. Since ’re switching JavaScript render function, ’ll unfortunately reformat data recreate bar chart JavaScript. ’ll generate bar chart HTML concatenating strings, ’ll kind ugly written character string R.","code":"reactable(   data,   defaultSorted = \"exclusive_followers_pct\",   columns = list(     account = colDef(       name = \"Account\",       format = colFormat(prefix = \"@\")     ),     followers = colDef(       name = \"Followers\",       defaultSortOrder = \"desc\",       cell = function(value) {         width <- paste0(value * 100 / max(data$followers), \"%\")         value <- format(value, big.mark = \",\")         value <- format(value, width = 9, justify = \"right\")         bar_chart(value, width = width, fill = \"#3fc1c9\")       },       align = \"left\",       style = list(fontFamily = \"monospace\", whiteSpace = \"pre\")     ),     exclusive_followers_pct = colDef(       name = \"Exclusive Followers\",       defaultSortOrder = \"desc\",       # Format and render the cell with a JavaScript render function       cell = JS('function(cellInfo) {         // Format as a percentage with 1 decimal place         const pct = (cellInfo.value * 100).toFixed(1) + \"%\"         // Fix width of numeric labels         let value = pct.padStart(5)         // Show percent sign on first row only         if (cellInfo.viewIndex > 0) {           value = value.replace(\"%\", \" \")         }         // Render bar chart         return `           <div style=\"display: flex; align-items: center;\">             <span style=\"font-family: monospace; white-space: pre;\">${value}<\/span>             <div style=\"flex-grow: 1; margin-left: 0.375rem; height: 0.875rem; background-color: #e1e1e1\">               <div style=\"height: 100%; width: ${pct}; background-color: #fc5185\"><\/div>             <\/div>           <\/div>         `       }'),       # Render this column as HTML       html = TRUE,       align = \"left\"     )   ) )"},{"path":"/reactable/articles/building-twitter-followers.html","id":"finishing-touches","dir":"Articles","previous_headings":"","what":"Finishing touches","title":"Building the Twitter Followers Demo","text":"Finally, ’ll style table add extra niceties. ’ll display everything one page using pagination = FALSE reduce white space table compact = TRUE. ’ll apply custom styling adding CSS classes table column headers. used fix table width, highlight column headers hover, change font table. FiveThirtyEight uses two commercial fonts table: Atlas Grotesk text, Decima Mono numbers. ’ll use similar-looking free fonts Google Fonts instead: Karla text, Fira Mono numbers. ’ll also insert links Twitter accounts using custom cell renderers move bar chart styles CSS better organization. won’t go detail , can check Examples Demo Cookbook learn : Adding custom CSS table Adding custom web fonts R Markdown document Highlighting column headers hover Inserting links table final table code shown . can also find source code demo vignettes/twitter-followers/twitter-followers.Rmd.","code":"tbl <- reactable(   data,   pagination = FALSE,   defaultSorted = \"exclusive_followers_pct\",   defaultColDef = colDef(headerClass = \"header\", align = \"left\"),   columns = list(     account = colDef(       cell = function(value) {         url <- paste0(\"https://twitter.com/\", value)         tags$a(href = url, target = \"_blank\", paste0(\"@\", value))       },       width = 150     ),     followers = colDef(       defaultSortOrder = \"desc\",       cell = function(value) {         width <- paste0(value * 100 / max(data$followers), \"%\")         value <- format(value, big.mark = \",\")         value <- format(value, width = 9, justify = \"right\")         bar <- div(           class = \"bar-chart\",           style = list(marginRight = \"0.375rem\"),           div(class = \"bar\", style = list(width = width, backgroundColor = \"#3fc1c9\"))         )         div(class = \"bar-cell\", span(class = \"number\", value), bar)       }     ),     exclusive_followers_pct = colDef(       name = \"Exclusive Followers\",       defaultSortOrder = \"desc\",       cell = JS('function(cellInfo) {         // Format as percentage         const pct = (cellInfo.value * 100).toFixed(1) + \"%\"         // Pad single-digit numbers         let value = pct.padStart(5)         // Show % on first row only         if (cellInfo.viewIndex > 0) {           value = value.replace(\"%\", \" \")         }         // Render bar chart         return `           <div class=\"bar-cell\">             <span class=\"number\">${value}<\/span>             <div class=\"bar-chart\" style=\"background-color: #e1e1e1\">               <div class=\"bar\" style=\"width: ${pct}; background-color: #fc5185\"><\/div>             <\/div>           <\/div>         `       }'),       html = TRUE     )   ),   compact = TRUE,   class = \"followers-tbl\" ) # Add the title and subtitle div(class = \"twitter-followers\",     div(class = \"followers-header\",         h3(class = \"followers-title\", \"Candidates whose followers are loyal only to them\"),         \"Share of each 2020 candidate's followers who don't follow any other candidates\"     ),     tbl ) # Add Google Fonts to the page tags$link(href = \"https://fonts.googleapis.com/css?family=Karla:400,700|Fira+Mono&display=fallback\",           rel = \"stylesheet\") /* CSS for the R Markdown document, inserted through a ```{css} code chunk */  /* Styles for the table container, title, and subtitle */ .twitter-followers {   /* Center the table */   margin: 0 auto;   /* Reduce the table width */   width: 575px;   font-family: Karla, \"Helvetica Neue\", Helvetica, Arial, sans-serif; }  .followers-header {   margin: 1.125rem 0;   font-size: 1rem; }  .followers-title {   font-size: 1.25rem;   font-weight: 600; }  /* Styles for the table */ .followers-tbl {   font-size: 0.875rem;   line-height: 1.125rem; }  .followers-tbl a {   color: inherit;   text-decoration: none; }  .followers-tbl a:hover, .followers-tbl a:focus {   text-decoration: underline;   text-decoration-thickness: max(1px, 0.0625rem); }  /* Styles for the column headers */ .header {   border-bottom: 2px solid #555;   font-size: 0.8125rem;   font-weight: 400;   text-transform: uppercase; }  .header:hover {   background-color: #eee; }  /* Styles for the bar charts */ .bar-cell {   display: flex;   align-items: center; }  .number {   font-family: \"Fira Mono\", Consolas, Monaco, monospace;   font-size: 0.84375rem;   white-space: pre; }  .bar-chart {   flex-grow: 1;   margin-left: 0.375rem;   height: 0.875rem; }  .bar {   height: 100%; }"},{"path":"/reactable/articles/conditional-styling.html","id":"example-color-scales","dir":"Articles","previous_headings":"","what":"Example: color scales","title":"Conditional Styling","text":"can use R’s built-color utilities apply color scale column:","code":"data <- iris[1:5, ] orange_pal <- function(x) rgb(colorRamp(c(\"#ffe4cc\", \"#ffb54d\"))(x), maxColorValue = 255)  reactable(   data,   columns = list(     Petal.Length = colDef(       style = function(value) {         normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))         color <- orange_pal(normalized)         list(background = color)       }     )   ) )"},{"path":"/reactable/articles/conditional-styling.html","id":"example-highlight-sorted-columns","dir":"Articles","previous_headings":"","what":"Example: highlight sorted columns","title":"Conditional Styling","text":"style sorted columns, need use JavaScript function determine whether column currently sorted:","code":"reactable(   iris[1:5, ],   defaultSorted = \"Petal.Length\",   defaultColDef = colDef(     class = JS(\"function(rowInfo, column, state) {       // Highlight sorted columns       for (let i = 0; i < state.sorted.length; i++) {         if (state.sorted[i].id === column.id) {           return 'sorted'         }       }     }\")   ) ) .sorted {   background: rgba(0, 0, 0, 0.03); }"},{"path":[]},{"path":"/reactable/articles/conditional-styling.html","id":"cell-r-functions","dir":"Articles","previous_headings":"Cell Styling","what":"R functions","title":"Conditional Styling","text":"style class take R function 3 optional arguments: Note: R functions apply styles aggregated cells.","code":"colDef(   style = function(value, index, name) {     # input:     #   - value, the cell value     #   - index, the row index (optional)     #   - name, the column name (optional)     #     # output:     #   - a named list with camelCased property names     list(color = \"red\", marginLeft = \"30px\")     #   - or an inline style string     \"color: red; margin-left: 30px;\"   },   class = function(value, index, name) {     # input:     #   - value, the cell value     #   - index, the row index (optional)     #   - name, the column name (optional)     #     # output:     #   - CSS class names     \"class1 class2\"   } )"},{"path":"/reactable/articles/conditional-styling.html","id":"cell-js-functions","dir":"Articles","previous_headings":"Cell Styling","what":"JavaScript functions","title":"Conditional Styling","text":"JavaScript function, wrapped JS(), 3 optional arguments:","code":"colDef(   style = JS(\"     function(rowInfo, column, state) {       // input:       //  - rowInfo, an object containing row info       //  - column, an object containing column properties (optional)       //  - state, an object containing the table state (optional)       //       // output:       //  - a style object with camelCased property names       return { backgroundColor: 'gray' }     }   \"),   class = JS(\"     function(rowInfo, column, state) {       // input:       //  - rowInfo, an object containing row info       //  - column, an object containing column properties (optional)       //  - state, an object containing the table state (optional)       //       // output:       //  - CSS class names       return 'class1 class2'     }   \") )"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/reactable/articles/conditional-styling.html","id":"row-r-functions","dir":"Articles","previous_headings":"Row Styling","what":"R functions","title":"Conditional Styling","text":"rowStyle rowClass take R function single argument: Note: R functions apply styles aggregated rows.","code":"reactable(   rowStyle = function(index) {     # input:     #   - index, the row index     #     # output:     #   - a named list with camelCased property names     list(color = \"red\", marginLeft = \"30px\")     #   - or an inline style string     \"color: red; margin-left: 30px;\"   },   rowClass = function(index) {     # input:     #   - index, the row index     #     # output:     #   - CSS class names     \"class1 class2\"   } )"},{"path":"/reactable/articles/conditional-styling.html","id":"row-js-functions","dir":"Articles","previous_headings":"Row Styling","what":"JavaScript functions","title":"Conditional Styling","text":"JavaScript function 2 optional arguments:","code":"reactable(   rowStyle = JS(\"     function(rowInfo, state) {       // input:       //  - rowInfo, an object containing row info       //  - state, an object containing the table state (optional)       //       // output:       //  - a style object with camelCased properties       return { backgroundColor: 'gray' }     }   \"),   rowClass = JS(\"     function(rowInfo, state) {       // input:       //  - rowInfo, an object containing row info       //  - state, an object containing the table state (optional)       //       // output:       //  - CSS class names       return 'class1 class2'     }   \") )"},{"path":[]},{"path":[]},{"path":"/reactable/articles/cookbook/cookbook.html","id":"insert-links","dir":"Articles > Cookbook","previous_headings":"","what":"Insert links","title":"Demo Cookbook","text":"","code":"data <- data.frame(   Address = c(\"https://google.com\", \"https://yahoo.com\", \"https://duckduckgo.com\"),   Site = c(\"Google\", \"Yahoo\", \"DuckDuckGo\") )  reactable(   data,   columns = list(     # Using htmltools to render a link     Address = colDef(cell = function(value) {       htmltools::tags$a(href = value, target = \"_blank\", value)     }),     # Or using raw HTML     Site = colDef(html = TRUE, cell = function(value, index) {       sprintf('<a href=\"%s\" target=\"_blank\">%s<\/a>', data$Address[index], value)     })   ) )"},{"path":[]},{"path":"/reactable/articles/cookbook/cookbook.html","id":"color-scales","dir":"Articles > Cookbook","previous_headings":"Conditional formatting","what":"Color scales","title":"Demo Cookbook","text":"add color scales, can use R’s built-color utilities (color manipulation package):","code":"data <- iris[10:29, ] orange_pal <- function(x) rgb(colorRamp(c(\"#ffe4cc\", \"#ff9500\"))(x), maxColorValue = 255)  reactable(   data,   columns = list(     Petal.Length = colDef(style = function(value) {       normalized <- (value - min(data$Petal.Length)) / (max(data$Petal.Length) - min(data$Petal.Length))       color <- orange_pal(normalized)       list(background = color)     })   ) ) dimnames <- list(start(nottem)[1]:end(nottem)[1], month.abb) temps <- matrix(nottem, ncol = 12, byrow = TRUE, dimnames = dimnames)  # ColorBrewer-inspired 3-color scale BuYlRd <- function(x) rgb(colorRamp(c(\"#7fb7d7\", \"#ffffbf\", \"#fc8d59\"))(x), maxColorValue = 255)  reactable(   temps,   defaultColDef = colDef(     style = function(value) {       if (!is.numeric(value)) return()       normalized <- (value - min(nottem)) / (max(nottem) - min(nottem))       color <- BuYlRd(normalized)       list(background = color)     },     format = colFormat(digits = 1),     minWidth = 50   ),   columns = list(     .rownames = colDef(name = \"Year\", sortable = TRUE, align = \"left\")   ),   bordered = TRUE )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"formatting-changes","dir":"Articles > Cookbook","previous_headings":"Conditional formatting","what":"Formatting changes","title":"Demo Cookbook","text":"","code":"stocks <- data.frame(   Symbol = c(\"GOOG\", \"FB\", \"AMZN\", \"NFLX\", \"TSLA\"),   Price = c(1265.13, 187.89, 1761.33, 276.82, 328.13),   Change = c(4.14, 1.51, -19.45, 5.32, -12.45) )  reactable(   stocks,   columns = list(     Change = colDef(       cell = function(value) {         if (value >= 0) paste0(\"+\", value) else value       },       style = function(value) {         color <- if (value > 0) {           \"#008000\"         } else if (value < 0) {           \"#e00000\"         }         list(fontWeight = 600, color = color)       }     )   ) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"tags-and-badges","dir":"Articles > Cookbook","previous_headings":"Conditional formatting","what":"Tags and badges","title":"Demo Cookbook","text":"","code":"library(htmltools)  orders <- data.frame(   Order = 2300:2304,   Created = seq(as.Date(\"2019-04-01\"), by = \"day\", length.out = 5),   Customer = sample(rownames(MASS::painters), 5),   Status = sample(c(\"Pending\", \"Paid\", \"Canceled\"), 5, replace = TRUE),   stringsAsFactors = FALSE )  reactable(   orders,   columns = list(     Status = colDef(cell = function(value) {       class <- paste0(\"tag status-\", tolower(value))       div(class = class, value)     })   ) ) .tag {   display: inline-block;   padding: 0.125rem 0.75rem;   border-radius: 15px;   font-weight: 600;   font-size: 0.75rem; }  .status-paid {   background: hsl(116, 60%, 90%);   color: hsl(116, 30%, 25%); }  .status-pending {   background: hsl(230, 70%, 90%);   color: hsl(230, 45%, 30%); }  .status-canceled {   background: hsl(350, 70%, 90%);   color: hsl(350, 45%, 30%); } library(htmltools)  status_badge <- function(color = \"#aaa\", width = \"0.55rem\", height = width) {   span(style = list(     display = \"inline-block\",     marginRight = \"0.5rem\",     width = width,     height = height,     backgroundColor = color,     borderRadius = \"50%\"   )) }  reactable(   orders,   columns = list(     Status = colDef(cell = function(value) {       color <- switch(         value,         Paid = \"hsl(214, 45%, 50%)\",         Pending = \"hsl(30, 97%, 70%)\",         Canceled = \"hsl(3, 69%, 50%)\"       )       badge <- status_badge(color = color)       tagList(badge, value)     })   ) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"bar-charts","dir":"Articles > Cookbook","previous_headings":"","what":"Bar charts","title":"Demo Cookbook","text":"many ways create bar charts using HTML CSS, ’s one way inspired Making Charts CSS.","code":"library(htmltools)  # Render a bar chart with a label on the left bar_chart <- function(label, width = \"100%\", height = \"1rem\", fill = \"#00bfc4\", background = NULL) {   bar <- div(style = list(background = fill, width = width, height = height))   chart <- div(style = list(flexGrow = 1, marginLeft = \"0.5rem\", background = background), bar)   div(style = list(display = \"flex\", alignItems = \"center\"), label, chart) }  data <- MASS::Cars93[20:49, c(\"Make\", \"MPG.city\", \"MPG.highway\")]  reactable(   data,   columns = list(     MPG.city = colDef(name = \"MPG (city)\", align = \"left\", cell = function(value) {       width <- paste0(value / max(data$MPG.city) * 100, \"%\")       bar_chart(value, width = width)     }),     MPG.highway = colDef(name = \"MPG (highway)\", align = \"left\", cell = function(value) {       width <- paste0(value / max(data$MPG.highway) * 100, \"%\")       bar_chart(value, width = width, fill = \"#fc5185\", background = \"#e1e1e1\")     })   ) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"positive-and-negative-values","dir":"Articles > Cookbook","previous_headings":"Bar charts","what":"Positive and negative values","title":"Demo Cookbook","text":"","code":"library(htmltools)  # Render a bar chart with positive and negative values bar_chart_pos_neg <- function(label, value, max_value = 1, height = \"1rem\",                               pos_fill = \"#005ab5\", neg_fill = \"#dc3220\") {   neg_chart <- div(style = list(flex = \"1 1 0\"))   pos_chart <- div(style = list(flex = \"1 1 0\"))   width <- paste0(abs(value / max_value) * 100, \"%\")    if (value < 0) {     bar <- div(style = list(marginLeft = \"0.5rem\", background = neg_fill, width = width, height = height))     chart <- div(       style = list(display = \"flex\", alignItems = \"center\", justifyContent = \"flex-end\"),       label,       bar     )     neg_chart <- tagAppendChild(neg_chart, chart)   } else {     bar <- div(style = list(marginRight = \"0.5rem\", background = pos_fill, width = width, height = height))     chart <- div(style = list(display = \"flex\", alignItems = \"center\"), bar, label)     pos_chart <- tagAppendChild(pos_chart, chart)   }    div(style = list(display = \"flex\"), neg_chart, pos_chart) }  data <- data.frame(   company = sprintf(\"Company%02d\", 1:10),   profit_chg = c(0.2, 0.685, 0.917, 0.284, 0.105, -0.701, -0.528, -0.808, -0.957, -0.11) )  reactable(   data,   bordered = TRUE,   columns = list(     company = colDef(name = \"Company\", minWidth = 100),     profit_chg = colDef(       name = \"Change in Profit\",       defaultSortOrder = \"desc\",       cell = function(value) {         label <- paste0(round(value * 100), \"%\")         bar_chart_pos_neg(label, value)       },       align = \"center\",       minWidth = 400     )   ) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"background-bar-charts","dir":"Articles > Cookbook","previous_headings":"Bar charts","what":"Background bar charts","title":"Demo Cookbook","text":"Another way create bar charts render background images. example creates bar images using linear-gradient() CSS function, inspired example DT package.","code":"# Render a bar chart in the background of the cell bar_style <- function(width = 1, fill = \"#e6e6e6\", height = \"75%\",                       align = c(\"left\", \"right\"), color = NULL) {   align <- match.arg(align)   if (align == \"left\") {     position <- paste0(width * 100, \"%\")     image <- sprintf(\"linear-gradient(90deg, %1$s %2$s, transparent %2$s)\", fill, position)   } else {     position <- paste0(100 - width * 100, \"%\")     image <- sprintf(\"linear-gradient(90deg, transparent %1$s, %2$s %1$s)\", position, fill)   }   list(     backgroundImage = image,     backgroundSize = paste(\"100%\", height),     backgroundRepeat = \"no-repeat\",     backgroundPosition = \"center\",     color = color   ) }  data <- mtcars[, 1:4]  reactable(   data,   columns = list(     mpg = colDef(       style = function(value) {         bar_style(width = value / max(data$mpg), fill = \"#2c5e77\", color = \"#fff\")       },       align = \"left\",       format = colFormat(digits = 1)     ),     disp = colDef(       style = function(value) {         bar_style(width = value / max(data$disp), fill = \"hsl(208, 70%, 90%)\")       }     ),     hp = colDef(       style = function(value) {         bar_style(width = value / max(data$hp), height = \"90%\", align = \"right\")       }     )   ),   bordered = TRUE )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"embed-images","dir":"Articles > Cookbook","previous_headings":"","what":"Embed images","title":"Demo Cookbook","text":"embed image, render <img> element table. sure add alt text accessibility, even image purely decorative (use null alt=\"\" attribute case).","code":""},{"path":"/reactable/articles/cookbook/cookbook.html","id":"external-image-files","dir":"Articles > Cookbook","previous_headings":"Embed images","what":"External image files","title":"Demo Cookbook","text":"image file local, ensure image can found rendered document: pkgdown, can include local images document using resource_files YAML field. See External files pkgdown details. Shiny, can include local images app using either www/ directory shiny::addResourcePath() function. See Resource Publishing Shiny details.","code":"library(htmltools)  data <- data.frame(   Animal = c(\"beaver\", \"cow\", \"wolf\", \"goat\"),   Body = c(1.35, 465, 36.33, 27.66),   Brain = c(8.1, 423, 119.5, 115) )  reactable(   data,   columns = list(     Animal = colDef(cell = function(value) {       image <- img(src = sprintf(\"images/%s.png\", value), style = \"height: 24px;\", alt = value)       tagList(         div(style = \"display: inline-block; width: 45px;\", image),         value       )     }),     Body = colDef(name = \"Body (kg)\"),     Brain = colDef(name = \"Brain (g)\")   ) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"inline-embedded-images","dir":"Articles > Cookbook","previous_headings":"Embed images","what":"Inline embedded images","title":"Demo Cookbook","text":"Images can also embedded documents base64-encoded data URL using knitr::image_uri(). can portable, usually recommended small image files.","code":"library(htmltools)  data <- data.frame(   Animal = c(\"beaver\", \"cow\", \"wolf\", \"goat\"),   Body = c(1.35, 465, 36.33, 27.66),   Brain = c(8.1, 423, 119.5, 115) )  reactable(   data,   columns = list(     Animal = colDef(cell = function(value) {       img_src <- knitr::image_uri(sprintf(\"images/%s.png\", value))       image <- img(src = img_src, style = \"height: 24px;\", alt = value)       tagList(         div(style = \"display: inline-block; width: 45px\", image),         value       )     })   ) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"rating-stars","dir":"Articles > Cookbook","previous_headings":"","what":"Rating stars","title":"Demo Cookbook","text":"example uses Font Awesome icons (via Shiny) render rating stars table. make rating star icons accessible users assistive technology, icons marked image using ARIA img role, alternative text added using aria-label title attribute.","code":"library(htmltools)  rating_stars <- function(rating, max_rating = 5) {   star_icon <- function(empty = FALSE) {     tagAppendAttributes(shiny::icon(\"star\"),       style = paste(\"color:\", if (empty) \"#edf0f2\" else \"orange\"),       \"aria-hidden\" = \"true\"     )   }   rounded_rating <- floor(rating + 0.5)  # always round up   stars <- lapply(seq_len(max_rating), function(i) {     if (i <= rounded_rating) star_icon() else star_icon(empty = TRUE)   })   label <- sprintf(\"%s out of %s stars\", rating, max_rating)   div(title = label, role = \"img\", stars) }  ratings <- data.frame(   Movie = c(\"Silent Serpent\", \"Nowhere to Hyde\", \"The Ape-Man Goes to Mars\", \"A Menace in Venice\"),   Rating = c(3.65, 2.35, 4.5, 1.4),   Votes = c(115, 37, 60, 99) )  reactable(ratings, columns = list(   Rating = colDef(cell = function(value) rating_stars(value)) ))"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"show-data-from-other-columns","dir":"Articles > Cookbook","previous_headings":"","what":"Show data from other columns","title":"Demo Cookbook","text":"example requires reactable v0.3.0 . access data another column, get current row data using row index argument R render function, cellInfo.row JavaScript render function. example shows ways.","code":"library(dplyr) library(htmltools)  data <- starwars %>%   select(character = name, height, mass, gender, homeworld, species)"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"show-data-from-other-columns-r","dir":"Articles > Cookbook","previous_headings":"Show data from other columns","what":"R render function","title":"Demo Cookbook","text":"","code":"reactable(   data,   columns = list(     character = colDef(       # Show species under character names       cell = function(value, index) {         species <- data$species[index]         species <- if (!is.na(species)) species else \"Unknown\"         div(           div(style = \"font-weight: 600\", value),           div(style = \"font-size: 0.75rem\", species)         )       }     ),     species = colDef(show = FALSE)   ),   # Vertically center cells   defaultColDef = colDef(vAlign = \"center\"),   defaultPageSize = 6 )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"show-data-from-other-columns-js","dir":"Articles > Cookbook","previous_headings":"Show data from other columns","what":"JavaScript render function","title":"Demo Cookbook","text":"","code":"reactable(   data,   columns = list(     character = colDef(       # Show species under character names       cell = JS('function(cellInfo) {         const species = cellInfo.row[\"species\"] || \"Unknown\"         return `           <div>             <div style=\"font-weight: 600\">${cellInfo.value}<\/div>             <div style=\"font-size: 0.75rem\">${species}<\/div>           <\/div>         `       }'),       html = TRUE     ),     species = colDef(show = FALSE)   ),   # Vertically center cells   defaultColDef = colDef(vAlign = \"center\"),   defaultPageSize = 6 )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"total-rows","dir":"Articles > Cookbook","previous_headings":"","what":"Total rows","title":"Demo Cookbook","text":"","code":"library(dplyr) library(htmltools)  data <- MASS::Cars93[18:47, ] %>%   select(Manufacturer, Model, Type, Sales = Price)  reactable(   data,   defaultPageSize = 5,   columns = list(     Manufacturer = colDef(footer = \"Total\"),     Sales = colDef(footer = sprintf(\"$%.2f\", sum(data$Sales)))   ),   defaultColDef = colDef(footerStyle = list(fontWeight = \"bold\")) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"dynamic-totals","dir":"Articles > Cookbook","previous_headings":"Total rows","what":"Dynamic totals","title":"Demo Cookbook","text":"example requires reactable v0.3.0 . update total filtering table, calculate total JavaScript render function:","code":"reactable(   data,   searchable = TRUE,   defaultPageSize = 5,   minRows = 5,   columns = list(     Manufacturer = colDef(footer = \"Total\"),     Sales = colDef(       footer = JS(\"function(column, state) {         let total = 0         state.sortedData.forEach(function(row) {           total += row[column.id]         })         return '$' + total.toFixed(2)       }\")     )   ),   defaultColDef = colDef(footerStyle = list(fontWeight = \"bold\")) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"totals-with-aggregated-rows","dir":"Articles > Cookbook","previous_headings":"Total rows > Dynamic totals","what":"Totals with aggregated rows","title":"Demo Cookbook","text":"","code":"reactable(   data,   groupBy = \"Manufacturer\",   searchable = TRUE,   columns = list(     Manufacturer = colDef(footer = \"Total\"),     Sales = colDef(       aggregate = \"sum\",       format = colFormat(currency = \"USD\"),       footer = JS(\"function(column, state) {         let total = 0         state.sortedData.forEach(function(row) {           total += row[column.id]         })         return '$' + total.toFixed(2)       }\")     )   ),   defaultColDef = colDef(footerStyle = list(fontWeight = \"bold\")) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"nested-tables","dir":"Articles > Cookbook","previous_headings":"","what":"Nested tables","title":"Demo Cookbook","text":"create nested tables, use reactable() row details renderer:","code":"library(dplyr)  data <- MASS::Cars93[18:47, ] %>%   mutate(ID = as.character(18:47), Date = seq(as.Date(\"2019-01-01\"), by = \"day\", length.out = 30)) %>%   select(ID, Date, Manufacturer, Model, Type, Price)  sales_by_mfr <- group_by(data, Manufacturer) %>%   summarize(Quantity = n(), Sales = sum(Price))  reactable(   sales_by_mfr,   details = function(index) {     sales <- filter(data, Manufacturer == sales_by_mfr$Manufacturer[index]) %>% select(-Manufacturer)     tbl <- reactable(sales, outlined = TRUE, highlight = TRUE, fullWidth = FALSE)     htmltools::div(style = list(margin = \"12px 45px\"), tbl)   },   onClick = \"expand\",   rowStyle = list(cursor = \"pointer\") )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"units-on-first-row-only","dir":"Articles > Cookbook","previous_headings":"","what":"Units on first row only","title":"Demo Cookbook","text":"display label first row (even sorting), use JavaScript render function add label cell’s viewIndex property 0. label breaks alignment values column, realign values adding white space cells without units. Two ways shown .","code":"data <- MASS::Cars93[40:44, c(\"Make\", \"Length\", \"Luggage.room\")]  reactable(   data,   class = \"car-specs\",   columns = list(     # Align values using white space (and a monospaced font)     Length = colDef(       cell = JS(\"function(cellInfo) {         const units = cellInfo.viewIndex === 0 ? '\\u2033' : ' '         return cellInfo.value + units       }\"),       class = \"number\"     ),     # Align values using a fixed-width container for units     Luggage.room = colDef(       name = \"Luggage Room\",       cell = JS('function(cellInfo) {         const units = cellInfo.viewIndex === 0 ? \" ft³\" : \"\"         return cellInfo.value + `<div class=\"units\">${units}<\/div>`       }'),       html = TRUE     )   ) ) .car-specs .number {   font-family: \"Courier New\", Courier, monospace;   white-space: pre; }  .car-specs .units {   display: inline-block;   width: 1.125rem; }"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"tooltips","dir":"Articles > Cookbook","previous_headings":"","what":"Tooltips","title":"Demo Cookbook","text":"add tooltips column header, can render header <abbr> element title attribute: title attribute inaccessible keyboard, mobile, screen reader users, however, creating tooltips like generally discouraged. alternate method use tippy package, provides JavaScript-based tooltip supports keyboard, touch, screen reader use.","code":"library(htmltools) library(dplyr)  data <- as_tibble(mtcars[1:6, ], rownames = \"car\") %>%   select(car:hp)  with_tooltip <- function(value, tooltip) {   tags$abbr(style = \"text-decoration: underline; text-decoration-style: dotted; cursor: help\",             title = tooltip, value) }  reactable(   data,   columns = list(     mpg = colDef(header = with_tooltip(\"mpg\", \"Miles per US gallon\")),     cyl = colDef(header = with_tooltip(\"cyl\", \"Number of cylinders\")),     disp = colDef(header = with_tooltip(\"disp\", \"Displacement (cubic inches)\")),     hp = colDef(header = with_tooltip(\"hp\", \"Gross horsepower\"))   ) ) library(htmltools) library(dplyr) library(tippy)  data <- as_tibble(mtcars[1:6, ], rownames = \"car\") %>%   select(car:hp)  # See the ?tippy documentation to learn how to customize tooltips with_tooltip <- function(value, tooltip, ...) {   div(style = \"text-decoration: underline; text-decoration-style: dotted; cursor: help\",       tippy(value, tooltip, ...)) }  reactable(   data,   columns = list(     mpg = colDef(header = with_tooltip(\"mpg\", \"Miles per US gallon\")),     cyl = colDef(header = with_tooltip(\"cyl\", \"Number of cylinders\"))   ) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"highlight-cells","dir":"Articles > Cookbook","previous_headings":"","what":"Highlight cells","title":"Demo Cookbook","text":"","code":"data <- MASS::road[11:17, ]  reactable(   data,   defaultColDef = colDef(     style = function(value, index, name) {       if (is.numeric(value) && value == max(data[[name]])) {         list(fontWeight = \"bold\")       }     }   ) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"highlight-columns","dir":"Articles > Cookbook","previous_headings":"","what":"Highlight columns","title":"Demo Cookbook","text":"","code":"reactable(   iris[1:5, ],   columns = list(     Petal.Length = colDef(style = list(background = \"rgba(0, 0, 0, 0.03)\"))   ) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"highlight-rows","dir":"Articles > Cookbook","previous_headings":"","what":"Highlight rows","title":"Demo Cookbook","text":"","code":"reactable(   iris[1:5, ],   rowStyle = function(index) {     if (index == 2) list(fontWeight = \"bold\")     else if (iris[index, \"Petal.Length\"] >= 1.5) list(background = \"rgba(0, 0, 0, 0.05)\")   } )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"highlight-sorted-headers","dir":"Articles > Cookbook","previous_headings":"","what":"Highlight sorted headers","title":"Demo Cookbook","text":"style sortable headers hover, select headers aria-sort attribute :hover pseudo-class CSS: style sorted headers, select headers either aria-sort=\"ascending\" aria-sort=\"descending\" attribute:","code":"reactable(iris[1:5, ], defaultColDef = colDef(headerClass = \"sort-header\")) .sort-header[aria-sort]:hover {   background: rgba(0, 0, 0, 0.03); } .sort-header[aria-sort=\"ascending\"], .sort-header[aria-sort=\"descending\"] {   background: rgba(0, 0, 0, 0.03); }"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"highlight-sorted-columns","dir":"Articles > Cookbook","previous_headings":"","what":"Highlight sorted columns","title":"Demo Cookbook","text":"style sorted columns, use JavaScript function style columns based table’s sorted state:","code":"reactable(   iris[1:5, ],   defaultSorted = \"Sepal.Width\",   defaultColDef = colDef(     style = JS(\"function(rowInfo, column, state) {       // Highlight sorted columns       for (let i = 0; i < state.sorted.length; i++) {         if (state.sorted[i].id === column.id) {           return { background: 'rgba(0, 0, 0, 0.03)' }         }       }     }\")   ) )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"borders-between-groups-of-data","dir":"Articles > Cookbook","previous_headings":"","what":"Borders between groups of data","title":"Demo Cookbook","text":"example requires reactable v0.3.0 . add borders groups, use R JavaScript function style rows based previous next row’s data. table can sorted, use JavaScript function style rows groups sorted.","code":"library(dplyr)  data <- as_tibble(MASS::painters, rownames = \"Painter\") %>%   filter(School %in% c(\"A\", \"B\", \"C\")) %>%   mutate(School = recode(School, A = \"Renaissance\", B = \"Mannerist\", C = \"Seicento\")) %>%   select(Painter, School, everything()) %>%   group_by(School) %>%   slice(1:3)  reactable(   data,   defaultSorted = list(School = \"asc\", Drawing = \"desc\"),   borderless = TRUE,   rowStyle = JS(\"     function(rowInfo, state) {       // Ignore padding rows       if (!rowInfo) return        // Add horizontal separators between groups when sorting by school       const firstSorted = state.sorted[0]       if (firstSorted && firstSorted.id === 'School') {         const nextRow = state.pageRows[rowInfo.viewIndex + 1]         if (nextRow && rowInfo.values['School'] !== nextRow['School']) {           // Use box-shadow to add a 2px border without taking extra space           return { boxShadow: 'inset 0 -2px 0 rgba(0, 0, 0, 0.1)' }         }       }     }   \") )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"merge-cells","dir":"Articles > Cookbook","previous_headings":"","what":"Merge cells","title":"Demo Cookbook","text":"example requires reactable v0.3.0 . can give appearance merged cells hiding cells based previous row’s data. Just like example , ’ll need JavaScript style function grouping work sorting, filtering, pagination.","code":"library(dplyr)  data <- as_tibble(MASS::painters, rownames = \"Painter\") %>%   filter(School %in% c(\"A\", \"B\", \"C\")) %>%   mutate(School = recode(School, A = \"Renaissance\", B = \"Mannerist\", C = \"Seicento\")) %>%   select(School, Painter, everything()) %>%   group_by(School) %>%   slice(1:3)  reactable(   data,   columns = list(     School = colDef(       style = JS(\"function(rowInfo, column, state) {         const firstSorted = state.sorted[0]         // Merge cells if unsorted or sorting by school         if (!firstSorted || firstSorted.id === 'School') {           const prevRow = state.pageRows[rowInfo.viewIndex - 1]           if (prevRow && rowInfo.values['School'] === prevRow['School']) {             return { visibility: 'hidden' }           }         }       }\")     )   ),   outlined = TRUE )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"borders-between-columns","dir":"Articles > Cookbook","previous_headings":"","what":"Borders between columns","title":"Demo Cookbook","text":"","code":"reactable(   iris[1:5, ],   columns = list(     Sepal.Width = colDef(style = list(borderRight = \"1px solid rgba(0, 0, 0, 0.1)\")),     Petal.Width = colDef(style = list(borderRight = \"1px solid rgba(0, 0, 0, 0.1)\"))   ),   borderless = TRUE )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"style-nested-rows","dir":"Articles > Cookbook","previous_headings":"","what":"Style nested rows","title":"Demo Cookbook","text":"style nested rows, use JavaScript function style rows based nesting level property:","code":"data <- MASS::Cars93[4:8, c(\"Type\", \"Price\", \"MPG.city\", \"DriveTrain\", \"Man.trans.avail\")]  reactable(   data,   groupBy = \"Type\",   columns = list(     Price = colDef(aggregate = \"max\"),     MPG.city = colDef(aggregate = \"mean\", format = colFormat(digits = 1)),     DriveTrain = colDef(aggregate = \"unique\"),     Man.trans.avail = colDef(aggregate = \"frequency\")   ),   rowStyle = JS(\"function(rowInfo) {     if (rowInfo.level > 0) {       return { background: '#eee', borderLeft: '2px solid #ffa62d' }     } else {       return { borderLeft: '2px solid transparent' }     }   }\"),   defaultExpanded = TRUE )"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"custom-fonts","dir":"Articles > Cookbook","previous_headings":"","what":"Custom fonts","title":"Demo Cookbook","text":"Tables don’t default font, just inherit font properties parent elements. (may explain tables look different R Markdown documents Shiny apps vs. standalone pages). customize table font, can set font page, table : use custom font ’s installed users’ systems default, use @font-face CSS rule add font specify download . Online font services Google Fonts can make easier hosting custom fonts providing 1-2 lines HTML copy document use fonts. example, include font Google Fonts R Markdown document, add <link> tag pointing font stylesheet somewhere: Shiny apps, <link> tag can included <head> page via ui: example using self-hosted custom fonts, see Popular Movies demo. Tip: reactable package documentation uses default system fonts installed operating system (also known system font stack), load fast look familiar: Bootstrap 5 also uses system font stack default.","code":"reactable(   iris[1:5, ],   style = list(fontFamily = \"Work Sans, sans-serif\", fontSize = \"0.875rem\"),   defaultSorted = \"Species\" ) ```{r, echo=FALSE} # Add a custom font from Google Fonts htmltools::tags$link(href = \"https://fonts.googleapis.com/css?family=Work+Sans:400,600,700&display=fallback\",                      rel = \"stylesheet\") ``` library(shiny) library(reactable)  ui <- fluidPage(   tags$head(     tags$link(       href = \"https://fonts.googleapis.com/css?family=Work+Sans:400,600,700&display=fallback\",       rel = \"stylesheet\"     ),     tags$style(\"       body {         font-family: Work Sans, sans-serif;       }     \")   ),   reactable(     MASS::Cars93[, 1:5],     defaultSorted = \"Price\"   ) )  server <- function(input, output) {}  shinyApp(ui, server) font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"path":"/reactable/articles/cookbook/cookbook.html","id":"custom-sort-indicators","dir":"Articles > Cookbook","previous_headings":"","what":"Custom sort indicators","title":"Demo Cookbook","text":"use custom sort indicator, can hide default sort icon using reactable(showSortIcon = FALSE) add sort indicator. also hides sort icon header focused, sure add visual focus indicator ensure table accessible keyboard users (test , click first table header press Tab key navigate headers). ’s example changes sort indicator bar top bottom header (indicating ascending descending sort), adds light background headers hovered focused. example adds sort indicators using CSS, takes advantage aria-sort attribute table headers style based whether column sorted ascending descending order.","code":"reactable(   MASS::Cars93[1:5, c(\"Manufacturer\", \"Model\", \"Type\", \"Min.Price\", \"Price\")],   showSortIcon = FALSE,   bordered = TRUE,   defaultSorted = \"Type\",   defaultColDef = colDef(headerClass = \"bar-sort-header\") ) .bar-sort-header:hover, .bar-sort-header:focus {   background: rgba(0, 0, 0, 0.03); }  /* Add a top bar on ascending sort */ .bar-sort-header[aria-sort=\"ascending\"] {   box-shadow: inset 0 3px 0 0 rgba(0, 0, 0, 0.6); }  /* Add a bottom bar on descending sort */ .bar-sort-header[aria-sort=\"descending\"] {   box-shadow: inset 0 -3px 0 0 rgba(0, 0, 0, 0.6); }  /* Add an animation when toggling between ascending and descending sort */ .bar-sort-header {   transition: box-shadow 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275); }"},{"path":"/reactable/articles/custom-filtering-extra.html","id":"material-ui-range-filter","dir":"Articles","previous_headings":"","what":"Material UI Range Filter","title":"Extra Custom Filtering Examples","text":"Range filter using Material UI’s Slider component, adapted example @timelyportfolio.","code":"// JavaScript code for the Material UI range filter. This is a js language // chunk, but you could also inline this in R using `tags$script(HTML(\"...\"))`  const muiRangeFilter = (column, state) => {   // Get min and max values from raw table data and memoize so it doesn't   // have to be recalculated each time   const range = React.useMemo(() => {     let min = Infinity     let max = -Infinity     state.data.forEach(row => {       const value = row[column.id]       if (value < min) {         min = Math.floor(value)       } else if (value > max) {         max = Math.ceil(value)       }     })     return [min, max]   }, [state.data])    const value = column.filterValue ? column.filterValue : range   const valueLabel = `${value[0]}...${value[1]}`    return React.createElement(     'div',     // Add some margin so the tooltips don't get cut off     { style: { margin: '0 8px' } },     [       valueLabel,       React.createElement(         MaterialUI.Slider,         {           value: value,           min: range[0],           max: range[1],           valueLabelDisplay: 'auto',           onChange: (e, val) => column.setFilter(val),           'aria-label': `Filter ${column.name}`         }       )     ]   ) }  const filterRange = (rows, columnId, filterValue) => {   const [min, max] = filterValue   return rows.filter(row => {     const value = row.values[columnId]     return value >= min && value <= max   }) } library(htmltools)  data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  muiDependency <- function() {   list(     # Material UI requires React     reactR::html_dependency_react(),     htmlDependency(       name = \"mui\",       version = \"5.6.3\",       src = c(href = \"https://unpkg.com/@mui/material@5.6.3/umd/\"),       script = \"material-ui.production.min.js\"     )   ) }  browsable(tagList(   muiDependency(),    reactable(     data,     columns = list(       Price = colDef(         filterable = TRUE,         filterMethod = JS(\"filterRange\"),         filterInput = JS(\"muiRangeFilter\")       )     ),     defaultPageSize = 5,     minRows = 5   ) ))"},{"path":"/reactable/articles/custom-filtering.html","id":"column-filter-methods","dir":"Articles","previous_headings":"","what":"Column Filter Methods","title":"Custom Filtering","text":"Column filter methods can customized using filterMethod argument colDef(): filterMethod JavaScript function, wrapped JS(), takes 3 arguments — rows, column ID, filter value — returns filtered array rows.","code":"colDef(   filterMethod = JS(\"     function(rows, columnId, filterValue) {       /* ... */       return filteredRows     }   \") ) filterMethod(   rows: Array<Row>,   columnId: string,   filterValue: any ): Array<Row>"},{"path":"/reactable/articles/custom-filtering.html","id":"filter-method-js-arguments","dir":"Articles","previous_headings":"Column Filter Methods","what":"Arguments","title":"Custom Filtering","text":"rows, array row objects. rows consists data rows , include aggregated rows table grouped. Row following properties: columnId, column ID. Use access cell value, like row.values[columnId]. filterValue, column filter value. string using default filter inputs.","code":""},{"path":"/reactable/articles/custom-filtering.html","id":"filter-method-js-details","dir":"Articles","previous_headings":"Column Filter Methods","what":"Details","title":"Custom Filtering","text":"filterMethod called filter value cleared, don’t need specifically handle case filterValue unset (undefined). filterMethod applies individual column filters, affect global table searching.","code":""},{"path":"/reactable/articles/custom-filtering.html","id":"table-search-methods","dir":"Articles","previous_headings":"","what":"Table Search Methods","title":"Custom Filtering","text":"global table search method can customized using searchMethod argument reactable(): searchMethod JavaScript function, wrapped JS(), takes 3 arguments — rows, column IDs, search value — returns filtered array rows.","code":"reactable(   searchMethod = JS(\"     function(rows, columnIds, filterValue) {       /* ... */       return filteredRows     }   \") ) searchMethod(   rows: Array<Row>,   columnIds: Array<string>,   searchValue: any ): Array<Row>"},{"path":"/reactable/articles/custom-filtering.html","id":"search-method-js-arguments","dir":"Articles","previous_headings":"Table Search Methods","what":"Arguments","title":"Custom Filtering","text":"rows, array row objects. rows consists data rows , include aggregated rows table grouped. Row following properties: columnIds, array column IDs. Use access cell values columns searched, like row.values[columnId]. searchValue, search value. string using default search input.","code":""},{"path":"/reactable/articles/custom-filtering.html","id":"search-method-js-details","dir":"Articles","previous_headings":"Table Search Methods","what":"Details","title":"Custom Filtering","text":"searchMethod called search value cleared, don’t need specifically handle case searchValue unset (undefined).","code":""},{"path":"/reactable/articles/custom-filtering.html","id":"column-filter-inputs","dir":"Articles","previous_headings":"","what":"Column Filter Inputs","title":"Custom Filtering","text":"Column filter inputs customized using filterInput argument colDef(). filterInput can either element function returns element rendered place default column filter. Unlike custom rendering table elements, custom filter inputs must communicate back table filtering changes, can tricky. many simpler cases, can write custom filter input R use Reactable.setFilter() reactable JavaScript API notify table filter changes. Note table must unique elementId use Reactable.setFilter() — see Using JavaScript API details. advanced customization, can write filter input entirely JavaScript, using React JavaScript library create element gets sets filter value. reactable, JavaScript render functions can return React elements, reactable comes React dependency via reactR package. Use reactR::html_dependency_react() explicitly include dependency find version React use. information React using React R, see React documentation reactR package documentation. Tip: Many column filter inputs visible text label, including default text inputs. custom filter visible text label, sure give accessible name using aria-label attribute similar technique.","code":""},{"path":"/reactable/articles/custom-filtering.html","id":"filter-r-render-function","dir":"Articles","previous_headings":"Column Filter Inputs","what":"R render function","title":"Custom Filtering","text":"R render functions take 2 optional arguments — column values column name — return element render.","code":"colDef(   filterInput = function(values, name) {     # input:     #   - values, the column values (optional)     #   - name, the column name  (optional)     #     # output:     #   - element to render (e.g. an HTML tag or HTML string)     htmltools::tags$input(       type = \"text\",       onchange = sprintf(\"Reactable.setFilter('tbl', '%s', this.value)\", name),       \"aria-label\" = sprintf(\"Filter %s\", name),       style = \"width: 100%;\"     )   } )"},{"path":"/reactable/articles/custom-filtering.html","id":"filter-js-render-function","dir":"Articles","previous_headings":"Column Filter Inputs","what":"JavaScript render function","title":"Custom Filtering","text":"JavaScript render functions, wrapped JS(), take 2 optional arguments — column object table state object — return element render.","code":"colDef(   filterInput = JS(\"     function(column, state) {       // input:       //  - column, an object containing column properties       //  - state, an object containing the table state       //       // output:       //  - element to render (e.g. an HTML string or React element)       return React.createElement('input', {         type: 'text',         value: column.filterValue,         onChange: function(e) {           return column.setFilter(e.target.value || undefined)         },         'aria-label': 'Filter ' + column.name       })     }   \") )"},{"path":[]},{"path":[]},{"path":[]},{"path":"/reactable/articles/custom-filtering.html","id":"basic-custom-filter-method","dir":"Articles","previous_headings":"Examples","what":"Basic custom filter method","title":"Custom Filtering","text":"example shows basic usage custom filter method, changing filtering Manufacturer column case-sensitive rather case-insensitive. (Try filtering “bmw” “BMW”).","code":"data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  reactable(   data,   columns = list(     Manufacturer = colDef(       filterable = TRUE,       # Filter by case-sensitive text match       filterMethod = JS(\"function(rows, columnId, filterValue) {         return rows.filter(function(row) {           return row.values[columnId].indexOf(filterValue) !== -1         })       }\")     )   ),   defaultPageSize = 5 )"},{"path":"/reactable/articles/custom-filtering.html","id":"basic-custom-search-method","dir":"Articles","previous_headings":"Examples","what":"Basic custom search method","title":"Custom Filtering","text":"example shows basic usage custom search method, changing global searching case-sensitive text match columns. (Try searching “bmw” “BMW”). Note columns may numeric another non-string type, can use String() convert values strings calling string methods like indexOf().","code":"data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  reactable(   data,   searchable = TRUE,   # Search by case-sensitive text match   searchMethod = JS(\"function(rows, columnIds, searchValue) {     return rows.filter(function(row) {       return columnIds.some(function(columnId) {         return String(row.values[columnId]).indexOf(searchValue) !== -1       })     })   }\"),   defaultPageSize = 5 )"},{"path":"/reactable/articles/custom-filtering.html","id":"numeric-value-filtering","dir":"Articles","previous_headings":"Examples","what":"Numeric value filtering","title":"Custom Filtering","text":"example shows can filter numeric column based minimum value. (Try filtering Price column 30).","code":"data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  reactable(   data,   columns = list(     Price = colDef(       filterable = TRUE,       # Filter by minimum price       filterMethod = JS(\"function(rows, columnId, filterValue) {         return rows.filter(function(row) {           return row.values[columnId] >= filterValue         })       }\")     )   ),   defaultPageSize = 5 )"},{"path":"/reactable/articles/custom-filtering.html","id":"regular-expression-pattern-filtering","dir":"Articles","previous_headings":"Examples","what":"Regular expression pattern filtering","title":"Custom Filtering","text":"example shows can filter column based regular expression pattern. Note regular expression escaped — see regular expression escaping example escape special characters regular expressions.","code":"data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  reactable(   data,   columns = list(     Manufacturer = colDef(       filterable = TRUE,       # Filter by case-insensitive text match       filterMethod = JS(\"function(rows, columnId, filterValue) {         const pattern = new RegExp(filterValue, 'i')          return rows.filter(function(row) {           return pattern.test(row.values[columnId])         })       }\")     )   ),   defaultPageSize = 5 )"},{"path":"/reactable/articles/custom-filtering.html","id":"fuzzy-text-searching","dir":"Articles","previous_headings":"Examples","what":"Fuzzy text searching","title":"Custom Filtering","text":"example uses match-sorter JavaScript library add fuzzy searching table. (Try searching “adi” match “Cadillac” “Audi”). also shows can create reusable search filter methods can shared across multiple tables columns.","code":"library(htmltools)  data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  # match-sorter library dependency. Include this anywhere in your document or app. matchSorterDep <- htmlDependency(   \"match-sorter\",    \"1.8.0\",   c(href = \"https://unpkg.com/match-sorter@1.8.0/dist/umd/\"),   script = \"match-sorter.min.js\" )  # Fuzzy search method based on match-sorter # See https://github.com/kentcdodds/match-sorter for advanced customization matchSorterSearchMethod <-  JS(\"function(rows, columnIds, searchValue) {   const keys = columnIds.map(function(id) {     return function(row) {       return row.values[id]     }   })   return matchSorter(rows, searchValue, { keys: keys }) }\")  browsable(tagList(   matchSorterDep,    reactable(     data,     searchable = TRUE,     searchMethod = matchSorterSearchMethod,     defaultPageSize = 5   ) ))"},{"path":"/reactable/articles/custom-filtering.html","id":"select-input-filter","dir":"Articles","previous_headings":"Examples","what":"Select input filter","title":"Custom Filtering","text":"example shows can render custom <select> input filter R. <select> input filters Manufacturer column set unique values, includes additional “” option clear filter.","code":"library(htmltools)  data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  reactable(   data,   filterable = TRUE,   columns = list(     Manufacturer = colDef(       filterInput = function(values, name) {         tags$select(           # Set to undefined to clear the filter           onchange = sprintf(\"Reactable.setFilter('cars-select', '%s', event.target.value || undefined)\", name),           # \"All\" has an empty value to clear the filter, and is the default option           tags$option(value = \"\", \"All\"),           lapply(unique(values), tags$option),           \"aria-label\" = sprintf(\"Filter %s\", name),           style = \"width: 100%; height: 28px;\"         )       }     )   ),   defaultPageSize = 5,   elementId = \"cars-select\" )"},{"path":"/reactable/articles/custom-filtering.html","id":"data-list-filter","dir":"Articles","previous_headings":"Examples","what":"Data list filter","title":"Custom Filtering","text":"<datalist> element like native text input, autocomplete feature lets choose set unique options. (Try searching “ac” Manufacturer column.) example also shows can create reusable filter inputs, set default custom filters based column type.","code":"library(htmltools)  data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  # Creates a data list column filter for a table with the given ID dataListFilter <- function(tableId, style = \"width: 100%; height: 28px;\") {   function(values, name) {     dataListId <- sprintf(\"%s-%s-list\", tableId, name)     tagList(       tags$input(         type = \"text\",         list = dataListId,         oninput = sprintf(\"Reactable.setFilter('%s', '%s', event.target.value || undefined)\", tableId, name),         \"aria-label\" = sprintf(\"Filter %s\", name),         style = style       ),       tags$datalist(         id = dataListId,         lapply(unique(values), function(value) tags$option(value = value))       )     )   } }  reactable(   data,   filterable = TRUE,   columns = list(     # Use data list filter for a specific column     Manufacturer = colDef(       filterInput = dataListFilter(\"cars-list\")     )   ),   # Or use data list filter as the default for all factor columns   defaultColDef = colDef(     filterInput = function(values, name) {       if (is.factor(values)) {         dataListFilter(\"cars-list\")(values, name)       }     }   ),   defaultPageSize = 5,   elementId = \"cars-list\" )"},{"path":"/reactable/articles/custom-filtering.html","id":"range-filter","dir":"Articles","previous_headings":"Examples","what":"Range filter","title":"Custom Filtering","text":"basic example native <input type=\"range\"> element numeric filtering. Price column filtered minimum value.","code":"library(htmltools)  data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  reactable(   data,   columns = list(     Price = colDef(       filterable = TRUE,       filterMethod = JS(\"function(rows, columnId, filterValue) {         return rows.filter(function(row) {           return row.values[columnId] >= filterValue         })       }\"),       filterInput = function(values, name) {         oninput <- sprintf(\"Reactable.setFilter('cars-range', '%s', this.value)\", name)         tags$input(           type = \"range\",           min = floor(min(values)),           max = ceiling(max(values)),           value = floor(min(values)),           oninput = oninput,           onchange = oninput, # For IE11 support           \"aria-label\" = sprintf(\"Filter by minimum %s\", name)         )       }     )   ),   defaultPageSize = 5,   elementId = \"cars-range\" )"},{"path":"/reactable/articles/custom-filtering.html","id":"external-range-filter","dir":"Articles","previous_headings":"Examples","what":"External range filter","title":"Custom Filtering","text":"example shows can create custom filter inputs outside table, using complex version range filter .","code":"library(htmltools)  # Custom range input filter with label and value rangeFilter <- function(tableId, columnId, label, min, max, value = NULL, step = NULL, width = \"200px\") {   value <- if (!is.null(value)) value else min   inputId <- sprintf(\"filter_%s_%s\", tableId, columnId)   valueId <- sprintf(\"filter_%s_%s__value\", tableId, columnId)   oninput <- paste(     sprintf(\"document.getElementById('%s').textContent = this.value;\", valueId),     sprintf(\"Reactable.setFilter('%s', '%s', this.value)\", tableId, columnId)   )      div(     tags$label(`for` = inputId, label),     div(       style = sprintf(\"display: flex; align-items: center; width: %s\", validateCssUnit(width)),       tags$input(         id = inputId,         type = \"range\",         min = min,         max = max,         step = step,         value = value,         oninput = oninput,         onchange = oninput, # For IE11 support         style = \"width: 100%;\"       ),       span(id = valueId, style = \"margin-left: 8px;\", value)     )   ) }  # Filter method that filters numeric columns by minimum value filterMinValue <- JS(\"function(rows, columnId, filterValue) {   return rows.filter(function(row) {     return row.values[columnId] >= filterValue   }) }\") data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  browsable(tagList(   rangeFilter(     \"cars-ext-range\",     \"Price\",     \"Filter by Minimum Price\",     floor(min(data$Price)),     ceiling(max(data$Price))   ),      reactable(     data,     columns = list(       Price = colDef(filterMethod = filterMinValue)     ),     defaultPageSize = 5,     elementId = \"cars-ext-range\"   ) ))"},{"path":"/reactable/articles/custom-filtering.html","id":"external-checkbox-filter","dir":"Articles","previous_headings":"Examples","what":"External checkbox filter","title":"Custom Filtering","text":"example shows can filter column logical values using external checkbox input. data contains lot missing values, want checkbox allows show just rows missing values. add hidden column indicates TRUE FALSE whether values row missing, filter true values checkbox checked.","code":"library(htmltools)  data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  # Add missing values to the data set.seed(123) data[] <- lapply(data, function(x) {   x[sample(1:length(x), length(x) / 3)] <- NA   x })  # Indicates with TRUE or FALSE whether any values in the row are missing data$has_missing <- !complete.cases(data)  browsable(tagList(   tags$label(     tags$input(       type = \"checkbox\",       onclick = \"Reactable.setFilter('cars-missing', 'has_missing', event.target.checked)\"     ),     \"Show missing values only\"   ),      reactable(     data,     columns = list(       # Hidden column for filtering missing values       has_missing = colDef(         show = FALSE,         filterMethod = JS(\"function(rows, columnId, filterValue) {           if (filterValue === true) {             return rows.filter(function(row) {               const hasMissing = row.values[columnId]               return hasMissing             })           }           return rows         }\")       )     ),     defaultColDef = colDef(na = \"-\"),     defaultPageSize = 5,     elementId = \"cars-missing\"   ) ))"},{"path":"/reactable/articles/custom-filtering.html","id":"basic-custom-filter-input-react","dir":"Articles","previous_headings":"Examples","what":"Basic custom filter input (React)","title":"Custom Filtering","text":"example shows write custom filter input entirely JavaScript, using React. renders basic text input filter Manufacturer column.","code":"data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  reactable(   data,   columns = list(     Manufacturer = colDef(       filterable = TRUE,       filterInput = JS(\"function(column) {         return React.createElement('input', {           type: 'text',           value: column.filterValue,           onChange: function(event) {             // Set to undefined to clear the filter             return column.setFilter(event.target.value || undefined)           },           'aria-label': 'Filter ' + column.name,           style: { width: '100%' }         })       }\")     )   ),   defaultPageSize = 5 )"},{"path":"/reactable/articles/custom-filtering.html","id":"range-filter-react","dir":"Articles","previous_headings":"Examples","what":"Range filter (React)","title":"Custom Filtering","text":"’s complex example React-based filter input, filter values depend column data. min max values column found dynamically state.data. JavaScript code embedded separate js language chunk make easier work . also included external JavaScript file, inlined R using htmltools::tags$script().","code":"// Custom range filter with value label function rangeFilter(column, state) {   // Get min and max values from raw table data   let min = Infinity   let max = 0   state.data.forEach(function(row) {     const value = row[column.id]     if (value < min) {       min = Math.floor(value)     } else if (value > max) {       max = Math.ceil(value)     }   })    const filterValue = column.filterValue || min   const input = React.createElement('input', {     type: 'range',     value: filterValue,     min: min,     max: max,     onChange: function(event) {       // Set to undefined to clear the filter       column.setFilter(event.target.value || undefined)     },     style: { width: '100%', marginRight: '8px' },     'aria-label': 'Filter ' + column.name   })    return React.createElement(     'div',     { style: { display: 'flex', alignItems: 'center', height: '100%' } },     [input, filterValue]   ) }  // Filter method that filters numeric columns by minimum value function filterMinValue(rows, columnId, filterValue) {   return rows.filter(function(row) {     return row.values[columnId] >= filterValue   }) } data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  reactable(   data,   filterable = TRUE,   columns = list(     Price = colDef(       filterMethod = JS(\"filterMinValue\"),       filterInput = JS(\"rangeFilter\")     )   ),   defaultPageSize = 5,   minRows = 5 )"},{"path":"/reactable/articles/custom-rendering.html","id":"example-column-total-with-filtering","dir":"Articles","previous_headings":"","what":"Example: column total with filtering","title":"Custom Rendering","text":"example requires reactable v0.3.0 . example, can easily add column total using R render function: However, column total doesn’t update filtering. , need JavaScript render function access client-side filtered state:","code":"data <- MASS::Cars93[20:24, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  reactable(   data,   searchable = TRUE,   columns = list(     Price = colDef(footer = function(values) {       htmltools::tags$b(sprintf(\"$%.2f\", sum(values)))     }),     Manufacturer = colDef(footer = htmltools::tags$b(\"Total\"))   ) ) data <- MASS::Cars93[20:24, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  reactable(   data,   searchable = TRUE,   columns = list(     Price = colDef(       html = TRUE,       footer = JS(\"function(column, state) {         let total = 0         state.sortedData.forEach(function(row) {           total += row[column.id]         })         return '<b>$' + total.toFixed(2) + '<\/b>'       }\")     ),     Manufacturer = colDef(html = TRUE, footer = \"<b>Total<\/b>\")   ) )"},{"path":[]},{"path":"/reactable/articles/custom-rendering.html","id":"cells-r-render-function","dir":"Articles","previous_headings":"Cells","what":"R render function","title":"Custom Rendering","text":"customize cell rendering, provide R function 3 optional arguments:","code":"colDef(   cell = function(value, index, name) {     # input:     #   - value, the cell value     #   - index, the row index (optional)     #   - name, the column name (optional)     #     # output:     #   - content to render (e.g. an HTML tag or widget)     htmltools::div(style = \"color: red\", toupper(value))   } )"},{"path":"/reactable/articles/custom-rendering.html","id":"cells-js-render-function","dir":"Articles","previous_headings":"Cells","what":"JavaScript render function","title":"Custom Rendering","text":"JavaScript function, wrapped JS(), 2 optional arguments: JavaScript functions, can also customize rendering grouped cells aggregated cells:","code":"colDef(   cell = JS(\"     function(cellInfo, state) {       // input:       //  - cellInfo, an object containing cell info       //  - state, an object containing the table state (optional)       //       // output:       //  - content to render (e.g. an HTML string)       return `<div>${cellInfo.value}<\/div>`     }   \"),   html = TRUE  # to render as HTML ) colDef(   grouped = JS(\"function(cellInfo, state) {     return cellInfo.value   }\"),   aggregated = JS(\"function(cellInfo, state) {     return cellInfo.value   }\") )"},{"path":[]},{"path":[]},{"path":[]},{"path":"/reactable/articles/custom-rendering.html","id":"headers-r-render-function","dir":"Articles","previous_headings":"Headers","what":"R render function","title":"Custom Rendering","text":"customize header rendering, provide R function 2 optional arguments:","code":"colDef(   header = function(value, name) {     # input:     #   - value, the header value     #   - name, the column name (optional)     #     # output:     #   - content to render (e.g. an HTML tag or widget)     htmltools::div(value)   } )"},{"path":"/reactable/articles/custom-rendering.html","id":"headers-js-render-function","dir":"Articles","previous_headings":"Headers","what":"JavaScript render function","title":"Custom Rendering","text":"JavaScript function 2 optional arguments:","code":"colDef(   header = JS(\"     function(column, state) {       // input:       //  - column, an object containing column properties       //  - state, an object containing the table state (optional)       //       // output:       //  - content to render (e.g. an HTML string)       return `<div>${column.name}<\/div>`     }   \"),   html = TRUE  # to render as HTML )"},{"path":[]},{"path":[]},{"path":[]},{"path":"/reactable/articles/custom-rendering.html","id":"footers-r-render-function","dir":"Articles","previous_headings":"Footers","what":"R render function","title":"Custom Rendering","text":"add footer content, provide R function 2 optional arguments:","code":"colDef(   footer = function(values, name) {     # input:     #   - values, the column values     #   - name, the column name (optional)     #     # output:     #   - content to render (e.g. an HTML tag or widget)     htmltools::div(paste(\"Total:\", sum(values)))   } )"},{"path":"/reactable/articles/custom-rendering.html","id":"footers-js-render-function","dir":"Articles","previous_headings":"Footers","what":"JavaScript render function","title":"Custom Rendering","text":"JavaScript function 2 optional arguments:","code":"colDef(   footer = JS(\"     function(column, state) {       // input:       //  - column, an object containing column properties       //  - state, an object containing the table state (optional)       //       // output:       //  - content to render (e.g. an HTML string)       return `<div>Rows: ${state.sortedData.length}<\/div>`     }   \"),   html = TRUE  # to render as HTML )"},{"path":[]},{"path":[]},{"path":[]},{"path":"/reactable/articles/custom-rendering.html","id":"details-r-render-function","dir":"Articles","previous_headings":"Expandable Row Details","what":"R render function","title":"Custom Rendering","text":"add expandable row details, provide R function 2 optional arguments:","code":"reactable(   details = function(index, name) {     # input:     #   - index, the row index     #   - name, the column name (optional)     #     # output:     #   - content to render (e.g., an HTML tag or nested table), or NULL to hide details     htmltools::div(       paste(\"Details for row:\", index),       reactable(data[index, ])     )   } )"},{"path":"/reactable/articles/custom-rendering.html","id":"details-js-render-function","dir":"Articles","previous_headings":"Expandable Row Details","what":"JavaScript render function","title":"Custom Rendering","text":"JavaScript function 2 optional arguments:","code":"reactable(   details = JS(\"     function(rowInfo, state) {       // input:       //  - rowInfo, an object containing row info       //  - state, an object containing the table state (optional)       //       // output:       //  - content to render (e.g. an HTML string)       return `<div>Details for row: ${rowInfo.index}<\/div>`     }   \") )"},{"path":[]},{"path":[]},{"path":"/reactable/articles/custom-sort-icons.html","id":"custom-sort-icons-using-css-pseudo-elements","dir":"Articles","previous_headings":"","what":"Custom sort icons using CSS pseudo-elements","title":"Custom Sort Icons","text":"Sortable column headers aria-sort attribute set either none (unsorted), ascending (ascending sort), descending (descending sort). can use aria-sort state, along CSS pseudo-elements, insert custom arrow arrow symbols (symbol, emoji, text) sorting state. find Unicode arrows symbols, see https://en.wikipedia.org/wiki/Arrow_(symbol)#Arrows_in_Unicode https://www.fileformat.info/info/unicode/block/geometric_shapes/list.htm.","code":"library(reactable) library(htmltools)  reactable(   MASS::Cars93[, 1:5],   defaultSorted = \"Min.Price\",   defaultColDef = colDef(     header = function(value) {       # Add custom sort icons to the right of each column header.       # They don't have any content by themselves, but we'll insert       # text content (arrow symbols) in them using CSS.       # Also, ensure these are hidden from screen readers using aria-hidden=\"true\".       sort_icon <- span(class = \"my-sort-icon\", \"aria-hidden\" = TRUE)       tagList(value, sort_icon)     }   ),   # Hide the built-in sort icon   showSortIcon = FALSE ) /* Styling for all sort icons */ [aria-sort] .my-sort-icon {   margin-left: 5px;   color: #3f51b5; }  /* Styling for ascending sort icon */ [aria-sort='ascending'] .my-sort-icon::after {   /* Up arrow (Unicode) */   content: '\\2bc5'; }  /* Styling for descending sort icon */ [aria-sort='descending'] .my-sort-icon::after {   /* Down arrow (Unicode) */   content: '\\2bc6'; }  /* Styling for unsorted sort icon */ [aria-sort='none'] .my-sort-icon::after {   /* Up-and-down arrow (Unicode) */   content: '\\2195';   opacity: 0.8; }"},{"path":"/reactable/articles/examples.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Examples","text":"create data table, use reactable() data frame matrix. table sortable paginated default:","code":"library(reactable)  reactable(iris)"},{"path":"/reactable/articles/examples.html","id":"column-definitions","dir":"Articles","previous_headings":"Basic Usage","what":"Column definitions","title":"Examples","text":"Columns can customized providing named list column definitions created colDef() columns: convenience, can also specify default colDef() use columns defaultColDef:","code":"reactable(   iris[1:5, ],   columns = list(     Sepal.Length = colDef(name = \"Sepal Length\"),     Sepal.Width = colDef(name = \"Sepal Width\"),     Species = colDef(align = \"center\")   ) ) reactable(   iris[1:5, ],   defaultColDef = colDef(     header = function(value) gsub(\".\", \" \", value, fixed = TRUE),     cell = function(value) format(value, nsmall = 1),     align = \"center\",     minWidth = 70,     headerStyle = list(background = \"#f7f7f8\")   ),   columns = list(     Species = colDef(minWidth = 140)  # overrides the default   ),   bordered = TRUE,   highlight = TRUE )"},{"path":"/reactable/articles/examples.html","id":"sorting","dir":"Articles","previous_headings":"","what":"Sorting","title":"Examples","text":"Tables sortable default. can sort column clicking header, sort multiple columns holding shift key sorting. Sorting toggles ascending descending order default. clear sort, hold shift key sorting, sorting additionally toggle ascending, descending, unsorted order. Note: Ascending order means lowest, first, earliest values appear first. Descending order means largest, last, latest values appear first.","code":""},{"path":"/reactable/articles/examples.html","id":"default-sorted-columns","dir":"Articles","previous_headings":"Sorting","what":"Default sorted columns","title":"Examples","text":"can set default sorted columns providing vector column names defaultSorted: can also provide named list customize default sort orders. Use \"asc\" ascending order, \"desc\" descending order:","code":"reactable(iris[48:52, ], defaultSorted = c(\"Species\", \"Petal.Length\")) reactable(iris[48:52, ], defaultSorted = list(Species = \"asc\", Petal.Length = \"desc\"))"},{"path":"/reactable/articles/examples.html","id":"default-sort-order","dir":"Articles","previous_headings":"Sorting","what":"Default sort order","title":"Examples","text":"Columns sorted ascending order first default. change default sort order columns table, set defaultSortOrder reactable() \"asc\" ascending order, \"desc\" descending order. change sort order individual column, set defaultSortOrder colDef() \"asc\" \"desc\". default sort order column takes precedence table.","code":"reactable(   iris[48:52, ],   defaultSortOrder = \"desc\",   columns = list(     Species = colDef(defaultSortOrder = \"asc\")   ),   defaultSorted = c(\"Species\", \"Petal.Length\") )"},{"path":"/reactable/articles/examples.html","id":"sort-missing-values-last","dir":"Articles","previous_headings":"Sorting","what":"Sort missing values last","title":"Examples","text":"can ignore missing values sorting setting sortNALast column:","code":"reactable(   data.frame(     n = c(1, 2, 3, -Inf, Inf),     x = c(2, 3, 1, NA, NaN),     y = c(\"aa\", \"cc\", \"bb\", NA, NA)   ),   defaultColDef = colDef(sortNALast = TRUE),   defaultSorted = \"x\" )"},{"path":"/reactable/articles/examples.html","id":"no-sorting","dir":"Articles","previous_headings":"Sorting","what":"No sorting","title":"Examples","text":"can disable sorting setting sortable FALSE table column. columns sortable, can help indicate sortable columns using showSortable:","code":"reactable(   iris[1:5, ],   sortable = FALSE,   showSortable = TRUE,   columns = list(     Petal.Width = colDef(sortable = TRUE),     Petal.Length = colDef(sortable = TRUE)   ) )"},{"path":"/reactable/articles/examples.html","id":"hide-sort-icons","dir":"Articles","previous_headings":"Sorting","what":"Hide sort icons","title":"Examples","text":"can hide sort icons setting showSortIcon FALSE. recommended want use custom sort indicator.","code":"reactable(iris[1:5, ], showSortIcon = FALSE)"},{"path":"/reactable/articles/examples.html","id":"filtering","dir":"Articles","previous_headings":"","what":"Filtering","title":"Examples","text":"can make columns filterable setting filterable = TRUE reactable(): make specific columns filterable (), set filterable TRUE FALSE colDef():","code":"data <- MASS::Cars93[1:20, c(\"Manufacturer\", \"Model\", \"Type\", \"AirBags\", \"Price\")]  reactable(data, filterable = TRUE, minRows = 10) reactable(   data,   filterable = TRUE,   columns = list(     Price = colDef(filterable = FALSE)   ),   defaultPageSize = 5 )"},{"path":"/reactable/articles/examples.html","id":"custom-filtering","dir":"Articles","previous_headings":"Filtering","what":"Custom filtering","title":"Examples","text":"Column filtering can customized using filterMethod filterInput arguments colDef(). See Custom Filtering guide details examples. example shows basic usage custom filter method, changing filtering Manufacturer column case-sensitive rather case-insensitive. (Try filtering “bmw” “BMW”).","code":"data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  reactable(   data,   columns = list(     Manufacturer = colDef(       filterable = TRUE,       # Filter by case-sensitive text match       filterMethod = JS(\"function(rows, columnId, filterValue) {         return rows.filter(function(row) {           return row.values[columnId].indexOf(filterValue) !== -1         })       }\")     )   ),   defaultPageSize = 5 )"},{"path":"/reactable/articles/examples.html","id":"searching","dir":"Articles","previous_headings":"","what":"Searching","title":"Examples","text":"can make entire table searchable setting searchable = TRUE reactable():","code":"data <- MASS::Cars93[1:20, c(\"Manufacturer\", \"Model\", \"Type\", \"AirBags\", \"Price\")]  reactable(data, searchable = TRUE, minRows = 10)"},{"path":"/reactable/articles/examples.html","id":"custom-searching","dir":"Articles","previous_headings":"Searching","what":"Custom searching","title":"Examples","text":"table search method can customized using searchMethod argument reactable(). See Custom Filtering guide details examples.","code":""},{"path":"/reactable/articles/examples.html","id":"pagination","dir":"Articles","previous_headings":"","what":"Pagination","title":"Examples","text":"can change default page size configuring defaultPageSize: can also set minimum rows per page using minRows. may useful rows don’t completely fill page, table filtering:","code":"reactable(iris[1:6, ], defaultPageSize = 4) reactable(iris[1:6, ], defaultPageSize = 4, minRows = 4, searchable = TRUE)"},{"path":"/reactable/articles/examples.html","id":"page-size-options","dir":"Articles","previous_headings":"Pagination","what":"Page size options","title":"Examples","text":"can show dropdown page sizes users choose using showPageSizeOptions. page size options can customized pageSizeOptions:","code":"reactable(   iris[1:12, ],   showPageSizeOptions = TRUE,   pageSizeOptions = c(4, 8, 12),   defaultPageSize = 4 )"},{"path":"/reactable/articles/examples.html","id":"alternative-pagination-types","dir":"Articles","previous_headings":"Pagination","what":"Alternative pagination types","title":"Examples","text":"can use alternative pagination type setting paginationType : \"jump\" show page jump \"simple\" show previous/next buttons ","code":""},{"path":"/reactable/articles/examples.html","id":"page-jump","dir":"Articles","previous_headings":"Pagination > Alternative pagination types","what":"Page jump","title":"Examples","text":"","code":"reactable(iris[1:50, ], paginationType = \"jump\", defaultPageSize = 4)"},{"path":"/reactable/articles/examples.html","id":"simple","dir":"Articles","previous_headings":"Pagination > Alternative pagination types","what":"Simple","title":"Examples","text":"","code":"reactable(iris[1:50, ], paginationType = \"simple\", defaultPageSize = 4)"},{"path":"/reactable/articles/examples.html","id":"hide-page-info","dir":"Articles","previous_headings":"Pagination","what":"Hide page info","title":"Examples","text":"can hide page info setting showPageInfo FALSE:","code":"reactable(iris[1:12, ], showPageInfo = FALSE, defaultPageSize = 4) reactable(iris[1:12, ], showPageInfo = FALSE, showPageSizeOptions = TRUE, defaultPageSize = 4)"},{"path":"/reactable/articles/examples.html","id":"always-show-pagination","dir":"Articles","previous_headings":"Pagination","what":"Always show pagination","title":"Examples","text":"default, pagination hidden table one page. keep pagination shown, set showPagination TRUE. especially useful want keep page info showing number rows table.","code":"reactable(iris[1:5, ], showPagination = TRUE)"},{"path":"/reactable/articles/examples.html","id":"no-pagination","dir":"Articles","previous_headings":"Pagination","what":"No pagination","title":"Examples","text":"Tables paginated default, can disable pagination setting pagination FALSE: Tip: Disabling pagination recommended large tables many interactive elements (links, expand buttons, selection checkboxes), can make difficult keyboard users navigate page.","code":"reactable(iris[1:20, ], pagination = FALSE, highlight = TRUE, height = 250)"},{"path":"/reactable/articles/examples.html","id":"grouping-and-aggregation","dir":"Articles","previous_headings":"","what":"Grouping and Aggregation","title":"Examples","text":"can group rows table specifying one columns groupBy: rows grouped, can aggregate data column using aggregate function: can use one built-aggregate functions: custom aggregate function JavaScript:","code":"data <- MASS::Cars93[10:22, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\", \"MPG.city\")]  reactable(data, groupBy = \"Manufacturer\") data <- MASS::Cars93[14:38, c(\"Type\", \"Price\", \"MPG.city\", \"DriveTrain\", \"Man.trans.avail\")]  reactable(   data,   groupBy = \"Type\",   columns = list(     Price = colDef(aggregate = \"max\"),     MPG.city = colDef(aggregate = \"mean\", format = colFormat(digits = 1)),     DriveTrain = colDef(aggregate = \"unique\"),     Man.trans.avail = colDef(aggregate = \"frequency\")   ) ) colDef(aggregate = \"sum\")        # Sum of numbers colDef(aggregate = \"mean\")       # Mean of numbers colDef(aggregate = \"max\")        # Maximum of numbers colDef(aggregate = \"min\")        # Minimum of numbers colDef(aggregate = \"median\")     # Median of numbers colDef(aggregate = \"count\")      # Count of values colDef(aggregate = \"unique\")     # Comma-separated list of unique values colDef(aggregate = \"frequency\")  # Comma-separated counts of unique values colDef(   aggregate = JS(\"     function(values, rows) {       // input:       //  - values: an array of all values in the group       //  - rows: an array of row data values for all rows in the group (optional)       //       // output:       //  - an aggregated value, e.g. a comma-separated list       return values.join(', ')     }   \") )"},{"path":"/reactable/articles/examples.html","id":"multiple-groups","dir":"Articles","previous_headings":"Grouping and Aggregation","what":"Multiple groups","title":"Examples","text":"","code":"data <- data.frame(   State = state.name,   Region = state.region,   Division = state.division,   Area = state.area )  reactable(   data,   groupBy = c(\"Region\", \"Division\"),   columns = list(     Division = colDef(aggregate = \"unique\"),     Area = colDef(aggregate = \"sum\", format = colFormat(separators = TRUE))   ),   bordered = TRUE )"},{"path":"/reactable/articles/examples.html","id":"custom-aggregate-function","dir":"Articles","previous_headings":"Grouping and Aggregation","what":"Custom aggregate function","title":"Examples","text":"Custom aggregate functions useful none built-aggregate functions apply, want aggregate values multiple columns. example, calculating aggregate averages percentages. Within custom aggregate function, can access values column using values argument, values columns using rows argument: ’s example calculates aggregate average price dividing sum two columns, Price Units:","code":"columns = list(   Price = colDef(     aggregate = JS(\"function(values, rows) {       values       // [46.8, 27.6, 57]        rows       // [       //   { \"Model\": \"Dynasty\", \"Manufacturer\": \"Dodge\", \"Price\": 46.8, \"Units\": 2 },       //   { \"Model\": \"Colt\", \"Manufacturer\": \"Dodge\", \"Price\": 27.6, \"Units\": 5 },       //   { \"Model\": \"Caravan\", \"Manufacturer\": \"Dodge\", \"Price\": 57, \"Units\": 5 }       // ]     }\")   ) ) library(dplyr)  set.seed(10)  data <- sample_n(MASS::Cars93[23:40, ], 30, replace = TRUE) %>%   mutate(Price = Price * 3, Units = sample(1:5, 30, replace = TRUE)) %>%   mutate(Avg.Price = Price / Units) %>%   select(Model, Manufacturer, Price, Units, Avg.Price)  reactable(   data,   groupBy = \"Manufacturer\",   columns = list(     Price = colDef(aggregate = \"sum\", format = colFormat(currency = \"USD\")),     Units = colDef(aggregate = \"sum\"),     Avg.Price = colDef(       # Calculate the aggregate Avg.Price as `sum(Price) / sum(Units)`       aggregate = JS(\"function(values, rows) {         let totalPrice = 0         let totalUnits = 0         rows.forEach(function(row) {           totalPrice += row['Price']           totalUnits += row['Units']         })         return totalPrice / totalUnits       }\"),       format = colFormat(currency = \"USD\")     )   ) )"},{"path":"/reactable/articles/examples.html","id":"include-sub-rows-in-pagination","dir":"Articles","previous_headings":"Grouping and Aggregation","what":"Include sub rows in pagination","title":"Examples","text":"default, sub rows excluded pagination always shown page expanded. include sub rows pagination, can set paginateSubRows TRUE. recommended grouped tables large number rows expanded rows may fit one page.","code":"data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\", \"MPG.city\")]  reactable(data, groupBy = \"Type\", paginateSubRows = TRUE)"},{"path":"/reactable/articles/examples.html","id":"column-formatting","dir":"Articles","previous_headings":"","what":"Column Formatting","title":"Examples","text":"can format data column providing colFormat() options format argument colDef(). formatters numbers, dates, times, currencies locale-sensitive automatically adapt language preferences user’s browser. means, example, users see dates formatted timezone numbers formatted locale. use specific locale data formatting, provide vector BCP 47 language tags locales argument. See list common BCP 47 language tags reference. Note: Column formatters change data displayed without affecting underlying data. Sorting, filtering, grouping still work original data.","code":"data <- data.frame(   price_USD = c(123456.56, 132, 5650.12),   price_INR = c(350, 23208.552, 1773156.4),   number_FR = c(123456.56, 132, 5650.12),   temp = c(22, NA, 31),   percent = c(0.9525556, 0.5, 0.112),   date = as.Date(c(\"2019-01-02\", \"2019-03-15\", \"2019-09-22\")) )  reactable(data, columns = list(   price_USD = colDef(format = colFormat(prefix = \"$\", separators = TRUE, digits = 2)),   price_INR = colDef(format = colFormat(currency = \"INR\", separators = TRUE, locales = \"hi-IN\")),   number_FR = colDef(format = colFormat(locales = \"fr-FR\")),   temp = colDef(format = colFormat(suffix = \" °C\")),   percent = colDef(format = colFormat(percent = TRUE, digits = 1)),   date = colDef(format = colFormat(date = TRUE, locales = \"en-GB\")) ))"},{"path":"/reactable/articles/examples.html","id":"date-formatting","dir":"Articles","previous_headings":"Column Formatting","what":"Date formatting","title":"Examples","text":"","code":"datetimes <- as.POSIXct(c(\"2019-01-02 3:22:15\", \"2019-03-15 09:15:55\", \"2019-09-22 14:20:00\"),                         tz = \"America/New_York\") data <- data.frame(   datetime = datetimes,   date = datetimes,   time = datetimes,   time_24h = datetimes,   datetime_pt_BR = datetimes )  reactable(data, columns = list(   datetime = colDef(format = colFormat(datetime = TRUE)),   date = colDef(format = colFormat(date = TRUE)),   time = colDef(format = colFormat(time = TRUE)),   time_24h = colDef(format = colFormat(time = TRUE, hour12 = FALSE)),   datetime_pt_BR = colDef(format = colFormat(datetime = TRUE, locales = \"pt-BR\")) ))"},{"path":"/reactable/articles/examples.html","id":"currency-formatting","dir":"Articles","previous_headings":"Column Formatting","what":"Currency formatting","title":"Examples","text":"","code":"data <- data.frame(   USD = c(12.12, 2141.213, 0.42, 1.55, 34414),   EUR = c(10.68, 1884.27, 0.37, 1.36, 30284.32),   INR = c(861.07, 152122.48, 29.84, 110, 2444942.63),   JPY = c(1280, 226144, 44.36, 164, 3634634.61),   MAD = c(115.78, 20453.94, 4.01, 15, 328739.73) )  reactable(data, columns = list(   USD = colDef(     format = colFormat(currency = \"USD\", separators = TRUE, locales = \"en-US\")   ),   EUR = colDef(     format = colFormat(currency = \"EUR\", separators = TRUE, locales = \"de-DE\")   ),   INR = colDef(     format = colFormat(currency = \"INR\", separators = TRUE, locales = \"hi-IN\")   ),   JPY = colDef(     format = colFormat(currency = \"JPY\", separators = TRUE, locales = \"ja-JP\")   ),   MAD = colDef(     format = colFormat(currency = \"MAD\", separators = TRUE, locales = \"ar-MA\")   ) ))"},{"path":"/reactable/articles/examples.html","id":"formatting-aggregated-cells","dir":"Articles","previous_headings":"Column Formatting","what":"Formatting aggregated cells","title":"Examples","text":"Column formatters apply standard aggregated cells default. want format aggregated cells separately, provide named list cell aggregated options: example, aggregated States formatted :","code":"colDef(   format = list(     cell = colFormat(...),       # Standard cells     aggregated = colFormat(...)  # Aggregated cells   ) ) data <- data.frame(   States = state.name,   Region = state.region,   Area = state.area )  reactable(   data,   groupBy = \"Region\",   columns = list(     States = colDef(       aggregate = \"count\",       format = list(         aggregated = colFormat(suffix = \" states\")       )     ),     Area = colDef(       aggregate = \"sum\",       format = colFormat(suffix = \" mi²\", separators = TRUE)     )   ) )"},{"path":"/reactable/articles/examples.html","id":"displaying-missing-values","dir":"Articles","previous_headings":"Column Formatting","what":"Displaying missing values","title":"Examples","text":"Missing values ignored formatters shown empty cells default. can customize display text setting na column:","code":"reactable(   data.frame(     n = c(1, 2, NA, 4, 5),     x = c(55, 27, NA, NaN, 19),     y = c(1, NA, 0.25, 0.55, NA)   ),   columns = list(     x = colDef(na = \"–\", format = colFormat(prefix = \"$\")),     y = colDef(na = \"NA\", format = colFormat(percent = TRUE))   ) )"},{"path":"/reactable/articles/examples.html","id":"custom-data-formatting","dir":"Articles","previous_headings":"Column Formatting","what":"Custom data formatting","title":"Examples","text":"none built-formatters apply data, can use custom cell renderer instead.","code":""},{"path":"/reactable/articles/examples.html","id":"custom-rendering","dir":"Articles","previous_headings":"","what":"Custom Rendering","title":"Examples","text":"can customize data displayed using R JavaScript function returns custom content. R render functions support Shiny HTML tags (htmltools) HTML widgets, JavaScript render functions allow dynamic behavior. can also render content HTML using colDef(html = TRUE). Note raw HTML escaped default. See Custom Rendering details use render functions, Demo Cookbook even examples custom rendering. Note: Custom rendering changes data displayed without affecting underlying data. Sorting, filtering, grouping still work original data.","code":""},{"path":[]},{"path":"/reactable/articles/examples.html","id":"r-render-function","dir":"Articles","previous_headings":"Custom Rendering > Cell rendering","what":"R render function","title":"Examples","text":"","code":"data <- MASS::Cars93[1:5, c(\"Manufacturer\", \"Model\", \"Type\", \"AirBags\", \"Price\")]  reactable(data, columns = list(   Model = colDef(cell = function(value, index) {     # Render as a link     url <- sprintf(\"https://wikipedia.org/wiki/%s_%s\", data[index, \"Manufacturer\"], value)     htmltools::tags$a(href = url, target = \"_blank\", as.character(value))   }),   AirBags = colDef(cell = function(value) {     # Render as an X mark or check mark     if (value == \"None\") \"\\u274c No\" else \"\\u2714\\ufe0f Yes\"   }),   Price = colDef(cell = function(value) {     # Render as currency     paste0(\"$\", format(value * 1000, big.mark = \",\"))   }) ))"},{"path":"/reactable/articles/examples.html","id":"javascript-render-function","dir":"Articles","previous_headings":"Custom Rendering > Cell rendering","what":"JavaScript render function","title":"Examples","text":"","code":"data <- MASS::Cars93[1:5, c(\"Manufacturer\", \"Model\", \"Type\", \"AirBags\", \"Price\")]  reactable(data, columns = list(   Model = colDef(html = TRUE, cell = JS('     function(cellInfo) {       // Render as a link       const url = `https://wikipedia.org/wiki/${cellInfo.row[\"Manufacturer\"]}_${cellInfo.value}`       return `<a href=\"${url}\" target=\"_blank\">${cellInfo.value}<\/a>`     }   ')),   AirBags = colDef(cell = JS(\"     function(cellInfo) {       // Render as an X mark or check mark       return cellInfo.value === 'None' ? '\\u274c No' : '\\u2714\\ufe0f Yes'     }   \")),   Price = colDef(cell = JS(\"     function(cellInfo) {       // Render as currency       return '$' + (cellInfo.value * 1000).toLocaleString()     }   \")) ))"},{"path":"/reactable/articles/examples.html","id":"embedding-html-widgets","dir":"Articles","previous_headings":"Custom Rendering > Cell rendering","what":"Embedding HTML widgets","title":"Examples","text":"","code":"library(dplyr) library(sparkline)  data <- chickwts %>%   group_by(feed) %>%   summarise(weight = list(weight)) %>%   mutate(boxplot = NA, sparkline = NA)  reactable(data, columns = list(   weight = colDef(cell = function(values) {     sparkline(values, type = \"bar\", chartRangeMin = 0, chartRangeMax = max(chickwts$weight))   }),   boxplot = colDef(cell = function(value, index) {     sparkline(data$weight[[index]], type = \"box\")   }),   sparkline = colDef(cell = function(value, index) {     sparkline(data$weight[[index]])   }) ))"},{"path":"/reactable/articles/examples.html","id":"grouped-cell-rendering","dir":"Articles","previous_headings":"Custom Rendering","what":"Grouped cell rendering","title":"Examples","text":"","code":"data <- MASS::Cars93[10:22, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\", \"MPG.city\")]  reactable(   data,   groupBy = c(\"Manufacturer\", \"Type\"),   columns = list(     Manufacturer = colDef(       # Render grouped cells without the row count       grouped = JS(\"function(cellInfo) {         return cellInfo.value       }\")     ),     Type = colDef(       # Render grouped cells with the row count, only if there are multiple sub rows       grouped = JS(\"function(cellInfo) {         if (cellInfo.subRows.length > 1) {           return cellInfo.value + ' (' + cellInfo.subRows.length + ')'         }         return cellInfo.value       }\")     )   ) )"},{"path":"/reactable/articles/examples.html","id":"aggregated-cell-rendering","dir":"Articles","previous_headings":"Custom Rendering","what":"Aggregated cell rendering","title":"Examples","text":"","code":"library(dplyr)  set.seed(10)  data <- sample_n(tail(MASS::Cars93, 9), 30, replace = TRUE) %>%   select(Manufacturer, Model, Type, Sales = Price)  reactable(   data,   groupBy = \"Manufacturer\",   searchable = TRUE,   columns = list(     Model = colDef(aggregate = \"unique\"),     Type = colDef(       # Render aggregated value as a comma-separated list of unique values       aggregated = JS(\"function(cellInfo) {         const values = cellInfo.subRows.map(function(row) { return row['Type'] })         const unique = values.reduce(function(obj, v) { obj[v] = true; return obj }, {})         return Object.keys(unique).join(', ')       }\")     ),     Sales = colDef(       aggregate = \"sum\",       # Render aggregated cell as currency       aggregated = JS(\"function(cellInfo) {         return '$' + cellInfo.value.toFixed(2)       }\")     )   ) )"},{"path":"/reactable/articles/examples.html","id":"header-rendering","dir":"Articles","previous_headings":"Custom Rendering","what":"Header rendering","title":"Examples","text":"example requires reactable v0.3.0 .","code":"library(htmltools)  reactable(   iris[1:5, ],   defaultColDef = colDef(header = function(value) {     units <- div(style = \"color: #737373\", \"cm\")     div(title = value, value, units)   }),   columns = list(     Petal.Width = colDef(       name = \"Petal Width\",       html = TRUE,       align = \"left\",       header = JS('function(column) {         return column.name + `<div style=\"color: #737373\">cm<\/div>`       }')     ),     Species = colDef(header = function(value) {       tags$a(href = \"https://wikipedia.org/wiki/List_of_Iris_species\", value)     })   ) )"},{"path":"/reactable/articles/examples.html","id":"custom-meta-rendering","dir":"Articles","previous_headings":"Custom Rendering","what":"Custom metadata","title":"Examples","text":"New v0.4.0 can pass arbitrary data R JavaScript render functions using meta argument reactable(). meta named list values can also JS() expressions functions. Custom metadata can accessed JavaScript using state.meta property, updated using updateReactable() Shiny Reactable.setMeta() JavaScript API. Use custom metadata : Simplify JavaScript render functions need access data outside table Dynamically change data formatted without rerendering table Share JavaScript code data different render functions","code":"library(htmltools)  data <- MASS::Cars93[1:6, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\", \"MPG.city\")]  exchange_rates <- list(   USD = 1,   CAD = 1.30,   JPY = 137.56 )  tbl <- reactable(   data,   columns = list(     Price = colDef(       cell = JS(\"function(cellInfo, state) {         const { currency, exchangeRates } = state.meta         const converted = cellInfo.value * exchangeRates[currency]         return converted.toLocaleString(undefined, { style: 'currency', currency: currency })       }\")     )   ),   meta = list(     currency = \"USD\",     exchangeRates = exchange_rates   ),   elementId = \"cars-currency-table\" )  browsable(   tagList(     tags$label(       \"Currency\",       tags$select(         onchange = \"Reactable.setMeta('cars-currency-table', { currency: event.target.value })\",         lapply(names(exchange_rates), tags$option)       )     ),      tags$hr(\"aria-hidden\" = \"true\"),      tbl   ) )"},{"path":"/reactable/articles/examples.html","id":"footers","dir":"Articles","previous_headings":"","what":"Footers","title":"Examples","text":"can add column footers using footer argument colDef(). footer can either custom content render (e.g., character string HTML tag), custom render function. See Custom Rendering learn using custom render functions.","code":""},{"path":"/reactable/articles/examples.html","id":"footers-r-render-function","dir":"Articles","previous_headings":"Footers","what":"R render function","title":"Examples","text":"","code":"library(dplyr) library(htmltools)  data <- MASS::Cars93[18:47, ] %>%   select(Manufacturer, Model, Type, Sales = Price)  reactable(   data,   defaultPageSize = 5,   columns = list(     Manufacturer = colDef(footer = \"Total\"),     Sales = colDef(footer = function(values) sprintf(\"$%.2f\", sum(values)))   ),   defaultColDef = colDef(footerStyle = list(fontWeight = \"bold\")) )"},{"path":"/reactable/articles/examples.html","id":"footers-js-render-function","dir":"Articles","previous_headings":"Footers","what":"JavaScript render function","title":"Examples","text":"example requires reactable v0.3.0 .","code":"reactable(   data,   searchable = TRUE,   defaultPageSize = 5,   minRows = 5,   columns = list(     Manufacturer = colDef(footer = \"Total\"),     Sales = colDef(       footer = JS(\"function(column, state) {         let total = 0         state.sortedData.forEach(function(row) {           total += row[column.id]         })         return '$' + total.toFixed(2)       }\")     )   ),   defaultColDef = colDef(footerStyle = list(fontWeight = \"bold\")) )"},{"path":"/reactable/articles/examples.html","id":"embedding-html-widgets-footers","dir":"Articles","previous_headings":"Footers","what":"Embedding HTML widgets","title":"Examples","text":"","code":"library(sparkline)  reactable(   iris[1:20, ],   defaultPageSize = 5,   bordered = TRUE,   defaultColDef = colDef(footer = function(values) {     if (!is.numeric(values)) return()     sparkline(values, type = \"box\", width = 100, height = 30)   }) )"},{"path":"/reactable/articles/examples.html","id":"expandable-row-details","dir":"Articles","previous_headings":"","what":"Expandable Row Details","title":"Examples","text":"example requires reactable v0.3.0 . can make rows expandable additional content details, takes R JavaScript render function. See Custom Rendering details use render functions. details column can customized providing colDef() instead. can used add column name, render HTML content, change column width:","code":"reactable(iris[1:5, ], details = function(index) {   htmltools::div(     \"Details for row: \", index,     htmltools::tags$pre(paste(capture.output(iris[index, ]), collapse = \"\\n\"))   ) }) reactable(iris[1:5, ], details = colDef(   name = \"More\",   details = JS(\"function(rowInfo) {     return `Details for row: ${rowInfo.index}` +       `<pre>${JSON.stringify(rowInfo.values, null, 2)}<\/pre>`   }\"),   html = TRUE,   width = 60 ))"},{"path":"/reactable/articles/examples.html","id":"nested-tables","dir":"Articles","previous_headings":"Expandable Row Details","what":"Nested tables","title":"Examples","text":"R render functions, can render HTML tags, HTML widgets, even nested tables:","code":"data <- unique(CO2[, c(\"Plant\", \"Type\")])  reactable(data, details = function(index) {   plant_data <- CO2[CO2$Plant == data$Plant[index], ]   htmltools::div(style = \"padding: 1rem\",     reactable(plant_data, outlined = TRUE)   ) })"},{"path":"/reactable/articles/examples.html","id":"conditional-row-details","dir":"Articles","previous_headings":"Expandable Row Details","what":"Conditional row details","title":"Examples","text":"R render functions support conditional rendering. render function returns NULL, row won’t expandable:","code":"reactable(iris[1:5, ], details = function(index) {   if (index %in% c(3, 5)) {     reactable(data.frame(x = c(1, 2, 3), y = c(\"a\", \"b\", \"c\")), fullWidth = FALSE)   } })"},{"path":"/reactable/articles/examples.html","id":"multiple-row-details","dir":"Articles","previous_headings":"Expandable Row Details","what":"Multiple row details","title":"Examples","text":"example requires reactable v0.3.0 . can add details individual columns, even show multiple details row:","code":"reactable(iris[1:5, ],   details = function(index) {     if (index %in% c(3, 5)) {       reactable(data.frame(x = c(1, 2, 3), y = c(\"a\", \"b\", \"c\")), fullWidth = FALSE)     }   },   columns = list(     Petal.Length = colDef(details = function(index) {       paste(\"Petal.Length: \", iris[index, \"Petal.Length\"])     }),     Sepal.Length = colDef(format = colFormat(digits = 1), details = JS(\"       function(rowInfo) {         return 'Sepal.Length: ' + rowInfo.values['Sepal.Length']       }     \"))   ) )"},{"path":"/reactable/articles/examples.html","id":"default-expanded-rows","dir":"Articles","previous_headings":"Expandable Row Details","what":"Default expanded rows","title":"Examples","text":"can expand rows default setting defaultExpanded TRUE:","code":"reactable(   iris[1:12, ],   defaultPageSize = 4,   details = function(index) paste(\"Details for row:\", index),   defaultExpanded = TRUE )"},{"path":"/reactable/articles/examples.html","id":"conditional-styling","dir":"Articles","previous_headings":"","what":"Conditional Styling","title":"Examples","text":"can conditionally style table using functions return inline styles CSS classes. Just like custom rendering, style functions can either R JavaScript. See Conditional Styling details use style functions, Demo Cookbook even examples conditional styling.","code":""},{"path":[]},{"path":"/reactable/articles/examples.html","id":"r-style-function","dir":"Articles","previous_headings":"Conditional Styling > Cell styling","what":"R style function","title":"Examples","text":"","code":"reactable(sleep[1:6, ], columns = list(   extra = colDef(     style = function(value) {       if (value > 0) {         color <- \"#008000\"       } else if (value < 0) {         color <- \"#e00000\"       } else {         color <- \"#777\"       }       list(color = color, fontWeight = \"bold\")     }   ) ))"},{"path":"/reactable/articles/examples.html","id":"javascript-style-function","dir":"Articles","previous_headings":"Conditional Styling > Cell styling","what":"JavaScript style function","title":"Examples","text":"example requires reactable v0.3.0 .","code":"reactable(sleep[1:6, ], columns = list(   extra = colDef(     style = JS(\"function(rowInfo) {       const value = rowInfo.values['extra']       let color       if (value > 0) {         color = '#008000'       } else if (value < 0) {         color = '#e00000'       } else {         color = '#777'       }       return { color: color, fontWeight: 'bold' }     }\")   ) ))"},{"path":[]},{"path":"/reactable/articles/examples.html","id":"r-style-function-1","dir":"Articles","previous_headings":"Conditional Styling > Row styling","what":"R style function","title":"Examples","text":"","code":"reactable(sleep[1:6, ],    rowStyle = function(index) {     if (sleep[index, \"extra\"] < -1) {       list(background = \"rgba(0, 0, 0, 0.05)\")     }   },   rowClass = function(index) {     if (sleep[index, \"extra\"] < -1) {       \"bold\"     }   } ) .bold {   font-weight: bold; }"},{"path":"/reactable/articles/examples.html","id":"javascript-style-function-1","dir":"Articles","previous_headings":"Conditional Styling > Row styling","what":"JavaScript style function","title":"Examples","text":"example requires reactable v0.3.0 .","code":"reactable(sleep[1:6, ],   rowStyle = JS(\"function(rowInfo) {     if (rowInfo.values['extra'] < -1) {       return { background: 'rgba(0, 0, 0, 0.05)' }     }   }\"),   rowClass = JS(\"function(rowInfo) {     if (rowInfo.values['extra'] < -1) {       return 'bold'     }   }\") )"},{"path":"/reactable/articles/examples.html","id":"custom-meta-styling","dir":"Articles","previous_headings":"Conditional Styling","what":"Custom metadata","title":"Examples","text":"New v0.4.0 can pass arbitrary data R JavaScript style functions using meta argument reactable(). meta named list values can also JS() expressions functions. Custom metadata can accessed JavaScript using state.meta property, updated using updateReactable() Shiny Reactable.setMeta() JavaScript API. Use custom metadata : Simplify JavaScript style functions need access data outside table Dynamically change data styled without rerendering table Share JavaScript code data different style functions","code":"library(htmltools)  data <- MASS::Cars93[1:6, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\", \"MPG.city\")]  mpg_normalized <- (data$MPG.city - min(data$MPG.city)) / (max(data$MPG.city) - min(data$MPG.city)) mpg_colors <-  rgb(colorRamp(c(\"#ffe4cc\", \"#ff9f1a\"))(mpg_normalized), maxColorValue = 255)  tbl <- reactable(   data,   columns = list(     MPG.city = colDef(       style = JS(\"function(rowInfo, column, state) {         const { showColors, mpgColors } = state.meta         if (showColors) {           return { backgroundColor: mpgColors[rowInfo.index] }         }       }\")     )   ),   meta = list(     mpgColors = mpg_colors,     showColors = TRUE   ),   elementId = \"cars-colors-table\" )  browsable(   tagList(     tags$label(       tags$input(         type = \"checkbox\",         checked = NA,         onclick = \"Reactable.setMeta('cars-colors-table', function(prevMeta) {           return { showColors: !prevMeta.showColors }         })\"       ),       \"Show color scale\"     ),      tags$hr(\"aria-hidden\" = \"true\"),      tbl   ) )"},{"path":"/reactable/articles/examples.html","id":"table-styling","dir":"Articles","previous_headings":"","what":"Table Styling","title":"Examples","text":"can customize table styling using several options, can combined:","code":""},{"path":"/reactable/articles/examples.html","id":"highlight-rows-on-hover","dir":"Articles","previous_headings":"Table Styling","what":"Highlight rows on hover","title":"Examples","text":"","code":"reactable(iris[1:5, ], highlight = TRUE)"},{"path":"/reactable/articles/examples.html","id":"bordered","dir":"Articles","previous_headings":"Table Styling","what":"Bordered","title":"Examples","text":"","code":"reactable(iris[1:5, ], bordered = TRUE)"},{"path":"/reactable/articles/examples.html","id":"borderless","dir":"Articles","previous_headings":"Table Styling","what":"Borderless","title":"Examples","text":"","code":"reactable(iris[1:5, ], borderless = TRUE)"},{"path":"/reactable/articles/examples.html","id":"outlined","dir":"Articles","previous_headings":"Table Styling","what":"Outlined","title":"Examples","text":"","code":"reactable(iris[1:5, ], outlined = TRUE)"},{"path":"/reactable/articles/examples.html","id":"striped","dir":"Articles","previous_headings":"Table Styling","what":"Striped","title":"Examples","text":"","code":"reactable(iris[1:5, ], striped = TRUE)"},{"path":"/reactable/articles/examples.html","id":"bordered-striped-highlighting","dir":"Articles","previous_headings":"Table Styling","what":"Bordered + striped + highlighting","title":"Examples","text":"","code":"reactable(iris[1:5, ], bordered = TRUE, striped = TRUE, highlight = TRUE)"},{"path":"/reactable/articles/examples.html","id":"outlined-borderless","dir":"Articles","previous_headings":"Table Styling","what":"Outlined + borderless","title":"Examples","text":"","code":"reactable(iris[1:5, ], outlined = TRUE, borderless = TRUE)"},{"path":"/reactable/articles/examples.html","id":"compact","dir":"Articles","previous_headings":"Table Styling","what":"Compact","title":"Examples","text":"","code":"reactable(iris[1:5, ], compact = TRUE)"},{"path":"/reactable/articles/examples.html","id":"no-text-wrapping","dir":"Articles","previous_headings":"Table Styling","what":"No text wrapping","title":"Examples","text":"Long text wrapped default, can force text fit single line setting wrap FALSE:","code":"data <- aggregate(. ~ Species, iris, toString)  reactable(   data,   wrap = FALSE,   resizable = TRUE,   bordered = TRUE,   columns = list(Petal.Length = colDef(name = \"Petal Length (cm)\", minWidth = 50)) )"},{"path":"/reactable/articles/examples.html","id":"fixed-height-sticky-headerfooter","dir":"Articles","previous_headings":"Table Styling","what":"Fixed height + sticky header/footer","title":"Examples","text":"can make tables scrollable setting fixed height width. Headers footers sticky default, stay place scrolling. Scrollable tables automatically made focusable navigating using keyboard ensure ’re always accessible keyboard users.","code":"reactable(   iris[1:20, ],   height = 270,   striped = TRUE,   defaultColDef = colDef(     footer = function(values, name) {       htmltools::div(name, style = list(fontWeight = 600))     }   ) )"},{"path":"/reactable/articles/examples.html","id":"column-widths","dir":"Articles","previous_headings":"Table Styling","what":"Column widths","title":"Examples","text":"default, columns minimum width 100px stretch fill table. can control width column using following arguments colDef(): minWidth - minimum width column pixels (defaults 100) maxWidth - maximum width column pixels width - fixed width column pixels (overrides minWidth maxWidth) columns stretch, minWidth also controls ratio columns grow. example, table consists 3 columns minWidth = 100 , columns stretch ratio 100:100:100. column take 1/3 table’s width shrink 100px. Another example: table consists three columns minimum widths 200px, 100px, 100px, columns take 50%, 25%, 25% table’s width respectively:","code":"reactable(   MASS::Cars93[1:6, c(\"Make\", \"Type\", \"Weight\")],   columns = list(     Make = colDef(minWidth = 200),   # 50% width, 200px minimum     Type = colDef(minWidth = 100),   # 25% width, 100px minimum     Weight = colDef(minWidth = 100)  # 25% width, 100px minimum   ),   bordered = TRUE )"},{"path":"/reactable/articles/examples.html","id":"no-full-width","dir":"Articles","previous_headings":"Table Styling","what":"No full width","title":"Examples","text":"Tables full width default, can shrink table fit contents setting fullWidth FALSE: can also set maximum fixed width table:","code":"reactable(   MASS::Cars93[1:5, 1:5],   fullWidth = FALSE,   bordered = TRUE,   defaultColDef = colDef(minWidth = 120) ) reactable(   MASS::Cars93[1:5, 1:5],   bordered = TRUE,   defaultColDef = colDef(minWidth = 120),   # Set a maximum width on the table:   style = list(maxWidth = 650),   # Or a fixed width:   width = 650 )"},{"path":"/reactable/articles/examples.html","id":"vertical-alignment","dir":"Articles","previous_headings":"Table Styling","what":"Vertical alignment","title":"Examples","text":"can change vertical alignment cell content using vAlign headerVAlign arguments colDef() colGroup(). vAlign controls alignment data cells, headerVAlign controls alignment header cells. Possible options \"top\" (default), \"center\", \"bottom\".","code":"library(dplyr) library(htmltools)  data <- starwars[1:6, ] %>%   select(character = name, height, mass, gender, homeworld, species)  reactable(   data,   columns = list(     character = colDef(       name = \"Character / Species\",       # Show species under character names       cell = function(value, index) {         species <- data$species[index]         species <- if (!is.na(species)) species else \"Unknown\"         div(           div(style = list(fontWeight = 600), value),           div(style = list(fontSize = \"0.75rem\"), species)         )       }     ),     species = colDef(show = FALSE)   ),   # Vertically center cells and bottom-align headers   defaultColDef = colDef(vAlign = \"center\", headerVAlign = \"bottom\"),   bordered = TRUE )"},{"path":"/reactable/articles/examples.html","id":"custom-css","dir":"Articles","previous_headings":"Table Styling","what":"Custom CSS","title":"Examples","text":"control styling, can add custom class names table apply CSS: R Markdown documents, can embed CSS using css language chunk: examples embed CSS demonstration, ’s sometimes better add CSS external style sheet. learn adding custom CSS external style sheet: Using custom CSS R Markdown documents Using custom CSS Shiny apps Note: inspect table’s HTML, might find CSS classes like .rt-table different elements table. CSS classes undocumented subject change, recommend adding custom class names, using themes customize parts table aren’t covered custom class names.","code":"reactable(   iris[1:18, ],   defaultPageSize = 6,   borderless = TRUE,   class = \"my-tbl\",   defaultColDef = colDef(headerClass = \"my-header\"),   columns = list(     Sepal.Width = colDef(class = \"my-col\"),     Petal.Width = colDef(class = \"my-col\")   ),   rowClass = \"my-row\" ) ```{css, echo=FALSE} .my-tbl {   border: 1px solid rgba(0, 0, 0, 0.1); }  .my-header {   border-width: 1px; }  .my-col {   border-right: 1px solid rgba(0, 0, 0, 0.05); }  .my-row:hover {   background-color: #f5f8ff; } ```"},{"path":"/reactable/articles/examples.html","id":"theming","dir":"Articles","previous_headings":"","what":"Theming","title":"Examples","text":"Themes provide powerful way customize table styling can reused across tables. can either set theme variables change default styles (e.g., row stripe color), add custom CSS specific elements table. apply theme, provide reactableTheme() theme:","code":"reactable(   iris[1:30, ],   searchable = TRUE,   striped = TRUE,   highlight = TRUE,   bordered = TRUE,   theme = reactableTheme(     borderColor = \"#dfe2e5\",     stripedColor = \"#f6f8fa\",     highlightColor = \"#f0f5f9\",     cellPadding = \"8px 12px\",     style = list(fontFamily = \"-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif\"),     searchInputStyle = list(width = \"100%\")   ) )"},{"path":"/reactable/articles/examples.html","id":"global-theme","dir":"Articles","previous_headings":"Theming","what":"Global theme","title":"Examples","text":"set default theme tables, use global reactable.theme option:","code":"options(reactable.theme = reactableTheme(   color = \"hsl(233, 9%, 87%)\",   backgroundColor = \"hsl(233, 9%, 19%)\",   borderColor = \"hsl(233, 9%, 22%)\",   stripedColor = \"hsl(233, 12%, 22%)\",   highlightColor = \"hsl(233, 12%, 24%)\",   inputStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),   selectStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),   pageButtonHoverStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),   pageButtonActiveStyle = list(backgroundColor = \"hsl(233, 9%, 28%)\") ))  reactable(   iris[1:30, ],   filterable = TRUE,   showPageSizeOptions = TRUE,   striped = TRUE,   highlight = TRUE,   details = function(index) paste(\"Details for row\", index) )"},{"path":"/reactable/articles/examples.html","id":"nested-selectors","dir":"Articles","previous_headings":"Theming","what":"Nested selectors","title":"Examples","text":"can use nested CSS selectors theme styles target current element, using & selector, child elements (just like Sass). useful adding pseudo-classes like &:hover, adding styles certain context like .outer-container &. example, highlight headers sorting: apply dark theme parent element certain class, like .dark:","code":"reactable(   iris[1:5, ],   columns = list(Sepal.Length = colDef(sortable = FALSE)),   showSortable = TRUE,   theme = reactableTheme(     headerStyle = list(       \"&:hover[aria-sort]\" = list(background = \"hsl(0, 0%, 96%)\"),       \"&[aria-sort='ascending'], &[aria-sort='descending']\" = list(background = \"hsl(0, 0%, 96%)\"),       borderColor = \"#555\"     )   ) ) theme <- reactableTheme(   style = list(\".dark &\" = list(color = \"#fff\", background = \"#282a36\")),   cellStyle = list(\".dark &\" = list(borderColor = \"rgba(255, 255, 255, 0.15)\")),   headerStyle = list(\".dark &\" = list(borderColor = \"rgba(255, 255, 255, 0.15)\")),   paginationStyle = list(\".dark &\" = list(borderColor = \"rgba(255, 255, 255, 0.15)\")),   rowHighlightStyle = list(\".dark &\" = list(background = \"rgba(255, 255, 255, 0.04)\")),   pageButtonHoverStyle = list(\".dark &\" = list(background = \"rgba(255, 255, 255, 0.08)\")),   pageButtonActiveStyle = list(\".dark &\" = list(background = \"rgba(255, 255, 255, 0.1)\")) )  tbl <- reactable(iris[1:12, ], highlight = TRUE, defaultPageSize = 6, theme = theme)  # Simple theme toggle button tags$button(onclick = \"document.querySelector('.themeable-tbl').classList.toggle('dark')\",             \"Toggle light/dark\")  # Start with the dark theme enabled div(class = \"themeable-tbl dark\", tbl)"},{"path":"/reactable/articles/examples.html","id":"dynamic-theming","dir":"Articles","previous_headings":"Theming","what":"Dynamic theming","title":"Examples","text":"Themes can also functions return reactableTheme() context-specific styling. example, style tables RStudio R Notebooks dark editor theme active:","code":"options(reactable.theme = function() {   theme <- reactableTheme(     color = \"hsl(233, 9%, 85%)\",     backgroundColor = \"hsl(233, 9%, 19%)\",     borderColor = \"hsl(233, 9%, 22%)\",     stripedColor = \"hsl(233, 12%, 22%)\",     highlightColor = \"hsl(233, 12%, 24%)\",     inputStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),     selectStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),     pageButtonHoverStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),     pageButtonActiveStyle = list(backgroundColor = \"hsl(233, 9%, 28%)\")   )    if (isTRUE(getOption(\"rstudio.notebook.executing\"))) {     if (requireNamespace(\"rstudioapi\", quietly = TRUE) && rstudioapi::getThemeInfo()$dark) {       return(theme)     }   } })"},{"path":"/reactable/articles/examples.html","id":"column-groups","dir":"Articles","previous_headings":"","what":"Column Groups","title":"Examples","text":"can create column groups passing list colGroup() definitions columnGroups:","code":"reactable(   iris[1:5, ],   columns = list(     Sepal.Length = colDef(name = \"Length\"),     Sepal.Width = colDef(name = \"Width\"),     Petal.Length = colDef(name = \"Length\"),     Petal.Width = colDef(name = \"Width\")   ),   columnGroups = list(     colGroup(name = \"Sepal\", columns = c(\"Sepal.Length\", \"Sepal.Width\")),     colGroup(name = \"Petal\", columns = c(\"Petal.Length\", \"Petal.Width\"))   ) )"},{"path":"/reactable/articles/examples.html","id":"column-resizing","dir":"Articles","previous_headings":"","what":"Column Resizing","title":"Examples","text":"can make columns resizable setting resizable TRUE:","code":"reactable(MASS::Cars93[1:5, ], resizable = TRUE, wrap = FALSE, bordered = TRUE)"},{"path":"/reactable/articles/examples.html","id":"sticky-columns","dir":"Articles","previous_headings":"","what":"Sticky Columns","title":"Examples","text":"can make columns sticky scrolling horizontally using sticky argument colDef() colGroup(). Set sticky either \"left\" \"right\" make column stick left right side.","code":"reactable(   MASS::Cars93[1:5, ],   columns = list(     Manufacturer = colDef(       sticky = \"left\",       # Add a right border style to visually distinguish the sticky column       style = list(borderRight = \"1px solid #eee\"),       headerStyle = list(borderRight = \"1px solid #eee\")     ),     Make = colDef(       sticky = \"right\",       # Add a left border style to visually distinguish the sticky column       style = list(borderLeft = \"1px solid #eee\"),       headerStyle = list(borderLeft = \"1px solid #eee\")     )   ),   defaultColDef = colDef(minWidth = 150) )"},{"path":"/reactable/articles/examples.html","id":"multiple-sticky-columns","dir":"Articles","previous_headings":"Sticky Columns","what":"Multiple sticky columns","title":"Examples","text":"","code":"# Background style to visually distinguish sticky columns sticky_style <- list(backgroundColor = \"#f7f7f7\")  reactable(   MASS::Cars93[1:5, ],   columns = list(     Manufacturer = colDef(       sticky = \"left\",       style = sticky_style,       headerStyle = sticky_style     ),     Model = colDef(       sticky = \"left\",       style = sticky_style,       headerStyle = sticky_style     ),     Type = colDef(       sticky = \"left\",       style = sticky_style,       headerStyle = sticky_style     )   ),   resizable = TRUE,   wrap = FALSE,   bordered = TRUE )"},{"path":"/reactable/articles/examples.html","id":"sticky-column-groups","dir":"Articles","previous_headings":"Sticky Columns","what":"Sticky column groups","title":"Examples","text":"column group sticky, columns group automatically made sticky.","code":"reactable(   MASS::Cars93[1:5, ],   columnGroups = list(     colGroup(\"Make\", columns = c(\"Manufacturer\", \"Model\"), sticky = \"left\"),     colGroup(\"Price\", columns = c(\"Min.Price\", \"Price\", \"Max.Price\"), sticky = \"left\")   ),   defaultColDef = colDef(footer = \"Footer\"),   resizable = TRUE,   wrap = FALSE,   bordered = TRUE )"},{"path":[]},{"path":"/reactable/articles/examples.html","id":"row-names","dir":"Articles","previous_headings":"Row Names and Row Headers","what":"Row names","title":"Examples","text":"Row names shown default present. can customize row names column using \".rownames\" column name: row names haven’t set explicitly, can force show setting rownames TRUE:","code":"reactable(   USPersonalExpenditure,   columns = list(     .rownames = colDef(name = \"Category\", sortable = TRUE)   ) ) reactable(iris[1:5, ], rownames = TRUE)"},{"path":"/reactable/articles/examples.html","id":"row-headers","dir":"Articles","previous_headings":"Row Names and Row Headers","what":"Row headers","title":"Examples","text":"can mark cells column row headers setting rowHeader TRUE colDef(). Use help users navigate table using assistive technologies. cells marked row headers, assistive technologies read aloud navigating cells table. Cells row names column automatically marked row headers.","code":"data <- MASS::Cars93[1:5, c(\"Make\", \"Type\", \"Price\", \"MPG.city\", \"AirBags\")]  reactable(   data,   columns = list(     Make = colDef(rowHeader = TRUE, style = list(fontWeight = 600))   ),   bordered = TRUE )"},{"path":"/reactable/articles/examples.html","id":"cell-click-actions","dir":"Articles","previous_headings":"","what":"Cell Click Actions","title":"Examples","text":"can add cell click actions using onClick argument, accepts following values: \"expand\" expand row \"select\" select row JavaScript function custom action, e.g., sending click event Shiny","code":""},{"path":"/reactable/articles/examples.html","id":"expand-on-click","dir":"Articles","previous_headings":"Cell Click Actions","what":"Expand on click","title":"Examples","text":"","code":"reactable(   iris[48:52, ],   groupBy = \"Species\",   details = function(index) paste(\"Details for row:\", index),   onClick = \"expand\",   # Give rows a pointer cursor to indicate that they're clickable   rowStyle = list(cursor = \"pointer\") )"},{"path":"/reactable/articles/examples.html","id":"select-on-click","dir":"Articles","previous_headings":"Cell Click Actions","what":"Select on click","title":"Examples","text":"","code":"reactable(iris[1:5, ], selection = \"multiple\", onClick = \"select\")"},{"path":"/reactable/articles/examples.html","id":"custom-action","dir":"Articles","previous_headings":"Cell Click Actions","what":"Custom action","title":"Examples","text":"example requires reactable v0.3.0 . example uses custom click action create custom “show details” action buttons row table: Warning: Custom click actions currently accessible keyboard users, generally recommended. must used, ensure can triggered keyboard means, button example .","code":"data <- cbind(   MASS::Cars93[1:5, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")],   details = NA )  reactable(   data,   columns = list(     # Render a \"show details\" button in the last column of the table.     # This button won't do anything by itself, but will trigger the custom     # click action on the column.     details = colDef(       name = \"\",       sortable = FALSE,       cell = function() htmltools::tags$button(\"Show details\")     )   ),   onClick = JS(\"function(rowInfo, column) {     // Only handle click events on the 'details' column     if (column.id !== 'details') {       return     }      // Display an alert dialog with details for the row     window.alert('Details for row ' + rowInfo.index + ':\\\\n' + JSON.stringify(rowInfo.values, null, 2))      // Send the click event to Shiny, which will be available in input$show_details     // Note that the row index starts at 0 in JavaScript, so we add 1     if (window.Shiny) {       Shiny.setInputValue('show_details', { index: rowInfo.index + 1 }, { priority: 'event' })     }   }\") )"},{"path":"/reactable/articles/examples.html","id":"language-options","dir":"Articles","previous_headings":"","what":"Language Options","title":"Examples","text":"can customize language table providing set reactableLang() options language:","code":"reactable(   iris[1:30, ],   searchable = TRUE,   paginationType = \"simple\",   language = reactableLang(     searchPlaceholder = \"Search...\",     noData = \"No entries found\",     pageInfo = \"{rowStart} to {rowEnd} of {rows} entries\",     pagePrevious = \"\\u276e\",     pageNext = \"\\u276f\",      # Accessible labels for assistive technologies such as screen readers.     # These are already set by default, but don't forget to update them when     # changing visible text.     pagePreviousLabel = \"Previous page\",     pageNextLabel = \"Next page\"   ) )"},{"path":"/reactable/articles/examples.html","id":"global-language-options","dir":"Articles","previous_headings":"Language Options","what":"Global language options","title":"Examples","text":"set default language strings tables, use global reactable.language option:","code":"options(reactable.language = reactableLang(   pageSizeOptions = \"\\u663e\\u793a {rows}\",   pageInfo = \"{rowStart} \\u81f3 {rowEnd} \\u9879\\u7ed3\\u679c,\\u5171 {rows} \\u9879\",   pagePrevious = \"\\u4e0a\\u9875\",   pageNext = \"\\u4e0b\\u9875\" ))  reactable(iris[1:12, ], defaultPageSize = 4, showPageSizeOptions = TRUE)"},{"path":"/reactable/articles/examples.html","id":"shiny","dir":"Articles","previous_headings":"","what":"Shiny","title":"Examples","text":"use reactable Shiny apps, use renderReactable() reactableOutput():","code":"library(shiny) library(reactable)  ui <- fluidPage(   titlePanel(\"reactable example\"),   reactableOutput(\"table\") )  server <- function(input, output, session) {   output$table <- renderReactable({     reactable(iris)   }) }  shinyApp(ui, server)"},{"path":"/reactable/articles/examples.html","id":"row-selection","dir":"Articles","previous_headings":"Shiny","what":"Row selection","title":"Examples","text":"can enable row selection setting selection \"single\" single selection, \"multiple\" multiple selection. get selected rows Shiny, use getReactableState(). selected rows given vector row indices (e.g. c(1, 6, 4)) NULL rows selected.","code":"library(shiny) library(reactable)  ui <- fluidPage(   titlePanel(\"row selection example\"),   reactableOutput(\"table\"),   verbatimTextOutput(\"selected\") )  server <- function(input, output, session) {   selected <- reactive(getReactableState(\"table\", \"selected\"))    output$table <- renderReactable({     reactable(iris, selection = \"multiple\", onClick = \"select\")   })    output$selected <- renderPrint({     print(selected())   })    observe({     print(iris[selected(), ])   }) }  shinyApp(ui, server)"},{"path":"/reactable/articles/examples.html","id":"default-selected-rows","dir":"Articles","previous_headings":"Shiny > Row selection","what":"Default selected rows","title":"Examples","text":"can preselect rows specifying vector row indices defaultSelected:","code":"reactable(iris[1:4, ], selection = \"multiple\", defaultSelected = c(1, 3))"},{"path":"/reactable/articles/examples.html","id":"style-selected-rows","dir":"Articles","previous_headings":"Shiny > Row selection","what":"Style selected rows","title":"Examples","text":"can style selected rows using rowSelectedStyle reactableTheme(): using rowStyle rowClass JavaScript function:","code":"reactable(   iris[1:4, ],   selection = \"multiple\",   defaultSelected = c(1, 3),   borderless = TRUE,   onClick = \"select\",   theme = reactableTheme(     rowSelectedStyle = list(backgroundColor = \"#eee\", boxShadow = \"inset 2px 0 0 0 #ffa62d\")   ) ) reactable(   MASS::Cars93[10:22, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\", \"MPG.city\")],   groupBy = \"Manufacturer\",   selection = \"multiple\",   defaultSelected = c(1, 2),   borderless = TRUE,   onClick = \"select\",   rowStyle = JS(\"function(rowInfo) {     if (rowInfo && rowInfo.selected) {       return { backgroundColor: '#eee', boxShadow: 'inset 2px 0 0 0 #ffa62d' }     }   }\") )"},{"path":"/reactable/articles/examples.html","id":"customize-the-selection-column","dir":"Articles","previous_headings":"Shiny > Row selection","what":"Customize the selection column","title":"Examples","text":"can customize selection column using \".selection\" column name:","code":"reactable(   MASS::Cars93[1:4, ],   columns = list(     .selection = colDef(       width = 80,       sticky = \"left\",       style = list(cursor = \"pointer\"),       headerStyle = list(cursor = \"pointer\")     )   ),   selection = \"multiple\",   onClick = \"select\",   resizable = TRUE,   wrap = FALSE,   bordered = TRUE )"},{"path":"/reactable/articles/examples.html","id":"update-a-reactable-instance","dir":"Articles","previous_headings":"Shiny","what":"Update a reactable instance","title":"Examples","text":"can update selected rows, expanded rows, current page, data using updateReactable():","code":"library(shiny) library(reactable)  data <- MASS::Cars93[, 1:7]  ui <- fluidPage(   actionButton(\"select_btn\", \"Select rows\"),   actionButton(\"clear_btn\", \"Clear selection\"),   actionButton(\"expand_btn\", \"Expand rows\"),   actionButton(\"collapse_btn\", \"Collapse rows\"),   actionButton(\"page_btn\", \"Change page\"),   selectInput(\"filter_type\", \"Filter type\", unique(data$Type), multiple = TRUE),   reactableOutput(\"table\") )  server <- function(input, output) {   output$table <- renderReactable({     reactable(       data,       filterable = TRUE,       searchable = TRUE,       selection = \"multiple\",       details = function(index) paste(\"Details for row:\", index)     )   })    observeEvent(input$select_btn, {     # Select rows     updateReactable(\"table\", selected = c(1, 3, 5))   })    observeEvent(input$clear_btn, {     # Clear row selection     updateReactable(\"table\", selected = NA)   })    observeEvent(input$expand_btn, {     # Expand all rows     updateReactable(\"table\", expanded = TRUE)   })    observeEvent(input$collapse_btn, {     # Collapse all rows     updateReactable(\"table\", expanded = FALSE)   })    observeEvent(input$page_btn, {     # Change current page     updateReactable(\"table\", page = 3)   })    observe({     # Filter data     filtered <- if (length(input$filter_type) > 0) {       data[data$Type %in% input$filter_type, ]     } else {       data     }     updateReactable(\"table\", data = filtered)   }) }  shinyApp(ui, server)"},{"path":"/reactable/articles/examples.html","id":"get-the-state-of-a-reactable-instance","dir":"Articles","previous_headings":"Shiny","what":"Get the state of a reactable instance","title":"Examples","text":"can get current state table using getReactableState(). default, getReactableState() returns named list following values: page: current page pageSize: page size pages: number pages sorted: sorted columns - named list columns values \"asc\" ascending order \"desc\" descending order, NULL columns sorted selected: selected rows - numeric vector row indices, NULL rows selected watch changes specific value, can use optional name argument, like getReactableState(outputId, \"selected\").","code":"library(shiny) library(reactable) library(htmltools)  ui <- fluidPage(   actionButton(\"prev_page_btn\", \"Previous page\"),   actionButton(\"next_page_btn\", \"Next page\"),   reactableOutput(\"table\"),   verbatimTextOutput(\"table_state\"),   uiOutput(\"selected_row_details\") )  server <- function(input, output) {   output$table <- renderReactable({     reactable(       MASS::Cars93[, 1:5],       showPageSizeOptions = TRUE,       selection = \"multiple\",       onClick = \"select\"     )   })    output$table_state <- renderPrint({     state <- req(getReactableState(\"table\"))     print(state)   })    observeEvent(input$prev_page_btn, {     # Change to the previous page     page <- getReactableState(\"table\", \"page\")     if (page > 1) {       updateReactable(\"table\", page = page - 1)     }   })    observeEvent(input$next_page_btn, {     # Change to the next page     state <- getReactableState(\"table\")     if (state$page < state$pages) {       updateReactable(\"table\", page = state$page + 1)     }   })      output$selected_row_details <- renderUI({     selected <- getReactableState(\"table\", \"selected\")     req(selected)     details <- MASS::Cars93[selected, -c(1:5)]     tagList(       h2(\"Selected row details\"),       tags$pre(         paste(capture.output(print(details, width = 1200)), collapse = \"\\n\")       )     )   }) }  shinyApp(ui, server)"},{"path":"/reactable/articles/examples.html","id":"cross-widget-interactions","dir":"Articles","previous_headings":"","what":"Cross-Widget Interactions","title":"Examples","text":"can link selection filtering HTML widgets R Markdown document Shiny app using Crosstalk. get started, install crosstalk package wrap data frame crosstalk::SharedData object: , pass shared data reactable() Crosstalk-compatible HTML widget filter input: examples list Crosstalk-compatible widgets, check Using Crosstalk Crosstalk package documentation.","code":"install.packages(\"crosstalk\")  library(crosstalk)  data <- SharedData$new(iris) reactable(data)  filter_slider(\"sepal_length\", \"Sepal Length\", data, ~Sepal.Length)"},{"path":"/reactable/articles/examples.html","id":"filtering-1","dir":"Articles","previous_headings":"Cross-Widget Interactions","what":"Filtering","title":"Examples","text":"Tables can filtered widgets support Crosstalk’s filtering API, Crosstalk’s filter_checkbox(), filter_slider(), filter_select() inputs: Note: example uses shiny::fluidRow() shiny::column() create Bootstrap grid layout, works Bootstrap versions. crosstalk::bscols() can also create grid, compatible Bootstrap 3. ’re using Bootstrap, ’s alternative way create responsive grid using CSS grid.","code":"library(crosstalk)  cars <- MASS::Cars93[1:20, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")] data <- SharedData$new(cars)  shiny::fluidRow(   shiny::column(     4,     filter_checkbox(\"type\", \"Type\", data, ~Type),     filter_slider(\"price\", \"Price\", data, ~Price, width = \"100%\"),     filter_select(\"mfr\", \"Manufacturer\", data, ~Manufacturer)   ),   shiny::column(     8,     reactable(data, minRows = 10)   ) ) library(crosstalk)  cars <- MASS::Cars93[1:20, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")] data <- SharedData$new(cars)  div(   style = \"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 0.75rem;\",   div(     filter_checkbox(\"type\", \"Type\", data, ~Type),     filter_slider(\"price\", \"Price\", data, ~Price, width = \"100%\"),     filter_select(\"mfr\", \"Manufacturer\", data, ~Manufacturer)   ),   div(     style = \"grid-column: span 2;\",     reactable(data, minRows = 10)   ) )"},{"path":"/reactable/articles/examples.html","id":"linked-selection","dir":"Articles","previous_headings":"Cross-Widget Interactions","what":"Linked selection","title":"Examples","text":"Table selection state can linked widgets support Crosstalk’s linked selection (linked brushing) API. example, can select rows highlight points map, select areas map highlight rows table.","code":"library(crosstalk) library(leaflet) library(dplyr)  # A SpatialPointsDataFrame for the map. # Set a group name to share data points with the table. brew_sp <- SharedData$new(breweries91, group = \"breweries\")  # A regular data frame (without coordinates) for the table. # Use the same group name as the map data. brew_data <- as_tibble(breweries91) %>%   select(brewery, address, village, founded) %>%   SharedData$new(group = \"breweries\")  map <- leaflet(brew_sp) %>%   addTiles() %>%   addMarkers()  tbl <- reactable(   brew_data,   selection = \"multiple\",   onClick = \"select\",   rowStyle = list(cursor = \"pointer\"),   minRows = 10 )  htmltools::browsable(   htmltools::tagList(map, tbl) )"},{"path":"/reactable/articles/examples.html","id":"javascript-api","dir":"Articles","previous_headings":"","what":"JavaScript API","title":"Examples","text":"can use JavaScript API create custom interactive controls table without use Shiny, add cross-widget interactions beyond Crosstalk provides. See JavaScript API guide details use JavaScript API R Markdown documents Shiny apps, full API reference.","code":""},{"path":"/reactable/articles/examples.html","id":"csv-download-button","dir":"Articles","previous_headings":"JavaScript API","what":"CSV download button","title":"Examples","text":"Reactable.downloadDataCSV() downloads table data CSV file, including filters applied. See JavaScript API guide details usage, including customize field separator, decimal separator, included columns, .","code":"library(htmltools) library(fontawesome)  data <- MASS::Cars93[1:15, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  htmltools::browsable(   tagList(     tags$button(       tagList(fontawesome::fa(\"download\"), \"Download as CSV\"),       onclick = \"Reactable.downloadDataCSV('cars-download-table', 'cars.csv')\"     ),      reactable(       data,       searchable = TRUE,       defaultPageSize = 5,       elementId = \"cars-download-table\"     )   ) )"},{"path":"/reactable/articles/examples.html","id":"csv-download-button-in-shiny","dir":"Articles","previous_headings":"JavaScript API","what":"CSV download button in Shiny","title":"Examples","text":"can create download buttons Shiny using shiny::downloadButton(), may still prefer use JavaScript API, Reactable.downloadDataCSV() automatically applies client-side filtering done table.","code":"library(shiny) library(reactable) library(htmltools)  csvDownloadButton <- function(id, filename = \"data.csv\", label = \"Download as CSV\") {   tags$button(     tagList(icon(\"download\"), label),     onclick = sprintf(\"Reactable.downloadDataCSV('%s', '%s')\", id, filename)   ) }  ui <- fluidPage(   csvDownloadButton(\"cars_table\", filename = \"cars.csv\"),   reactableOutput(\"cars_table\") )  server <- function(input, output) {   output$cars_table <- renderReactable({     reactable(       MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")],       searchable = TRUE     )   }) }  shinyApp(ui, server)"},{"path":"/reactable/articles/examples.html","id":"custom-column-filter","dir":"Articles","previous_headings":"JavaScript API","what":"Custom column filter","title":"Examples","text":"","code":"library(htmltools)  data <- MASS::Cars93[1:15, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  htmltools::browsable(   tagList(     div(       div(tags$label(\"Filter Type\", `for` = \"cars-type-filter\")),       tags$select(         id = \"cars-type-filter\",         onchange = \"Reactable.setFilter('cars-filter-table', 'Type', this.value)\",         tags$option(\"All\", value = \"\"),         lapply(unique(data$Type), tags$option)       )     ),          tags$hr(\"aria-hidden\" = \"true\"),      reactable(data, defaultPageSize = 5, elementId = \"cars-filter-table\")   ) )"},{"path":"/reactable/articles/examples.html","id":"custom-search-input","dir":"Articles","previous_headings":"JavaScript API","what":"Custom search input","title":"Examples","text":"","code":"library(htmltools)  data <- MASS::Cars93[1:15, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  htmltools::browsable(   tagList(     div(       style = \"margin-bottom: 0.75rem\",       tags$input(         type = \"text\",         placeholder = \"Search for cars...\",         style = \"padding: 0.25rem 0.5rem; width: 100%\",         oninput = \"Reactable.setSearch('cars-search-table', this.value)\"       )     ),      reactable(data, defaultPageSize = 5, elementId = \"cars-search-table\")   ) )"},{"path":"/reactable/articles/examples.html","id":"column-grouping-select","dir":"Articles","previous_headings":"JavaScript API","what":"Column grouping select","title":"Examples","text":"","code":"library(dplyr) library(htmltools)  set.seed(10)  data <- sample_n(tail(MASS::Cars93, 9), 30, replace = TRUE) %>%   select(Manufacturer, Model, Type, Sales = Price)  htmltools::browsable(   tagList(     div(tags$label(\"Group by\", `for` = \"cars-grouping-select\")),     tags$select(       id = \"cars-grouping-select\",       onchange = \"Reactable.setGroupBy('cars-grouping-table', this.value ? [this.value] : [])\",       tags$option(\"None\", value = \"\"),       lapply(c(\"Manufacturer\", \"Model\", \"Type\"), tags$option)     ),      tags$hr(\"aria-hidden\" = \"true\"),      reactable(       data,       columns = list(         Manufacturer = colDef(aggregate = \"unique\"),         Model = colDef(aggregate = \"unique\"),         Type = colDef(aggregate = \"unique\"),         Sales = colDef(aggregate = \"sum\", format = colFormat(currency = \"USD\"))       ),       defaultPageSize = 5,       minRows = 5,       elementId = \"cars-grouping-table\"     )   ) )"},{"path":"/reactable/articles/examples.html","id":"row-expansion-toggle-button","dir":"Articles","previous_headings":"JavaScript API","what":"Row expansion toggle button","title":"Examples","text":"","code":"library(htmltools)  data <- MASS::Cars93[1:5, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  htmltools::browsable(   tagList(     tags$button(       \"Expand/collapse all\",       onclick = \"Reactable.toggleAllRowsExpanded('cars-expansion-table')\"     ),      reactable(       data,       groupBy = \"Manufacturer\",       defaultPageSize = 5,       elementId = \"cars-expansion-table\"     )   ) )"},{"path":"/reactable/articles/examples.html","id":"column-visibility-toggle-button","dir":"Articles","previous_headings":"JavaScript API","what":"Column visibility toggle button","title":"Examples","text":"New v0.4.0","code":"library(htmltools)  data <- MASS::Cars93[1:5, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\",                             \"Passengers\", \"DriveTrain\", \"Cylinders\", \"EngineSize\")]  htmltools::browsable(   tagList(     tags$button(       \"Show/hide more columns\",       onclick = \"Reactable.setHiddenColumns('cars-vis-table', prevColumns => {         return prevColumns.length === 0 ? ['Passengers', 'DriveTrain', 'Cylinders', 'EngineSize'] : []       })\"     ),     reactable(       data,       columns = list(         Passengers = colDef(show = FALSE),         DriveTrain = colDef(show = FALSE),         Cylinders = colDef(show = FALSE),         EngineSize = colDef(show = FALSE)       ),       elementId = \"cars-vis-table\"     )   ) )"},{"path":"/reactable/articles/javascript-api.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"JavaScript API","text":"JavaScript API lets manipulate access tables JavaScript. can use create custom interactive controls table without use Shiny, add cross-widget interactions beyond Crosstalk provides. Common use cases JavaScript API include: Export buttons download table data CSV file Custom filter inputs located outside table Toggle buttons row grouping row expansion","code":""},{"path":"/reactable/articles/javascript-api.html","id":"example-csv-download-button","dir":"Articles","previous_headings":"Introduction","what":"Example: CSV download button","title":"JavaScript API","text":"","code":"library(htmltools)  htmltools::browsable(   tagList(     tags$button(\"Download as CSV\", onclick = \"Reactable.downloadDataCSV('cars-table')\"),      reactable(       MASS::Cars93[, 1:5],       defaultPageSize = 5,       elementId = \"cars-table\"     )   ) )"},{"path":"/reactable/articles/javascript-api.html","id":"using-the-javascript-api","dir":"Articles","previous_headings":"","what":"Using the JavaScript API","title":"JavaScript API","text":"use JavaScript API, table must first unique ID distinguishes tables: tables static documents (e.g., R Markdown), add ID elementId argument reactable(): tables Shiny apps, ID Shiny output ID specified reactableOutput(). example, table app uses cars_table ID: table ID, can use Reactable JavaScript functions table ID. example, download data cars-table table CSV file, JavaScript code look like : try interactively, can open browser’s developer tools run function JavaScript console.","code":"reactable(MASS::Cars93, elementId = \"cars-table\") library(shiny)  ui <- fluidPage(   reactableOutput(\"cars_table\") )  server <- function(input, output) {   output$cars_table <- renderReactable({     reactable(MASS::Cars93)   }) }  shinyApp(ui, server) // Download the \"cars-table\" data to a CSV file named 'cars.csv' Reactable.downloadDataCSV('cars-table', 'cars.csv')"},{"path":"/reactable/articles/javascript-api.html","id":"creating-custom-interactive-controls","dir":"Articles","previous_headings":"Using the JavaScript API","what":"Creating custom interactive controls","title":"JavaScript API","text":"users likely want use JavaScript API interactive control, button, decide download table data. Using HTML, can create <button> element onclick action calls Reactable JavaScript function. example uses htmltools package render CSV download button. can copy code R console view output: Note: htmltools::browsable() convenient way view rendered HTML copying code console. isn’t required render HTML R Markdown documents Shiny apps. reuse button tables, can also convert function generates download buttons: examples custom controls use JavaScript API, check JavaScript API examples.","code":"library(htmltools)  htmltools::browsable(   tagList(     tags$button(\"Download as CSV\", onclick = \"Reactable.downloadDataCSV('cars-table', 'cars.csv')\"),      reactable(MASS::Cars93[, 1:5], elementId = \"cars-table\")   ) ) library(htmltools)  csvDownloadButton <- function(tableId, label = \"Download as CSV\", filename = \"data.csv\") {   htmltools::tags$button(     label,     onclick = sprintf(\"Reactable.downloadDataCSV('%s', '%s')\", tableId, filename)   ) }  htmltools::browsable(   tagList(     csvDownloadButton(\"cars-table\", \"Download as CSV\", filename = \"cars.csv\"),      reactable(MASS::Cars93[, 1:5], elementId = \"cars-table\")   ) )"},{"path":[]},{"path":"/reactable/articles/javascript-api.html","id":"reactable-downloaddatacsv","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.downloadDataCSV()","title":"JavaScript API","text":"Downloads table data CSV file. downloaded file named data.csv default, can customize using optional filename argument. downloaded data include filters applied, exclude sorting grouping. Hidden columns also included, may customizable future. customization, can use options argument include specific columns, exclude column headers, change field separator, change decimal separator (new v0.4.0).","code":"Reactable.downloadDataCSV(   tableId: string,   filename = \"data.csv\",   // New in v0.4.0   options?: {     columnIds: string[],     headers: true,     sep: ',',     dec: '.'   } )"},{"path":"/reactable/articles/javascript-api.html","id":"examples","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.downloadDataCSV()","what":"Examples","title":"JavaScript API","text":"","code":"// Download table data to a file named data.csv Reactable.downloadDataCSV('cars-table')  // Download table data to a file named cars93.csv Reactable.downloadDataCSV('cars-table', 'cars93.csv')  // Download table data to a tab-separated values file Reactable.downloadDataCSV('cars-table', 'cars93.tsv', { sep: '\\t' })  // Download table data with custom columns and headers excluded Reactable.downloadDataCSV('cars-table', 'cars93.csv', {   columnIds: ['Model', 'Type'],   headers: false })"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-getdatacsv","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.getDataCSV()","title":"JavaScript API","text":"New v0.4.0 Gets table data CSV string. Reactable.downloadDataCSV() download data.","code":"Reactable.getDataCSV(   tableId: string,   options?: {     columnIds: string[],     headers: true,     sep: ',',     dec: '.'   } )"},{"path":"/reactable/articles/javascript-api.html","id":"value","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.getDataCSV()","what":"Value","title":"JavaScript API","text":"string table data CSV format.","code":""},{"path":"/reactable/articles/javascript-api.html","id":"examples-1","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.getDataCSV()","what":"Examples","title":"JavaScript API","text":"","code":"// Get table data as a CSV string const csv = Reactable.getDataCSV('cars-table') console.log(csv)  // Get table data as a tab-separted values string const tsv = Reactable.getDataCSV('cars-table', { sep: '\\t' }) console.log(tsv)"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-setsearch","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.setSearch()","title":"JavaScript API","text":"Sets search value table. clear search, set value undefined.","code":"Reactable.setSearch(   tableId: string,   value: any )"},{"path":"/reactable/articles/javascript-api.html","id":"examples-2","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.setSearch()","what":"Examples","title":"JavaScript API","text":"","code":"// Set the search value to \"midsize\" Reactable.setSearch('cars-table', 'midsize')  // Clear the search value Reactable.setSearch('cars-table', undefined)"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-setfilter","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.setFilter()","title":"JavaScript API","text":"Sets filter value column. clear column filter, set value undefined.","code":"Reactable.setFilter(   tableId: string,   columnId: string,   value: any )"},{"path":"/reactable/articles/javascript-api.html","id":"examples-3","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.setFilter()","what":"Examples","title":"JavaScript API","text":"","code":"// Set the filter value of the \"Type\" column to \"midsize\" Reactable.setFilter('cars-table', 'Type', 'midsize')  // Clear the filter value of the \"Type\" column Reactable.setFilter('cars-table', 'Type', undefined)"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-setallfilters","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.setAllFilters()","title":"JavaScript API","text":"Sets column filter values table. clear column filters, set filters empty array, [].","code":"Reactable.setAllFilters(   tableId: string,   filters: Array<{ id: string, value: any }> )"},{"path":"/reactable/articles/javascript-api.html","id":"examples-4","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.setAllFilters()","what":"Examples","title":"JavaScript API","text":"","code":"// Set the column filters for the \"Type\" column Reactable.setAllFilters('cars-table', [{ id: 'Type', value: 'midsize' }])  // Set the column filters for the \"Type\" and \"Model\" columns Reactable.setAllFilters('cars-table', [   { id: 'Type', value: 'midsize' },   { id: 'Model', value: 'legend' } ])  // Clear all column filters Reactable.setAllFilters([])"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-togglegroupby","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.toggleGroupBy()","title":"JavaScript API","text":"Toggles groupBy state column grouped ungrouped. enable disable grouping explicitly, set optional isGrouped argument true false.","code":"Reactable.toggleGroupBy(   tableId: string,   columnId: string,   isGrouped?: boolean )"},{"path":"/reactable/articles/javascript-api.html","id":"examples-5","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.toggleGroupBy()","what":"Examples","title":"JavaScript API","text":"","code":"// Toggle groupBy state for the \"Type\" column Reactable.toggleGroupBy('cars-table', 'Type')  // Enable grouping for the \"Type\" column Reactable.toggleGroupBy('cars-table', 'Type', true)  // Disable grouping for the \"Type\" column Reactable.toggleGroupBy('cars-table', 'Type', false)"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-setgroupby","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.setGroupBy()","title":"JavaScript API","text":"Sets groupBy columns table. clear groupBy columns, set columnIds empty array, [].","code":"Reactable.setGroupBy(   tableId: string,   columnIds: string[] )"},{"path":"/reactable/articles/javascript-api.html","id":"examples-6","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.setGroupBy()","what":"Examples","title":"JavaScript API","text":"","code":"// Set the groupBy columns to \"Type\" and \"Manufacturer\" Reactable.setGroupBy('cars-table', ['Type', 'Manufacturer'])  // Clear the groupBy columns Reactable.setGroupBy('cars-table', [])"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-toggleallrowsexpanded","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.toggleAllRowsExpanded()","title":"JavaScript API","text":"Toggles expanded state rows table expanded collapsed. expand collapse rows explicitly, set optional isExpanded argument true false.","code":"Reactable.toggleAllRowsExpanded(   tableId: string,   isExpanded?: boolean )"},{"path":"/reactable/articles/javascript-api.html","id":"examples-7","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.toggleAllRowsExpanded()","what":"Examples","title":"JavaScript API","text":"","code":"// Toggle expanded state for all rows Reactable.toggleAllRowsExpanded('cars-table')  // Expand all rows Reactable.toggleAllRowsExpanded('cars-table', true)  // Collapse all rows Reactable.toggleAllRowsExpanded('cars-table', false)"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-setmeta","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.setMeta()","title":"JavaScript API","text":"New v0.4.0 Sets custom metadata table. meta can either object new values, function takes previous metadata object returns new values. New values merged current metadata, values specified meta updated. clear metadata, set meta undefined.","code":"Reactable.setMeta(   tableId: string,   meta?: object | Function )"},{"path":"/reactable/articles/javascript-api.html","id":"examples-8","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.setMeta()","what":"Examples","title":"JavaScript API","text":"","code":"// Set metadata, updating the values for the `count`, `enabled`, and `formatter` properties Reactable.setMeta('cars-table', { count: 123, enabled: true, formatter: value => '$' + value })  // Set metadata using a function that increments `count` and toggles an `enabled` boolean Reactable.setMeta('cars-table', prevMeta => {   return { count: prevMeta.count + 1, enabled: !prevMeta.enabled } })  // Clear metadata Reactable.setMeta('cars-table', undefined)"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-togglehidecolumn","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.toggleHideColumn()","title":"JavaScript API","text":"New v0.4.0 Toggles hidden state column hidden shown. hide show column explicitly, set optional isHidden argument true false.","code":"Reactable.toggleHideColumn(   tableId: string,   columnId: string,   isHidden?: boolean )"},{"path":"/reactable/articles/javascript-api.html","id":"examples-9","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.toggleHideColumn()","what":"Examples","title":"JavaScript API","text":"","code":"// Toggle hidden state for the \"Type\" column Reactable.toggleHideColumn('cars-table', 'Type')  // Hide the \"Type\" column Reactable.toggleHideColumn('cars-table', 'Type', true)  // Show the \"Type\" column Reactable.toggleHideColumn('cars-table', 'Type', false)"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-sethiddencolumns","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.setHiddenColumns()","title":"JavaScript API","text":"New v0.4.0 Sets hidden columns table. columnIds can either array column IDs, function takes previous hidden column IDs returns new column IDs. clear hidden columns, set columnIds empty array, [].","code":"Reactable.setHiddenColumns(   tableId: string,   columnIds: string[] | Function )"},{"path":"/reactable/articles/javascript-api.html","id":"examples-10","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.setHiddenColumns()","what":"Examples","title":"JavaScript API","text":"","code":"// Set the hidden columns to \"Type\" and \"Manufacturer\" Reactable.setHiddenColumns('cars-table', ['Type', 'Manufacturer'])  // Set hidden columns using a function that adds \"Type\" to the existing hidden columns Reactable.setMeta('cars-table', prevHiddenColumns => {   return prevHiddenColumns.concat('Type') })  // Clear the hidden columns Reactable.setHiddenColumns('cars-table', [])"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-setdata","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.setData()","title":"JavaScript API","text":"New v0.4.0 Updates table data. data can either row column format. row format, data array row objects. column format, data object containing arrays column values. data columns original table data. updating data, selected rows current page reset default. state persist, including sorting, filtering, grouping state.","code":"Reactable.setData(   tableId: string,   data: Array<object> | object )"},{"path":"/reactable/articles/javascript-api.html","id":"examples-11","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.setData()","what":"Examples","title":"JavaScript API","text":"","code":"// Update data in row format Reactable.setData('cars-table', [   { Model: 'Legend', Type: 'Midsize' },   { Model: 'Integra', Type: 'Small' } ])  // Update data in column format Reactable.setData('cars-table', {   Model: ['Legend', 'Integra'],   Type: ['Midsize', 'Small'] })"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-getstate","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.getState()","title":"JavaScript API","text":"Gets current state table.","code":"Reactable.getState(tableId: string)"},{"path":"/reactable/articles/javascript-api.html","id":"state-properties","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.getState()","what":"Value","title":"JavaScript API","text":"object following properties:","code":""},{"path":"/reactable/articles/javascript-api.html","id":"examples-12","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.getState()","what":"Examples","title":"JavaScript API","text":"","code":"Reactable.getState('cars-table') // { page: 2, searchValue: 'petal', ... }"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-onstatechange","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.onStateChange()","title":"JavaScript API","text":"New v0.4.0 Sets function called whenever table state changes. listenerFn function takes current table state, object properties described state properties. Reactable.onStateChange() can run table finished rendering, isn’t guaranteed happen page load time. ensure table ready running Reactable.onStateChange(), can either use htmlwidgets::onRender() static widgets Shiny outputs, htmlwidgets::onStaticRenderComplete() static widgets .","code":"Reactable.onStateChange(   tableId: string,   listenerFn: Function )"},{"path":"/reactable/articles/javascript-api.html","id":"value-1","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.onStateChange()","what":"Value","title":"JavaScript API","text":"Reactable.onStateChange returns function can called cancel listener function.","code":""},{"path":"/reactable/articles/javascript-api.html","id":"examples-13","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.onStateChange()","what":"Examples","title":"JavaScript API","text":"","code":"Reactable.onStateChange('cars-table', state => {   console.log('selected rows:', state.selected) })  // Cancel the listener function const cancel = Reactable.onStateChange('cars-table', listenerFn) cancel()"},{"path":"/reactable/articles/javascript-api.html","id":"static-widgets","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.onStateChange() > Examples","what":"Static widgets","title":"JavaScript API","text":"","code":"library(htmltools)  data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  browsable(   tagList(     \"Table state:\",     tags$pre(id = \"tbl-state\", \"{}\"),     reactable(       data,       searchable = TRUE,       selection = \"multiple\",       onClick = \"select\",       elementId = \"tbl\"     ),     htmlwidgets::onStaticRenderComplete(\"       Reactable.onStateChange('tbl', state => {         const { selected, sorted, searchValue, pageIndex } = state         document.getElementById('tbl-state').textContent = JSON.stringify({           selected,           sorted,           searchValue,           pageIndex         })       })     \")   ) )"},{"path":"/reactable/articles/javascript-api.html","id":"shiny-outputs","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.onStateChange() > Examples","what":"Shiny outputs","title":"JavaScript API","text":"","code":"library(shiny)  data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  ui <- fluidPage(   reactableOutput(\"tbl\"),   verbatimTextOutput(\"tbl_state\") )  server <- function(input, output) {   output$tbl <- renderReactable({     tbl <- reactable(data, searchable = TRUE)      htmlwidgets::onRender(tbl, \"() => {       Reactable.onStateChange('tbl', state => {         const { sorted, searchValue } = state         Shiny.setInputValue('tbl_state', { sorted, searchValue })       })     }\")   })    output$tbl_state <- renderPrint({     writeLines(\"Table state:\\n\")     print(input$tbl_state)   }) }  shinyApp(ui, server)"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-gotopage","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.gotoPage()","title":"JavaScript API","text":"New v0.4.4.9000 Changes current page. pageIndex can either number function takes previous pageIndex returns new value. pageIndex zero-based, first page pageIndex 0. pageIndex outside valid pageIndex range, Reactable.gotoPage() nothing.","code":"Reactable.gotoPage(   tableId: string,   pageIndex?: number | Function )"},{"path":"/reactable/articles/javascript-api.html","id":"examples-14","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.gotoPage()","what":"Examples","title":"JavaScript API","text":"","code":"// Go to page index 0 (the first page) Reactable.gotoPage('cars-table', 0)  // Go to page index 2 (the third page) Reactable.gotoPage('cars-table', 2)  // Go to the next page Reactable.gotoPage('cars-table', prevPage => prevPage + 1)  // Go to the previous page Reactable.gotoPage('cars-table', prevPage => prevPage - 1)"},{"path":"/reactable/articles/javascript-api.html","id":"reactable-setpagesize","dir":"Articles","previous_headings":"JavaScript API Reference","what":"Reactable.setPageSize()","title":"JavaScript API","text":"New v0.4.4.9000 Sets current page size.","code":"Reactable.gotoPage(   tableId: string,   pageSize?: number )"},{"path":"/reactable/articles/javascript-api.html","id":"examples-15","dir":"Articles","previous_headings":"JavaScript API Reference > Reactable.setPageSize()","what":"Examples","title":"JavaScript API","text":"","code":"// Set the page size to 10 Reactable.setPageSize('cars-table', 10)"},{"path":"/reactable/articles/static-rendering.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Static Rendering","text":"Static rendering optional feature allows render tables static HTML R. default, tables rendered completely user’s browser JavaScript, ’s actual HTML generated run reactable() R. means load page, tables blank first, appear short time later get rendered. extreme cases, can take noticeably long time tables appear, like heavy Examples without static rendering page. static rendering, tables pre-rendered initial HTML appear immediately without flash content. Tables made interactive subsequently rendered JavaScript needed. can try refreshing Examples static rendering page comparison. Advantages: Better user experience many cases, tables appear immediately don’t cause layout shift page load. Better support indexing table content search engines. Even crawlers support JavaScript like Googlebot may crawl budget limits crawling JavaScript-heavy pages. Non-interactive tables (without pagination, sorting, filtering) longer require JavaScript view, may useful JavaScript unavailable, like emails. Static rendering uses V8 JavaScript engine provided V8 package. V8 installed reactable default, must installed using static rendering. Note: Static rendering currently experimental, supported tables rendered via reactableOutput() Shiny. also limitations tradeoffs consider, static rendering may make sense every table.","code":""},{"path":"/reactable/articles/static-rendering.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Static Rendering","text":"use static rendering, ensure V8 package installed first. V8 installed reactable default. , use reactable(static = TRUE) render single table static HTML: use options(reactable.static = TRUE) enable static rendering tables:","code":"install.packages(\"V8\") data <- MASS::Cars93[, c(\"Manufacturer\", \"Model\", \"Type\", \"Price\")]  reactable(data, defaultPageSize = 5, static = TRUE) options(reactable.static = TRUE)  reactable(data, defaultPageSize = 5)"},{"path":"/reactable/articles/static-rendering.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Static Rendering","text":"reactable package documentation uses static rendering several articles, provides alternate versions pages without static rendering comparison: Examples static rendering vs. Examples without static rendering Demo Cookbook static rendering vs. Demo Cookbook without static rendering","code":""},{"path":"/reactable/articles/static-rendering.html","id":"limitations-and-tradeoffs","dir":"Articles","previous_headings":"","what":"Limitations and Tradeoffs","title":"Static Rendering","text":"Although static rendering might seem useful enable tables, limitations tradeoffs consider, may make sense use every table. Static rendering isn’t supported tables rendered via reactableOutput() Shiny. still supported reactable() tables specified Shiny app’s ui definition, however. features reactable fully support static rendering yet: colFormat() supports en locales. Formatting locales still work browser, tables may initially show data formatted en locale. Default expanded rows row details reactable(defaultExpanded = TRUE) statically rendered. may noticeable period tables visible yet interactable, client-side JavaScript makes tables interactive still running. cases, user experience may better fully client-side rendered tables. HTML documents larger, affect users slower download speeds. Static rendering especially recommended unpaginated tables large number rows. Custom JavaScript render functions style functions won’t access DOM, won’t run browser environment. custom JavaScript functions require DOM (e.g., window document), can defer rendering DOM available prevent rendering failures: Custom JavaScript render functions style functions won’t access external JavaScript code. external JavaScript included inline now, may change future. Tables using reactableTheme() may initially appear unstyled rendered pkgdown websites. Statically rendered theme styles usually placed document <head> prevent problem, pkgdown renders user-specified <head> content document body, means tables appear browsers process theme styles.","code":"colDef(   cell = JS(\"     function(cellInfo) {       if (typeof document !== 'undefined') {         // Not in a browser environment, defer rendering until running in a browser         return null       }     }   \") )"},{"path":"/reactable/articles/sticky-columns-selection.html","id":"using-inline-styles","dir":"Articles","previous_headings":"","what":"Using inline styles","title":"Sticky Selection Column","text":"","code":"reactable(   MASS::Cars93,   selection = \"multiple\",   columns = list(     .selection = colDef(       style = list(position = \"sticky\", left = 0, background = \"#fff\", zIndex = 1),       headerStyle = list(position = \"sticky\", left = 0, background = \"#fff\", zIndex = 1),       width = 45     ),     Manufacturer = colDef(       style = list(position = \"sticky\", left = 45, background = \"#fff\", zIndex = 1),       headerStyle = list(position = \"sticky\", left = 45, background = \"#fff\", zIndex = 1)     )   ),   onClick = \"select\",   wrap = FALSE )"},{"path":"/reactable/articles/sticky-columns-selection.html","id":"using-css","dir":"Articles","previous_headings":"","what":"Using CSS","title":"Sticky Selection Column","text":"","code":"reactable(   MASS::Cars93,   selection = \"multiple\",   columns = list(     .selection = colDef(       class = \"sticky left-col-1\",       headerClass = \"sticky left-col-1\",       width = 45     ),     Manufacturer = colDef(       class = \"sticky left-col-2\",       headerClass = \"sticky left-col-2\"     ),     Model = colDef(       class = \"sticky left-col-3\",       headerClass = \"sticky left-col-3\"     )   ),   onClick = \"select\",   wrap = FALSE ) .sticky {   position: sticky !important;   background: #fff;   z-index: 1; }  .left-col-1 {   left: 0; }  .left-col-2 {   left: 45px; }  .left-col-3 {   left: 145px;   border-right: 1px solid #eee !important; }"},{"path":"/reactable/articles/sticky-columns.html","id":"basic-sticky-columns","dir":"Articles","previous_headings":"","what":"Basic sticky columns","title":"Sticky Columns (Old Method)","text":"can make single left right column sticky using position: sticky CSS property. Note position: sticky supported Chrome, Firefox, Safari, Edge, IE11. IE11 fail gracefully though – columns just don’t stick. background: #fff z-index: 1 added properly hide scrolling content. Adding border style reducing repetition:","code":"reactable(   MASS::Cars93,   columns = list(     Manufacturer = colDef(       style = list(position = \"sticky\", left = 0, background = \"#fff\", zIndex = 1),       headerStyle = list(position = \"sticky\", left = 0, background = \"#fff\", zIndex = 1)     ),     Make = colDef(       style = list(position = \"sticky\", right = 0, background = \"#fff\", zIndex = 1),       headerStyle = list(position = \"sticky\", right = 0, background = \"#fff\", zIndex = 1)     )   ),   defaultColDef = colDef(minWidth = 150) ) sticky_style <- function(left = TRUE) {   style <- list(position = \"sticky\", background = \"#fff\", zIndex = 1)   if (left) {     style <- c(style, list(left = 0, borderRight = \"1px solid #eee\"))   } else {     style <- c(style, list(right = 0, borderLeft = \"1px solid #eee\"))   }   style }  reactable(   MASS::Cars93,   columns = list(     Manufacturer = colDef(       style = sticky_style(),       headerStyle = sticky_style()     ),     Make = colDef(       style = sticky_style(left = FALSE),       headerStyle = sticky_style(left = FALSE)     )   ),   defaultColDef = colDef(minWidth = 150) )"},{"path":"/reactable/articles/sticky-columns.html","id":"multiple-sticky-columns","dir":"Articles","previous_headings":"","what":"Multiple sticky columns","title":"Sticky Columns (Old Method)","text":"make multiple columns sticky, set left right positions columns ’ll stick. case, ’ll need know column widths – columns 100px wide default, 2nd column left needs left: 100px;, 3rd column left needs left: 200px;, etc.","code":"reactable(   MASS::Cars93,   columns = list(     Manufacturer = colDef(       class = \"sticky left-col-1\",       headerClass = \"sticky left-col-1\"     ),     Model = colDef(       class = \"sticky left-col-2\",       headerClass = \"sticky left-col-2\"     ),     Type = colDef(       class = \"sticky left-col-3\",       headerClass = \"sticky left-col-3\"     ),     Make = colDef(       class = \"sticky right-col-1\",       headerClass = \"sticky right-col-1\"     )   ),   wrap = FALSE ) .sticky {   position: sticky !important;   background: #fff;   z-index: 1; }  .left-col-1 {   left: 0; }  .left-col-2 {   left: 100px; }  .left-col-3 {   left: 200px;   border-right: 1px solid #eee !important; }  .right-col-1 {   right: 0;   border-left: 1px solid #eee !important; }"},{"path":"/reactable/articles/sticky-columns.html","id":"sticky-headers-and-footers","dir":"Articles","previous_headings":"","what":"Sticky headers and footers","title":"Sticky Columns (Old Method)","text":"Sticky columns work fine sticky headers footers:","code":"reactable(   MASS::Cars93[1:20, ],   pagination = FALSE,   height = 400,   wrap = FALSE,   columns = list(     Manufacturer = colDef(       class = \"sticky left-col-1\",       headerClass = \"sticky left-col-1\",       footerClass = \"sticky left-col-1\"     ),     Model = colDef(       class = \"sticky left-col-2\",       headerClass = \"sticky left-col-2\",       footerClass = \"sticky left-col-2\"     ),     Type = colDef(       class = \"sticky left-col-3\",       headerClass = \"sticky left-col-3\",       footerClass = \"sticky left-col-3\"     ),     Make = colDef(       class = \"sticky right-col-1\",       headerClass = \"sticky right-col-1\",       footerClass = \"sticky right-col-1\"     )   ),   defaultColDef = colDef(footer = \"Footer\") )"},{"path":"/reactable/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Greg Lin. Author, maintainer. Tanner Linsley. Contributor, copyright holder.            React Table library Emotion team contributors. Contributor, copyright holder.            Emotion library Kent Russell. Contributor, copyright holder.            reactR package Ramnath Vaidyanathan. Contributor, copyright holder.            htmlwidgets package Joe Cheng. Contributor, copyright holder.            htmlwidgets package JJ Allaire. Contributor, copyright holder.            htmlwidgets package Yihui Xie. Contributor, copyright holder.            htmlwidgets package Kenton Russell. Contributor, copyright holder.            htmlwidgets package Facebook, Inc. affiliates. Contributor, copyright holder.            React library FormatJS. Contributor, copyright holder.            FormatJS libraries Feross Aboukhadijeh, contributors. Contributor, copyright holder.            buffer library Roman Shtylman. Contributor, copyright holder.            process library James Halliday. Contributor, copyright holder.            stream-browserify library Posit Software, PBC. Funder, copyright holder.","code":""},{"path":"/reactable/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lin G (2023). reactable: Interactive Data Tables R. https://glin.github.io/reactable/, https://github.com/glin/reactable.","code":"@Manual{,   title = {reactable: Interactive Data Tables for R},   author = {Greg Lin},   year = {2023},   note = {https://glin.github.io/reactable/, https://github.com/glin/reactable}, }"},{"path":"/reactable/index.html","id":"reactable","dir":"","previous_headings":"","what":"Interactive data tables for R","title":"Interactive data tables for R","text":"Interactive data tables R, based React Table library made reactR.","code":""},{"path":"/reactable/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Interactive data tables for R","text":"Sorting, filtering, pagination Grouping aggregation Built-column formatting Custom rendering via R JavaScript — use Shiny HTML tags HTML widgets tables Expandable rows nested tables Conditional styling Works seamlessly within R Markdown documents Shiny apps","code":""},{"path":"/reactable/index.html","id":"demos","dir":"","previous_headings":"","what":"Demos","title":"Interactive data tables for R","text":"Twitter Followers Women’s World Cup Predictions NBA Box Score CRAN Packages Spotify Charts Popular Movies Demo Cookbook 100k Rows Shiny Demo","code":""},{"path":"/reactable/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interactive data tables for R","text":"can install reactable CRAN : install development version GitHub :","code":"install.packages(\"reactable\") # install.packages(\"devtools\") devtools::install_github(\"glin/reactable\")"},{"path":"/reactable/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Interactive data tables for R","text":"create table, use reactable() data frame matrix: can embed tables R Markdown Quarto documents: use Shiny applications: learn using reactable, check examples .","code":"library(reactable)  reactable(iris) ```{r} library(reactable)  reactable(iris) ``` library(shiny) library(reactable)  ui <- fluidPage(   reactableOutput(\"table\") )  server <- function(input, output) {   output$table <- renderReactable({     reactable(iris)   }) }  shinyApp(ui, server)"},{"path":"/reactable/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Interactive data tables for R","text":"Basic Usage Sorting Filtering Searching Pagination Grouping Aggregation Column Formatting Custom Rendering Embedding HTML Widgets Footers Total Rows Expandable Rows Nested Tables Conditional Styling Table Styling Theming Column Groups Column Resizing Sticky Columns Row Names Row Headers Cell Click Actions Language Options Shiny Cross-Widget Interactions Crosstalk JavaScript API","code":""},{"path":"/reactable/index.html","id":"browser-support","dir":"","previous_headings":"","what":"Browser Support","title":"Interactive data tables for R","text":"* Support Internet Explorer 11 deprecated reactable v0.4.0.","code":""},{"path":"/reactable/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Interactive data tables for R","text":"MIT","code":""},{"path":"/reactable/reference/as.tags.reactable.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a reactable widget to HTML tags — as.tags.reactable","title":"Convert a reactable widget to HTML tags — as.tags.reactable","text":"S3 method exists enable reactable()'s static rendering option.","code":""},{"path":"/reactable/reference/as.tags.reactable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a reactable widget to HTML tags — as.tags.reactable","text":"","code":"# S3 method for reactable as.tags(x, standalone = FALSE, ...)"},{"path":"/reactable/reference/as.tags.reactable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a reactable widget to HTML tags — as.tags.reactable","text":"x reactable() instance. standalone Logical value indicating whether widget rendered standalone context. ... Additional arguments passed S3 method.","code":""},{"path":"/reactable/reference/colDef.html","id":null,"dir":"Reference","previous_headings":"","what":"Column definitions — colDef","title":"Column definitions — colDef","text":"Use colDef() customize columns table.","code":""},{"path":"/reactable/reference/colDef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column definitions — colDef","text":"","code":"colDef(   name = NULL,   aggregate = NULL,   sortable = NULL,   resizable = NULL,   filterable = NULL,   searchable = NULL,   filterMethod = NULL,   show = TRUE,   defaultSortOrder = NULL,   sortNALast = FALSE,   format = NULL,   cell = NULL,   grouped = NULL,   aggregated = NULL,   header = NULL,   footer = NULL,   details = NULL,   filterInput = NULL,   html = FALSE,   na = \"\",   rowHeader = FALSE,   minWidth = 100,   maxWidth = NULL,   width = NULL,   align = NULL,   vAlign = NULL,   headerVAlign = NULL,   sticky = NULL,   class = NULL,   style = NULL,   headerClass = NULL,   headerStyle = NULL,   footerClass = NULL,   footerStyle = NULL )"},{"path":"/reactable/reference/colDef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column definitions — colDef","text":"name Column header name. aggregate Aggregate function use rows grouped. name built-aggregate function custom JS() aggregate function. Built-aggregate functions : \"mean\", \"sum\", \"max\", \"min\", \"median\", \"count\", \"unique\", \"frequency\". enable row grouping, use groupBy argument reactable(). sortable Enable sorting? Overrides table option. resizable Enable column resizing? Overrides table option. filterable Enable column filtering? Overrides table option. searchable Enable disable global table searching column. default, global searching applies visible columns. Set FALSE exclude visible column searching, TRUE include hidden column searching. filterMethod Custom filter method use column filtering. JS() function takes array row objects, column ID, filter value arguments, returns filtered array row objects. show Show column? FALSE, column excluded global table searching default. include hidden column searching, set searchable TRUE colDef(). defaultSortOrder Default sort order. Either \"asc\" ascending order \"desc\" descending order. Overrides table option. sortNALast Always sort missing values (NA NaN) last? format Column formatting options. colFormat() object format cells, named list colFormat() objects format standard cells (\"cell\") aggregated cells (\"aggregated\") separately. cell Custom cell renderer. R function takes cell value, row index, column name arguments, JS() function takes cell info object table state object arguments. grouped Custom grouped cell renderer. JS() function takes cell info object table state object arguments. aggregated Custom aggregated cell renderer. JS() function takes cell info object table state object arguments. header Custom header renderer. R function takes header value column name arguments, JS() function takes column object table state object arguments. footer Footer content render function. Render functions can R function takes column values column name arguments, JS() function takes column object table state object arguments. details Additional content display expanding row. R function takes row index column name arguments, JS() function takes row info object table state object arguments. used groupBy column. filterInput Custom filter input render function. Render functions can R function takes column values column name arguments, JS() function takes column object table state object arguments. html Render content HTML? Raw HTML strings escaped default. na String display missing values (.e. NA NaN). default, missing values displayed blank cells. rowHeader Mark cells column row headers? Set TRUE help users navigate table using assistive technologies. cells marked row headers, assistive technologies read aloud navigating cells table. Cells row names column automatically marked row headers. minWidth Minimum width column pixels. Defaults 100. maxWidth Maximum width column pixels. width Fixed width column pixels. Overrides minWidth maxWidth. align Horizontal alignment content column. One \"left\", \"right\", \"center\". default, numbers right-aligned, content left-aligned. vAlign Vertical alignment content data cells. One \"top\" (default), \"center\", \"bottom\". headerVAlign Vertical alignment content header cells. One \"top\" (default), \"center\", \"bottom\". sticky Make column sticky scrolling horizontally? Either \"left\" \"right\" make column stick left right side. sticky column column group, columns group automatically made sticky, including column group header. class Additional CSS classes apply cells. Can also R function takes cell value, row index, column name arguments, JS() function takes row info object, column object, table state object arguments. Note R functions apply classes aggregated cells. style Inline styles apply cells. named list character string. Can also R function takes cell value row index arguments, JS() function takes row info object, column object, table state object arguments. Note R functions apply styles aggregated cells. style named list, property names camelCased. headerClass Additional CSS classes apply header. headerStyle Inline styles apply header. named list character string. Note headerStyle named list, property names camelCased. footerClass Additional CSS classes apply footer. footerStyle Inline styles apply footer. named list character string. Note footerStyle named list, property names camelCased.","code":""},{"path":"/reactable/reference/colDef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Column definitions — colDef","text":"column definition object can used customize columns reactable().","code":""},{"path":"/reactable/reference/colDef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column definitions — colDef","text":"","code":"reactable(   iris,   columns = list(     Sepal.Length = colDef(name = \"Sepal Length\"),     Sepal.Width = colDef(filterable = TRUE),     Petal.Length = colDef(show = FALSE),     Petal.Width = colDef(defaultSortOrder = \"desc\")   ) )  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Sepal.Length\":[5.0999999999999996,4.9000000000000004,4.7000000000000002,4.5999999999999996,5,5.4000000000000004,4.5999999999999996,5,4.4000000000000004,4.9000000000000004,5.4000000000000004,4.7999999999999998,4.7999999999999998,4.2999999999999998,5.7999999999999998,5.7000000000000002,5.4000000000000004,5.0999999999999996,5.7000000000000002,5.0999999999999996,5.4000000000000004,5.0999999999999996,4.5999999999999996,5.0999999999999996,4.7999999999999998,5,5,5.2000000000000002,5.2000000000000002,4.7000000000000002,4.7999999999999998,5.4000000000000004,5.2000000000000002,5.5,4.9000000000000004,5,5.5,4.9000000000000004,4.4000000000000004,5.0999999999999996,5,4.5,4.4000000000000004,5,5.0999999999999996,4.7999999999999998,5.0999999999999996,4.5999999999999996,5.2999999999999998,5,7,6.4000000000000004,6.9000000000000004,5.5,6.5,5.7000000000000002,6.2999999999999998,4.9000000000000004,6.5999999999999996,5.2000000000000002,5,5.9000000000000004,6,6.0999999999999996,5.5999999999999996,6.7000000000000002,5.5999999999999996,5.7999999999999998,6.2000000000000002,5.5999999999999996,5.9000000000000004,6.0999999999999996,6.2999999999999998,6.0999999999999996,6.4000000000000004,6.5999999999999996,6.7999999999999998,6.7000000000000002,6,5.7000000000000002,5.5,5.5,5.7999999999999998,6,5.4000000000000004,6,6.7000000000000002,6.2999999999999998,5.5999999999999996,5.5,5.5,6.0999999999999996,5.7999999999999998,5,5.5999999999999996,5.7000000000000002,5.7000000000000002,6.2000000000000002,5.0999999999999996,5.7000000000000002,6.2999999999999998,5.7999999999999998,7.0999999999999996,6.2999999999999998,6.5,7.5999999999999996,4.9000000000000004,7.2999999999999998,6.7000000000000002,7.2000000000000002,6.5,6.4000000000000004,6.7999999999999998,5.7000000000000002,5.7999999999999998,6.4000000000000004,6.5,7.7000000000000002,7.7000000000000002,6,6.9000000000000004,5.5999999999999996,7.7000000000000002,6.2999999999999998,6.7000000000000002,7.2000000000000002,6.2000000000000002,6.0999999999999996,6.4000000000000004,7.2000000000000002,7.4000000000000004,7.9000000000000004,6.4000000000000004,6.2999999999999998,6.0999999999999996,7.7000000000000002,6.2999999999999998,6.4000000000000004,6,6.9000000000000004,6.7000000000000002,6.9000000000000004,5.7999999999999998,6.7999999999999998,6.7000000000000002,6.7000000000000002,6.2999999999999998,6.5,6.2000000000000002,5.9000000000000004],\"Sepal.Width\":[3.5,3,3.2000000000000002,3.1000000000000001,3.6000000000000001,3.8999999999999999,3.3999999999999999,3.3999999999999999,2.8999999999999999,3.1000000000000001,3.7000000000000002,3.3999999999999999,3,3,4,4.4000000000000004,3.8999999999999999,3.5,3.7999999999999998,3.7999999999999998,3.3999999999999999,3.7000000000000002,3.6000000000000001,3.2999999999999998,3.3999999999999999,3,3.3999999999999999,3.5,3.3999999999999999,3.2000000000000002,3.1000000000000001,3.3999999999999999,4.0999999999999996,4.2000000000000002,3.1000000000000001,3.2000000000000002,3.5,3.6000000000000001,3,3.3999999999999999,3.5,2.2999999999999998,3.2000000000000002,3.5,3.7999999999999998,3,3.7999999999999998,3.2000000000000002,3.7000000000000002,3.2999999999999998,3.2000000000000002,3.2000000000000002,3.1000000000000001,2.2999999999999998,2.7999999999999998,2.7999999999999998,3.2999999999999998,2.3999999999999999,2.8999999999999999,2.7000000000000002,2,3,2.2000000000000002,2.8999999999999999,2.8999999999999999,3.1000000000000001,3,2.7000000000000002,2.2000000000000002,2.5,3.2000000000000002,2.7999999999999998,2.5,2.7999999999999998,2.8999999999999999,3,2.7999999999999998,3,2.8999999999999999,2.6000000000000001,2.3999999999999999,2.3999999999999999,2.7000000000000002,2.7000000000000002,3,3.3999999999999999,3.1000000000000001,2.2999999999999998,3,2.5,2.6000000000000001,3,2.6000000000000001,2.2999999999999998,2.7000000000000002,3,2.8999999999999999,2.8999999999999999,2.5,2.7999999999999998,3.2999999999999998,2.7000000000000002,3,2.8999999999999999,3,3,2.5,2.8999999999999999,2.5,3.6000000000000001,3.2000000000000002,2.7000000000000002,3,2.5,2.7999999999999998,3.2000000000000002,3,3.7999999999999998,2.6000000000000001,2.2000000000000002,3.2000000000000002,2.7999999999999998,2.7999999999999998,2.7000000000000002,3.2999999999999998,3.2000000000000002,2.7999999999999998,3,2.7999999999999998,3,2.7999999999999998,3.7999999999999998,2.7999999999999998,2.7999999999999998,2.6000000000000001,3,3.3999999999999999,3.1000000000000001,3,3.1000000000000001,3.1000000000000001,3.1000000000000001,2.7000000000000002,3.2000000000000002,3.2999999999999998,3,2.5,3,3.3999999999999999,3],\"Petal.Length\":[1.3999999999999999,1.3999999999999999,1.3,1.5,1.3999999999999999,1.7,1.3999999999999999,1.5,1.3999999999999999,1.5,1.5,1.6000000000000001,1.3999999999999999,1.1000000000000001,1.2,1.5,1.3,1.3999999999999999,1.7,1.5,1.7,1.5,1,1.7,1.8999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.3999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.5,1.3999999999999999,1.5,1.2,1.3,1.3999999999999999,1.3,1.5,1.3,1.3,1.3,1.6000000000000001,1.8999999999999999,1.3999999999999999,1.6000000000000001,1.3999999999999999,1.5,1.3999999999999999,4.7000000000000002,4.5,4.9000000000000004,4,4.5999999999999996,4.5,4.7000000000000002,3.2999999999999998,4.5999999999999996,3.8999999999999999,3.5,4.2000000000000002,4,4.7000000000000002,3.6000000000000001,4.4000000000000004,4.5,4.0999999999999996,4.5,3.8999999999999999,4.7999999999999998,4,4.9000000000000004,4.7000000000000002,4.2999999999999998,4.4000000000000004,4.7999999999999998,5,4.5,3.5,3.7999999999999998,3.7000000000000002,3.8999999999999999,5.0999999999999996,4.5,4.5,4.7000000000000002,4.4000000000000004,4.0999999999999996,4,4.4000000000000004,4.5999999999999996,4,3.2999999999999998,4.2000000000000002,4.2000000000000002,4.2000000000000002,4.2999999999999998,3,4.0999999999999996,6,5.0999999999999996,5.9000000000000004,5.5999999999999996,5.7999999999999998,6.5999999999999996,4.5,6.2999999999999998,5.7999999999999998,6.0999999999999996,5.0999999999999996,5.2999999999999998,5.5,5,5.0999999999999996,5.2999999999999998,5.5,6.7000000000000002,6.9000000000000004,5,5.7000000000000002,4.9000000000000004,6.7000000000000002,4.9000000000000004,5.7000000000000002,6,4.7999999999999998,4.9000000000000004,5.5999999999999996,5.7999999999999998,6.0999999999999996,6.4000000000000004,5.5999999999999996,5.0999999999999996,5.5999999999999996,6.0999999999999996,5.5999999999999996,5.5,4.7999999999999998,5.4000000000000004,5.5999999999999996,5.0999999999999996,5.0999999999999996,5.9000000000000004,5.7000000000000002,5.2000000000000002,5,5.2000000000000002,5.4000000000000004,5.0999999999999996],\"Petal.Width\":[0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.10000000000000001,0.20000000000000001,0.40000000000000002,0.40000000000000002,0.29999999999999999,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.5,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.59999999999999998,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,1.3999999999999999,1.5,1.5,1.3,1.5,1.3,1.6000000000000001,1,1.3,1.3999999999999999,1,1.5,1,1.3999999999999999,1.3,1.3999999999999999,1.5,1,1.5,1.1000000000000001,1.8,1.3,1.5,1.2,1.3,1.3999999999999999,1.3999999999999999,1.7,1.5,1,1.1000000000000001,1,1.2,1.6000000000000001,1.5,1.6000000000000001,1.5,1.3,1.3,1.3,1.2,1.3999999999999999,1.2,1,1.3,1.2,1.3,1.3,1.1000000000000001,1.3,2.5,1.8999999999999999,2.1000000000000001,1.8,2.2000000000000002,2.1000000000000001,1.7,1.8,1.8,2.5,2,1.8999999999999999,2.1000000000000001,2,2.3999999999999999,2.2999999999999998,1.8,2.2000000000000002,2.2999999999999998,1.5,2.2999999999999998,2,2,1.8,2.1000000000000001,1.8,1.8,1.8,2.1000000000000001,1.6000000000000001,1.8999999999999999,2,2.2000000000000002,1.5,1.3999999999999999,2.2999999999999998,2.3999999999999999,1.8,1.8,2.1000000000000001,2.3999999999999999,2.2999999999999998,1.8999999999999999,2.2999999999999998,2.5,2.2999999999999998,1.8999999999999999,2,2.2999999999999998,1.8],\"Species\":[\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\"]},\"columns\":[{\"id\":\"Sepal.Length\",\"name\":\"Sepal Length\",\"type\":\"numeric\"},{\"id\":\"Sepal.Width\",\"name\":\"Sepal.Width\",\"type\":\"numeric\",\"filterable\":true},{\"id\":\"Petal.Length\",\"name\":\"Petal.Length\",\"type\":\"numeric\",\"show\":false},{\"id\":\"Petal.Width\",\"name\":\"Petal.Width\",\"type\":\"numeric\",\"defaultSortDesc\":true},{\"id\":\"Species\",\"name\":\"Species\",\"type\":\"factor\"}],\"dataKey\":\"2764be5dbd73eeb00b0684340e766119\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reactable/reference/colFormat.html","id":null,"dir":"Reference","previous_headings":"","what":"Column formatting options — colFormat","title":"Column formatting options — colFormat","text":"Use colFormat() add data formatting column.","code":""},{"path":"/reactable/reference/colFormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column formatting options — colFormat","text":"","code":"colFormat(   prefix = NULL,   suffix = NULL,   digits = NULL,   separators = FALSE,   percent = FALSE,   currency = NULL,   datetime = FALSE,   date = FALSE,   time = FALSE,   hour12 = NULL,   locales = NULL )"},{"path":"/reactable/reference/colFormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column formatting options — colFormat","text":"prefix Prefix string. suffix Suffix string. digits Number decimal digits use numbers. separators Whether use grouping separators numbers, thousands separators thousand/lakh/crore separators. format locale-dependent. percent Format number percentage? format locale-dependent. currency Currency format. ISO 4217 currency code \"USD\" US dollar, \"EUR\" euro, \"CNY\" Chinese RMB. format locale-dependent. datetime Format locale-dependent date-time? date Format locale-dependent date? time Format locale-dependent time? hour12 Whether use 12-hour time (TRUE) 24-hour time (FALSE). default time convention locale-dependent. locales Locales use number, date, time, currency formatting. character vector BCP 47 language tags, \"en-US\" English (United States), \"hi\" Hindi, \"sv-SE\" Swedish (Sweden). Defaults locale user's browser. Multiple locales may specified provide fallback language case locale unsupported. multiple locales specified, first supported locale used. See list common BCP 47 language tags reference.","code":""},{"path":"/reactable/reference/colFormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Column formatting options — colFormat","text":"column format object can used customize data formatting colDef().","code":""},{"path":[]},{"path":"/reactable/reference/colFormat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column formatting options — colFormat","text":"","code":"data <- data.frame(   price_USD = c(123456.56, 132, 5650.12),   price_INR = c(350, 23208.552, 1773156.4),   number_FR = c(123456.56, 132, 5650.12),   temp = c(22, NA, 31),   percent = c(0.9525556, 0.5, 0.112),   date = as.Date(c(\"2019-01-02\", \"2019-03-15\", \"2019-09-22\")) )  reactable(data, columns = list(   price_USD = colDef(format = colFormat(prefix = \"$\", separators = TRUE, digits = 2)),   price_INR = colDef(format = colFormat(currency = \"INR\", separators = TRUE, locales = \"hi-IN\")),   number_FR = colDef(format = colFormat(locales = \"fr-FR\")),   temp = colDef(format = colFormat(suffix = \" \\u00b0C\")),   percent = colDef(format = colFormat(percent = TRUE, digits = 1)),   date = colDef(format = colFormat(date = TRUE, locales = \"en-GB\")) ))  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"price_USD\":[123456.56,132,5650.1199999999999],\"price_INR\":[350,23208.552,1773156.3999999999],\"number_FR\":[123456.56,132,5650.1199999999999],\"temp\":[22,\"NA\",31],\"percent\":[0.95255559999999995,0.5,0.112],\"date\":[\"2019-01-02\",\"2019-03-15\",\"2019-09-22\"]},\"columns\":[{\"id\":\"price_USD\",\"name\":\"price_USD\",\"type\":\"numeric\",\"format\":{\"cell\":{\"prefix\":\"$\",\"digits\":2,\"separators\":true},\"aggregated\":{\"prefix\":\"$\",\"digits\":2,\"separators\":true}}},{\"id\":\"price_INR\",\"name\":\"price_INR\",\"type\":\"numeric\",\"format\":{\"cell\":{\"separators\":true,\"currency\":\"INR\",\"locales\":\"hi-IN\"},\"aggregated\":{\"separators\":true,\"currency\":\"INR\",\"locales\":\"hi-IN\"}}},{\"id\":\"number_FR\",\"name\":\"number_FR\",\"type\":\"numeric\",\"format\":{\"cell\":{\"locales\":\"fr-FR\"},\"aggregated\":{\"locales\":\"fr-FR\"}}},{\"id\":\"temp\",\"name\":\"temp\",\"type\":\"numeric\",\"format\":{\"cell\":{\"suffix\":\" °C\"},\"aggregated\":{\"suffix\":\" °C\"}}},{\"id\":\"percent\",\"name\":\"percent\",\"type\":\"numeric\",\"format\":{\"cell\":{\"digits\":1,\"percent\":true},\"aggregated\":{\"digits\":1,\"percent\":true}}},{\"id\":\"date\",\"name\":\"date\",\"type\":\"Date\",\"format\":{\"cell\":{\"date\":true,\"locales\":\"en-GB\"},\"aggregated\":{\"date\":true,\"locales\":\"en-GB\"}}}],\"dataKey\":\"80b55c35e7f39de3ebb9c5bfdd30acf6\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]} # Date formatting datetimes <- as.POSIXct(c(\"2019-01-02 3:22:15\", \"2019-03-15 09:15:55\", \"2019-09-22 14:20:00\")) data <- data.frame(   datetime = datetimes,   date = datetimes,   time = datetimes,   time_24h = datetimes,   datetime_pt_BR = datetimes )  reactable(data, columns = list(   datetime = colDef(format = colFormat(datetime = TRUE)),   date = colDef(format = colFormat(date = TRUE)),   time = colDef(format = colFormat(time = TRUE)),   time_24h = colDef(format = colFormat(time = TRUE, hour12 = FALSE)),   datetime_pt_BR = colDef(format = colFormat(datetime = TRUE, locales = \"pt-BR\")) ))  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"datetime\":[\"2019-01-02T03:22:15Z\",\"2019-03-15T09:15:55Z\",\"2019-09-22T14:20:00Z\"],\"date\":[\"2019-01-02T03:22:15Z\",\"2019-03-15T09:15:55Z\",\"2019-09-22T14:20:00Z\"],\"time\":[\"2019-01-02T03:22:15Z\",\"2019-03-15T09:15:55Z\",\"2019-09-22T14:20:00Z\"],\"time_24h\":[\"2019-01-02T03:22:15Z\",\"2019-03-15T09:15:55Z\",\"2019-09-22T14:20:00Z\"],\"datetime_pt_BR\":[\"2019-01-02T03:22:15Z\",\"2019-03-15T09:15:55Z\",\"2019-09-22T14:20:00Z\"]},\"columns\":[{\"id\":\"datetime\",\"name\":\"datetime\",\"type\":\"Date\",\"format\":{\"cell\":{\"datetime\":true},\"aggregated\":{\"datetime\":true}}},{\"id\":\"date\",\"name\":\"date\",\"type\":\"Date\",\"format\":{\"cell\":{\"date\":true},\"aggregated\":{\"date\":true}}},{\"id\":\"time\",\"name\":\"time\",\"type\":\"Date\",\"format\":{\"cell\":{\"time\":true},\"aggregated\":{\"time\":true}}},{\"id\":\"time_24h\",\"name\":\"time_24h\",\"type\":\"Date\",\"format\":{\"cell\":{\"time\":true,\"hour12\":false},\"aggregated\":{\"time\":true,\"hour12\":false}}},{\"id\":\"datetime_pt_BR\",\"name\":\"datetime_pt_BR\",\"type\":\"Date\",\"format\":{\"cell\":{\"datetime\":true,\"locales\":\"pt-BR\"},\"aggregated\":{\"datetime\":true,\"locales\":\"pt-BR\"}}}],\"dataKey\":\"7ca09ceaf3aee7e449e2a0836fdc2fd8\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]} # Currency formatting data <- data.frame(   USD = c(12.12, 2141.213, 0.42, 1.55, 34414),   EUR = c(10.68, 1884.27, 0.37, 1.36, 30284.32),   INR = c(861.07, 152122.48, 29.84, 110, 2444942.63),   JPY = c(1280, 226144, 44.36, 164, 3634634.61),   MAD = c(115.78, 20453.94, 4.01, 15, 328739.73) )  reactable(data, columns = list(   USD = colDef(     format = colFormat(currency = \"USD\", separators = TRUE, locales = \"en-US\")   ),   EUR = colDef(     format = colFormat(currency = \"EUR\", separators = TRUE, locales = \"de-DE\")   ),   INR = colDef(     format = colFormat(currency = \"INR\", separators = TRUE, locales = \"hi-IN\")   ),   JPY = colDef(     format = colFormat(currency = \"JPY\", separators = TRUE, locales = \"ja-JP\")   ),   MAD = colDef(     format = colFormat(currency = \"MAD\", separators = TRUE, locales = \"ar-MA\")   ) ))  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"USD\":[12.119999999999999,2141.2130000000002,0.41999999999999998,1.55,34414],\"EUR\":[10.68,1884.27,0.37,1.3600000000000001,30284.32],\"INR\":[861.07000000000005,152122.48000000001,29.84,110,2444942.6299999999],\"JPY\":[1280,226144,44.359999999999999,164,3634634.6099999999],\"MAD\":[115.78,20453.939999999999,4.0099999999999998,15,328739.72999999998]},\"columns\":[{\"id\":\"USD\",\"name\":\"USD\",\"type\":\"numeric\",\"format\":{\"cell\":{\"separators\":true,\"currency\":\"USD\",\"locales\":\"en-US\"},\"aggregated\":{\"separators\":true,\"currency\":\"USD\",\"locales\":\"en-US\"}}},{\"id\":\"EUR\",\"name\":\"EUR\",\"type\":\"numeric\",\"format\":{\"cell\":{\"separators\":true,\"currency\":\"EUR\",\"locales\":\"de-DE\"},\"aggregated\":{\"separators\":true,\"currency\":\"EUR\",\"locales\":\"de-DE\"}}},{\"id\":\"INR\",\"name\":\"INR\",\"type\":\"numeric\",\"format\":{\"cell\":{\"separators\":true,\"currency\":\"INR\",\"locales\":\"hi-IN\"},\"aggregated\":{\"separators\":true,\"currency\":\"INR\",\"locales\":\"hi-IN\"}}},{\"id\":\"JPY\",\"name\":\"JPY\",\"type\":\"numeric\",\"format\":{\"cell\":{\"separators\":true,\"currency\":\"JPY\",\"locales\":\"ja-JP\"},\"aggregated\":{\"separators\":true,\"currency\":\"JPY\",\"locales\":\"ja-JP\"}}},{\"id\":\"MAD\",\"name\":\"MAD\",\"type\":\"numeric\",\"format\":{\"cell\":{\"separators\":true,\"currency\":\"MAD\",\"locales\":\"ar-MA\"},\"aggregated\":{\"separators\":true,\"currency\":\"MAD\",\"locales\":\"ar-MA\"}}}],\"dataKey\":\"fd677708a64de59ea6f9781f018c9097\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]} # Formatting aggregated cells data <- data.frame(   States = state.name,   Region = state.region,   Area = state.area )  reactable(   data,   groupBy = \"Region\",   columns = list(     States = colDef(       aggregate = \"count\",       format = list(         aggregated = colFormat(suffix = \" states\")       )     ),     Area = colDef(       aggregate = \"sum\",       format = colFormat(suffix = \" mi\\u00b2\", separators = TRUE)     )   ) )  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"States\":[\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"],\"Region\":[\"South\",\"West\",\"West\",\"South\",\"West\",\"West\",\"Northeast\",\"South\",\"South\",\"South\",\"West\",\"West\",\"North Central\",\"North Central\",\"North Central\",\"North Central\",\"South\",\"South\",\"Northeast\",\"South\",\"Northeast\",\"North Central\",\"North Central\",\"South\",\"North Central\",\"West\",\"North Central\",\"West\",\"Northeast\",\"Northeast\",\"West\",\"Northeast\",\"South\",\"North Central\",\"North Central\",\"South\",\"West\",\"Northeast\",\"Northeast\",\"South\",\"North Central\",\"South\",\"South\",\"West\",\"Northeast\",\"South\",\"West\",\"South\",\"North Central\",\"West\"],\"Area\":[51609,589757,113909,53104,158693,104247,5009,2057,58560,58876,6450,83557,56400,36291,56290,82264,40395,48523,33215,10577,8257,58216,84068,47716,69686,147138,77227,110540,9304,7836,121666,49576,52586,70665,41222,69919,96981,45333,1214,31055,77047,42244,267339,84916,9609,40815,68192,24181,56154,97914]},\"columns\":[{\"id\":\"States\",\"name\":\"States\",\"type\":\"character\",\"aggregate\":\"count\",\"format\":{\"aggregated\":{\"suffix\":\" states\"}}},{\"id\":\"Region\",\"name\":\"Region\",\"type\":\"factor\"},{\"id\":\"Area\",\"name\":\"Area\",\"type\":\"numeric\",\"aggregate\":\"sum\",\"format\":{\"cell\":{\"suffix\":\" mi²\",\"separators\":true},\"aggregated\":{\"suffix\":\" mi²\",\"separators\":true}}}],\"groupBy\":[\"Region\"],\"dataKey\":\"7e23aa0605df8785f1cb73ecf25dfa1c\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reactable/reference/colGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Column group definitions — colGroup","title":"Column group definitions — colGroup","text":"Use colGroup() create column groups table.","code":""},{"path":"/reactable/reference/colGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column group definitions — colGroup","text":"","code":"colGroup(   name = NULL,   columns = NULL,   header = NULL,   html = FALSE,   align = NULL,   headerVAlign = NULL,   sticky = NULL,   headerClass = NULL,   headerStyle = NULL )"},{"path":"/reactable/reference/colGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column group definitions — colGroup","text":"name Column group header name. columns Character vector column names group. header Custom header renderer. R function takes header value argument, JS() function takes column object table state object arguments. html Render header content HTML? Raw HTML strings escaped default. align Horizontal alignment content column group header. One \"left\", \"right\", \"center\" (default). headerVAlign Vertical alignment content column group header. One \"top\" (default), \"center\", \"bottom\". sticky Make column group sticky scrolling horizontally? Either \"left\" \"right\" make column group stick left right side. column group sticky, columns group automatically made sticky. headerClass Additional CSS classes apply header. headerStyle Inline styles apply header. named list character string. Note headerStyle named list, property names camelCased.","code":""},{"path":"/reactable/reference/colGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Column group definitions — colGroup","text":"column group definition object can used create column groups reactable().","code":""},{"path":"/reactable/reference/colGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column group definitions — colGroup","text":"","code":"reactable(   iris,   columns = list(     Sepal.Length = colDef(name = \"Length\"),     Sepal.Width = colDef(name = \"Width\"),     Petal.Length = colDef(name = \"Length\"),     Petal.Width = colDef(name = \"Width\")   ),   columnGroups = list(     colGroup(name = \"Sepal\", columns = c(\"Sepal.Length\", \"Sepal.Width\")),     colGroup(name = \"Petal\", columns = c(\"Petal.Length\", \"Petal.Width\"))   ) )  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Sepal.Length\":[5.0999999999999996,4.9000000000000004,4.7000000000000002,4.5999999999999996,5,5.4000000000000004,4.5999999999999996,5,4.4000000000000004,4.9000000000000004,5.4000000000000004,4.7999999999999998,4.7999999999999998,4.2999999999999998,5.7999999999999998,5.7000000000000002,5.4000000000000004,5.0999999999999996,5.7000000000000002,5.0999999999999996,5.4000000000000004,5.0999999999999996,4.5999999999999996,5.0999999999999996,4.7999999999999998,5,5,5.2000000000000002,5.2000000000000002,4.7000000000000002,4.7999999999999998,5.4000000000000004,5.2000000000000002,5.5,4.9000000000000004,5,5.5,4.9000000000000004,4.4000000000000004,5.0999999999999996,5,4.5,4.4000000000000004,5,5.0999999999999996,4.7999999999999998,5.0999999999999996,4.5999999999999996,5.2999999999999998,5,7,6.4000000000000004,6.9000000000000004,5.5,6.5,5.7000000000000002,6.2999999999999998,4.9000000000000004,6.5999999999999996,5.2000000000000002,5,5.9000000000000004,6,6.0999999999999996,5.5999999999999996,6.7000000000000002,5.5999999999999996,5.7999999999999998,6.2000000000000002,5.5999999999999996,5.9000000000000004,6.0999999999999996,6.2999999999999998,6.0999999999999996,6.4000000000000004,6.5999999999999996,6.7999999999999998,6.7000000000000002,6,5.7000000000000002,5.5,5.5,5.7999999999999998,6,5.4000000000000004,6,6.7000000000000002,6.2999999999999998,5.5999999999999996,5.5,5.5,6.0999999999999996,5.7999999999999998,5,5.5999999999999996,5.7000000000000002,5.7000000000000002,6.2000000000000002,5.0999999999999996,5.7000000000000002,6.2999999999999998,5.7999999999999998,7.0999999999999996,6.2999999999999998,6.5,7.5999999999999996,4.9000000000000004,7.2999999999999998,6.7000000000000002,7.2000000000000002,6.5,6.4000000000000004,6.7999999999999998,5.7000000000000002,5.7999999999999998,6.4000000000000004,6.5,7.7000000000000002,7.7000000000000002,6,6.9000000000000004,5.5999999999999996,7.7000000000000002,6.2999999999999998,6.7000000000000002,7.2000000000000002,6.2000000000000002,6.0999999999999996,6.4000000000000004,7.2000000000000002,7.4000000000000004,7.9000000000000004,6.4000000000000004,6.2999999999999998,6.0999999999999996,7.7000000000000002,6.2999999999999998,6.4000000000000004,6,6.9000000000000004,6.7000000000000002,6.9000000000000004,5.7999999999999998,6.7999999999999998,6.7000000000000002,6.7000000000000002,6.2999999999999998,6.5,6.2000000000000002,5.9000000000000004],\"Sepal.Width\":[3.5,3,3.2000000000000002,3.1000000000000001,3.6000000000000001,3.8999999999999999,3.3999999999999999,3.3999999999999999,2.8999999999999999,3.1000000000000001,3.7000000000000002,3.3999999999999999,3,3,4,4.4000000000000004,3.8999999999999999,3.5,3.7999999999999998,3.7999999999999998,3.3999999999999999,3.7000000000000002,3.6000000000000001,3.2999999999999998,3.3999999999999999,3,3.3999999999999999,3.5,3.3999999999999999,3.2000000000000002,3.1000000000000001,3.3999999999999999,4.0999999999999996,4.2000000000000002,3.1000000000000001,3.2000000000000002,3.5,3.6000000000000001,3,3.3999999999999999,3.5,2.2999999999999998,3.2000000000000002,3.5,3.7999999999999998,3,3.7999999999999998,3.2000000000000002,3.7000000000000002,3.2999999999999998,3.2000000000000002,3.2000000000000002,3.1000000000000001,2.2999999999999998,2.7999999999999998,2.7999999999999998,3.2999999999999998,2.3999999999999999,2.8999999999999999,2.7000000000000002,2,3,2.2000000000000002,2.8999999999999999,2.8999999999999999,3.1000000000000001,3,2.7000000000000002,2.2000000000000002,2.5,3.2000000000000002,2.7999999999999998,2.5,2.7999999999999998,2.8999999999999999,3,2.7999999999999998,3,2.8999999999999999,2.6000000000000001,2.3999999999999999,2.3999999999999999,2.7000000000000002,2.7000000000000002,3,3.3999999999999999,3.1000000000000001,2.2999999999999998,3,2.5,2.6000000000000001,3,2.6000000000000001,2.2999999999999998,2.7000000000000002,3,2.8999999999999999,2.8999999999999999,2.5,2.7999999999999998,3.2999999999999998,2.7000000000000002,3,2.8999999999999999,3,3,2.5,2.8999999999999999,2.5,3.6000000000000001,3.2000000000000002,2.7000000000000002,3,2.5,2.7999999999999998,3.2000000000000002,3,3.7999999999999998,2.6000000000000001,2.2000000000000002,3.2000000000000002,2.7999999999999998,2.7999999999999998,2.7000000000000002,3.2999999999999998,3.2000000000000002,2.7999999999999998,3,2.7999999999999998,3,2.7999999999999998,3.7999999999999998,2.7999999999999998,2.7999999999999998,2.6000000000000001,3,3.3999999999999999,3.1000000000000001,3,3.1000000000000001,3.1000000000000001,3.1000000000000001,2.7000000000000002,3.2000000000000002,3.2999999999999998,3,2.5,3,3.3999999999999999,3],\"Petal.Length\":[1.3999999999999999,1.3999999999999999,1.3,1.5,1.3999999999999999,1.7,1.3999999999999999,1.5,1.3999999999999999,1.5,1.5,1.6000000000000001,1.3999999999999999,1.1000000000000001,1.2,1.5,1.3,1.3999999999999999,1.7,1.5,1.7,1.5,1,1.7,1.8999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.3999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.5,1.3999999999999999,1.5,1.2,1.3,1.3999999999999999,1.3,1.5,1.3,1.3,1.3,1.6000000000000001,1.8999999999999999,1.3999999999999999,1.6000000000000001,1.3999999999999999,1.5,1.3999999999999999,4.7000000000000002,4.5,4.9000000000000004,4,4.5999999999999996,4.5,4.7000000000000002,3.2999999999999998,4.5999999999999996,3.8999999999999999,3.5,4.2000000000000002,4,4.7000000000000002,3.6000000000000001,4.4000000000000004,4.5,4.0999999999999996,4.5,3.8999999999999999,4.7999999999999998,4,4.9000000000000004,4.7000000000000002,4.2999999999999998,4.4000000000000004,4.7999999999999998,5,4.5,3.5,3.7999999999999998,3.7000000000000002,3.8999999999999999,5.0999999999999996,4.5,4.5,4.7000000000000002,4.4000000000000004,4.0999999999999996,4,4.4000000000000004,4.5999999999999996,4,3.2999999999999998,4.2000000000000002,4.2000000000000002,4.2000000000000002,4.2999999999999998,3,4.0999999999999996,6,5.0999999999999996,5.9000000000000004,5.5999999999999996,5.7999999999999998,6.5999999999999996,4.5,6.2999999999999998,5.7999999999999998,6.0999999999999996,5.0999999999999996,5.2999999999999998,5.5,5,5.0999999999999996,5.2999999999999998,5.5,6.7000000000000002,6.9000000000000004,5,5.7000000000000002,4.9000000000000004,6.7000000000000002,4.9000000000000004,5.7000000000000002,6,4.7999999999999998,4.9000000000000004,5.5999999999999996,5.7999999999999998,6.0999999999999996,6.4000000000000004,5.5999999999999996,5.0999999999999996,5.5999999999999996,6.0999999999999996,5.5999999999999996,5.5,4.7999999999999998,5.4000000000000004,5.5999999999999996,5.0999999999999996,5.0999999999999996,5.9000000000000004,5.7000000000000002,5.2000000000000002,5,5.2000000000000002,5.4000000000000004,5.0999999999999996],\"Petal.Width\":[0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.10000000000000001,0.20000000000000001,0.40000000000000002,0.40000000000000002,0.29999999999999999,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.5,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.59999999999999998,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,1.3999999999999999,1.5,1.5,1.3,1.5,1.3,1.6000000000000001,1,1.3,1.3999999999999999,1,1.5,1,1.3999999999999999,1.3,1.3999999999999999,1.5,1,1.5,1.1000000000000001,1.8,1.3,1.5,1.2,1.3,1.3999999999999999,1.3999999999999999,1.7,1.5,1,1.1000000000000001,1,1.2,1.6000000000000001,1.5,1.6000000000000001,1.5,1.3,1.3,1.3,1.2,1.3999999999999999,1.2,1,1.3,1.2,1.3,1.3,1.1000000000000001,1.3,2.5,1.8999999999999999,2.1000000000000001,1.8,2.2000000000000002,2.1000000000000001,1.7,1.8,1.8,2.5,2,1.8999999999999999,2.1000000000000001,2,2.3999999999999999,2.2999999999999998,1.8,2.2000000000000002,2.2999999999999998,1.5,2.2999999999999998,2,2,1.8,2.1000000000000001,1.8,1.8,1.8,2.1000000000000001,1.6000000000000001,1.8999999999999999,2,2.2000000000000002,1.5,1.3999999999999999,2.2999999999999998,2.3999999999999999,1.8,1.8,2.1000000000000001,2.3999999999999999,2.2999999999999998,1.8999999999999999,2.2999999999999998,2.5,2.2999999999999998,1.8999999999999999,2,2.2999999999999998,1.8],\"Species\":[\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\"]},\"columns\":[{\"id\":\"Sepal.Length\",\"name\":\"Length\",\"type\":\"numeric\"},{\"id\":\"Sepal.Width\",\"name\":\"Width\",\"type\":\"numeric\"},{\"id\":\"Petal.Length\",\"name\":\"Length\",\"type\":\"numeric\"},{\"id\":\"Petal.Width\",\"name\":\"Width\",\"type\":\"numeric\"},{\"id\":\"Species\",\"name\":\"Species\",\"type\":\"factor\"}],\"columnGroups\":[{\"name\":\"Sepal\",\"columns\":[\"Sepal.Length\",\"Sepal.Width\"]},{\"name\":\"Petal\",\"columns\":[\"Petal.Length\",\"Petal.Width\"]}],\"dataKey\":\"1dc33f77834b7b8bb8e32ec026a763be\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reactable/reference/getReactableState.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the state of a reactable instance — getReactableState","title":"Get the state of a reactable instance — getReactableState","text":"getReactableState() gets state reactable instance within Shiny application.","code":""},{"path":"/reactable/reference/getReactableState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the state of a reactable instance — getReactableState","text":"","code":"getReactableState(outputId, name = NULL, session = NULL)"},{"path":"/reactable/reference/getReactableState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the state of a reactable instance — getReactableState","text":"outputId Shiny output ID reactable instance. name Character vector state value(s) get. Values must one \"page\", \"pageSize\", \"pages\", sorted, \"selected\". unspecified, values returned. session Shiny session object. Defaults current Shiny session.","code":""},{"path":"/reactable/reference/getReactableState.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the state of a reactable instance — getReactableState","text":"name specified, one following values: page: current page pageSize: page size pages: number pages sorted: sorted columns - named list columns values \"asc\" ascending order \"desc\" descending order, NULL columns sorted selected: selected rows - numeric vector row indices, NULL rows selected name contains one value, getReactableState() returns named list specified values. name unspecified, getReactableState() returns named list containing values. table rendered yet, getReactableState() returns NULL.","code":""},{"path":"/reactable/reference/getReactableState.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the state of a reactable instance — getReactableState","text":"","code":"# Run in an interactive R session if (interactive()) {  library(shiny) library(reactable) library(htmltools)  ui <- fluidPage(   actionButton(\"prev_page_btn\", \"Previous page\"),   actionButton(\"next_page_btn\", \"Next page\"),   reactableOutput(\"table\"),   verbatimTextOutput(\"table_state\"),   uiOutput(\"selected_row_details\") )  server <- function(input, output) {   output$table <- renderReactable({     reactable(       MASS::Cars93[, 1:5],       showPageSizeOptions = TRUE,       selection = \"multiple\",       onClick = \"select\"     )   })    output$table_state <- renderPrint({     state <- req(getReactableState(\"table\"))     print(state)   })    observeEvent(input$prev_page_btn, {     # Change to the previous page     page <- getReactableState(\"table\", \"page\")     if (page > 1) {       updateReactable(\"table\", page = page - 1)     }   })    observeEvent(input$next_page_btn, {     # Change to the next page     state <- getReactableState(\"table\")     if (state$page < state$pages) {       updateReactable(\"table\", page = state$page + 1)     }   })    output$selected_row_details <- renderUI({     selected <- getReactableState(\"table\", \"selected\")     req(selected)     details <- MASS::Cars93[selected, -c(1:5)]     tagList(       h2(\"Selected row details\"),       tags$pre(         paste(capture.output(print(details, width = 1200)), collapse = \"\\n\")       )     )   }) }  shinyApp(ui, server) }"},{"path":"/reactable/reference/knit_print.reactable.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a reactable widget for knitr — knit_print.reactable","title":"Print a reactable widget for knitr — knit_print.reactable","text":"S3 method exists enable reactable()'s static rendering option.","code":""},{"path":"/reactable/reference/knit_print.reactable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a reactable widget for knitr — knit_print.reactable","text":"","code":"knit_print.reactable(x, ...)"},{"path":"/reactable/reference/knit_print.reactable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a reactable widget for knitr — knit_print.reactable","text":"x reactable() instance. ... Additional arguments passed S3 method.","code":""},{"path":"/reactable/reference/reactable-package.html","id":null,"dir":"Reference","previous_headings":"","what":"reactable: Interactive Data Tables for R — reactable-package","title":"reactable: Interactive Data Tables for R — reactable-package","text":"Interactive data tables R, based 'React Table' JavaScript library. Provides HTML widget can used 'R Markdown' 'Quarto' documents, 'Shiny' applications, viewed R console.","code":""},{"path":"/reactable/reference/reactable-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"reactable: Interactive Data Tables for R — reactable-package","text":"See online documentation examples extensive usage guide.","code":""},{"path":[]},{"path":"/reactable/reference/reactable-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"reactable: Interactive Data Tables for R — reactable-package","text":"Maintainer: Greg Lin glin@glin.io contributors: Tanner Linsley (React Table library) [contributor, copyright holder] Emotion team contributors (Emotion library) [contributor, copyright holder] Kent Russell (reactR package) [contributor, copyright holder] Ramnath Vaidyanathan (htmlwidgets package) [contributor, copyright holder] Joe Cheng (htmlwidgets package) [contributor, copyright holder] JJ Allaire (htmlwidgets package) [contributor, copyright holder] Yihui Xie (htmlwidgets package) [contributor, copyright holder] Kenton Russell (htmlwidgets package) [contributor, copyright holder] Facebook, Inc. affiliates (React library) [contributor, copyright holder] FormatJS (FormatJS libraries) [contributor, copyright holder] Feross Aboukhadijeh, contributors (buffer library) [contributor, copyright holder] Roman Shtylman (process library) [contributor, copyright holder] James Halliday (stream-browserify library) [contributor, copyright holder] Posit Software, PBC [funder, copyright holder]","code":""},{"path":"/reactable/reference/reactable-server.html","id":null,"dir":"Reference","previous_headings":"","what":"Create custom server-side data backends for Shiny — reactable-server","title":"Create custom server-side data backends for Shiny — reactable-server","text":"Custom server-side data backends created using S3 object system. create custom server-side data backend, provide S3 object server argument reactable() following S3 methods defined: reactableServerInit initializes server backend (optional). reactableServerData handles requests data return resolvedData() object. Custom backend methods accept every argument, can choose implement certain features grouping, row expansion, row selection. server-side implementation row expansion row selection, reactable fall back client-side row expansion selection. means row expansion selection work rows current page, example, selecting rows table select rows current page. Custom backend methods accept additional arguments via ... case new arguments added future.","code":""},{"path":"/reactable/reference/reactable-server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create custom server-side data backends for Shiny — reactable-server","text":"","code":"reactableServerInit(   x,   data = NULL,   columns = NULL,   pageIndex = 0,   pageSize = 0,   sortBy = NULL,   filters = NULL,   searchValue = NULL,   searchMethod = NULL,   groupBy = NULL,   pagination = NULL,   paginateSubRows = NULL,   selectedRowIds = NULL,   expanded = NULL,   ... )  reactableServerData(   x,   data = NULL,   columns = NULL,   pageIndex = 0,   pageSize = 0,   sortBy = NULL,   filters = NULL,   searchValue = NULL,   searchMethod = NULL,   groupBy = NULL,   pagination = NULL,   paginateSubRows = NULL,   selectedRowIds = NULL,   expanded = NULL,   ... )"},{"path":"/reactable/reference/reactable-server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create custom server-side data backends for Shiny — reactable-server","text":"x server backend. data original table data. data frame. columns Table columns. list colDef() objects. pageIndex current page index. Starts zero. pageSize current page size. sortBy current sorted columns. NULL empty. filters current column filters. NULL empty. searchValue current global search value. NULL empty. searchMethod custom search method. JS() function. groupBy current grouped columns. NULL empty. pagination Whether pagination enabled, TRUE FALSE. paginateSubRows Whether sub rows paginated, TRUE FALSE. selectedRowIds current selected rows. expanded current expanded rows. ... Additional arguments passed S3 method.","code":""},{"path":"/reactable/reference/reactable-server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create custom server-side data backends for Shiny — reactable-server","text":"reactableServerData() return resolvedData() object. reactableServerData() return value.","code":""},{"path":"/reactable/reference/reactable-shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny bindings for reactable — reactable-shiny","title":"Shiny bindings for reactable — reactable-shiny","text":"Output render functions using reactable within Shiny applications interactive R Markdown documents.","code":""},{"path":"/reactable/reference/reactable-shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny bindings for reactable — reactable-shiny","text":"","code":"reactableOutput(outputId, width = \"auto\", height = \"auto\", inline = FALSE)  renderReactable(expr, env = parent.frame(), quoted = FALSE)"},{"path":"/reactable/reference/reactable-shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny bindings for reactable — reactable-shiny","text":"outputId Output variable read . width, height valid CSS unit (like \"100%\", \"400px\", \"auto\") number, coerced string \"px\" appended. inline Use inline element table's container? expr expression generates reactable widget. env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable.","code":""},{"path":"/reactable/reference/reactable-shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny bindings for reactable — reactable-shiny","text":"reactableOutput() returns reactable output element can included Shiny UI. renderReactable() returns reactable render function can assigned Shiny output slot.","code":""},{"path":"/reactable/reference/reactable-shiny.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Shiny bindings for reactable — reactable-shiny","text":"See online demo additional examples using reactable Shiny.","code":""},{"path":[]},{"path":"/reactable/reference/reactable-shiny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny bindings for reactable — reactable-shiny","text":"","code":"# Run in an interactive R session if (interactive()) {  library(shiny) library(reactable)  ui <- fluidPage(  titlePanel(\"reactable example\"),  reactableOutput(\"table\") )  server <- function(input, output, session) {   output$table <- renderReactable({    reactable(iris)  }) }  shinyApp(ui, server) }"},{"path":"/reactable/reference/reactable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an interactive data table — reactable","title":"Create an interactive data table — reactable","text":"reactable() creates data table tabular data sorting pagination default. data table HTML widget can used R Markdown documents Shiny applications, viewed R console.","code":""},{"path":"/reactable/reference/reactable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an interactive data table — reactable","text":"","code":"reactable(   data,   columns = NULL,   columnGroups = NULL,   rownames = NULL,   groupBy = NULL,   sortable = TRUE,   resizable = FALSE,   filterable = FALSE,   searchable = FALSE,   searchMethod = NULL,   defaultColDef = NULL,   defaultColGroup = NULL,   defaultSortOrder = \"asc\",   defaultSorted = NULL,   pagination = TRUE,   defaultPageSize = 10,   showPageSizeOptions = FALSE,   pageSizeOptions = c(10, 25, 50, 100),   paginationType = \"numbers\",   showPagination = NULL,   showPageInfo = TRUE,   minRows = 1,   paginateSubRows = FALSE,   details = NULL,   defaultExpanded = FALSE,   selection = NULL,   defaultSelected = NULL,   onClick = NULL,   highlight = FALSE,   outlined = FALSE,   bordered = FALSE,   borderless = FALSE,   striped = FALSE,   compact = FALSE,   wrap = TRUE,   showSortIcon = TRUE,   showSortable = FALSE,   class = NULL,   style = NULL,   rowClass = NULL,   rowStyle = NULL,   fullWidth = TRUE,   width = NULL,   height = NULL,   theme = getOption(\"reactable.theme\"),   language = getOption(\"reactable.language\"),   meta = NULL,   elementId = NULL,   static = getOption(\"reactable.static\", FALSE),   server = FALSE,   selectionId = NULL )"},{"path":"/reactable/reference/reactable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an interactive data table — reactable","text":"data data frame matrix. Can also crosstalk::SharedData object wraps data frame. columns Named list column definitions. See colDef(). columnGroups List column group definitions. See colGroup(). rownames Show row names? Defaults TRUE data row names. customize row names column, use \".rownames\" column name. Cells row names column automatically marked row headers assistive technologies. groupBy Character vector column names group . aggregate data rows grouped, use aggregate argument colDef(). sortable Enable sorting? Defaults TRUE. resizable Enable column resizing? filterable Enable column filtering? searchable Enable global table searching? searchMethod Custom search method use global table searching. JS() function takes array row objects, array column IDs, search value arguments, returns filtered array row objects. defaultColDef Default column definition used every column. See colDef(). defaultColGroup Default column group definition used every column group. See colGroup(). defaultSortOrder Default sort order. Either \"asc\" ascending order \"desc\" descending order. Defaults \"asc\". defaultSorted Character vector column names sort default. customize sort order, named list values \"asc\" \"desc\". pagination Enable pagination? Defaults TRUE. defaultPageSize Default page size table. Defaults 10. showPageSizeOptions Show page size options? pageSizeOptions Page size options table. Defaults 10, 25, 50, 100. paginationType Pagination control use. Either \"numbers\" page number buttons (default), \"jump\" page jump, \"simple\" show 'Previous' 'Next' buttons . showPagination Show pagination? Defaults TRUE table one page. showPageInfo Show page info? Defaults TRUE. minRows Minimum number rows show per page. Defaults 1. paginateSubRows rows grouped, paginate sub rows? Defaults FALSE. details Additional content display expanding row. R function takes row index column name arguments, JS() function takes row info object argument. Can also colDef() customize details expander column. defaultExpanded Expand rows default? selection Enable row selection? Either \"multiple\" \"single\" multiple single row selection. get selected rows Shiny, use getReactableState(). customize selection column, use \".selection\" column name. defaultSelected numeric vector default selected row indices. onClick Action take clicking cell. Either \"expand\" expand row, \"select\" select row, JS() function takes row info object, column object, table state object arguments. highlight Highlight table rows hover? outlined Add borders around table? bordered Add borders around table every cell? borderless Remove inner borders table? striped Add zebra-striping table rows? compact Make tables compact? wrap Enable text wrapping? TRUE (default), long text wrapped multiple lines. FALSE, text truncated fit one line. showSortIcon Show sort icon sorting columns? showSortable Show indicator sortable columns? class Additional CSS classes apply table. style Inline styles apply table. named list character string. Note style named list, property names camelCased. rowClass Additional CSS classes apply table rows. character string, JS() function takes row info object table state object arguments, R function takes row index argument. rowStyle Inline styles apply table rows. named list, character string, JS() function takes row info object table state object arguments, R function takes row index argument. Note rowStyle named list, property names camelCased. rowStyle JS() function, return JavaScript object camelCased property names. fullWidth Stretch table fill full width container? Defaults TRUE. width Width table pixels. Defaults \"auto\" automatic sizing. set width column, see colDef(). height Height table pixels. Defaults \"auto\" automatic sizing. theme Theme options table, specified reactableTheme(). Defaults global reactable.theme option. Can also function returns reactableTheme() NULL. language Language options table, specified reactableLang(). Defaults global reactable.language option. meta Custom metadata pass JavaScript render functions style functions. named list values can also JS() expressions functions. Custom metadata can accessed using state.meta property, updated using updateReactable() Shiny Reactable.setMeta() JavaScript API. elementId Element ID widget. static Render table static HTML? Defaults global reactable.static option. Requires V8 package, installed reactable default. static rendering, tables pre-rendered initial HTML appear immediately without flash content. Tables made interactive subsequently rendered JavaScript needed. Static rendering experimental, supported tables rendered via reactableOutput() Shiny. server Enable server-side data processing Shiny apps? Requires V8 package, installed reactable default. Server-side data processing currently experimental. selectionId Deprecated. Use getReactableState() get selected rows Shiny.","code":""},{"path":"/reactable/reference/reactable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an interactive data table — reactable","text":"reactable HTML widget can used R Markdown documents Shiny applications, viewed R console.","code":""},{"path":"/reactable/reference/reactable.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create an interactive data table — reactable","text":"See online documentation additional details examples.","code":""},{"path":[]},{"path":"/reactable/reference/reactable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an interactive data table — reactable","text":"","code":"# Basic usage reactable(iris)  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Sepal.Length\":[5.0999999999999996,4.9000000000000004,4.7000000000000002,4.5999999999999996,5,5.4000000000000004,4.5999999999999996,5,4.4000000000000004,4.9000000000000004,5.4000000000000004,4.7999999999999998,4.7999999999999998,4.2999999999999998,5.7999999999999998,5.7000000000000002,5.4000000000000004,5.0999999999999996,5.7000000000000002,5.0999999999999996,5.4000000000000004,5.0999999999999996,4.5999999999999996,5.0999999999999996,4.7999999999999998,5,5,5.2000000000000002,5.2000000000000002,4.7000000000000002,4.7999999999999998,5.4000000000000004,5.2000000000000002,5.5,4.9000000000000004,5,5.5,4.9000000000000004,4.4000000000000004,5.0999999999999996,5,4.5,4.4000000000000004,5,5.0999999999999996,4.7999999999999998,5.0999999999999996,4.5999999999999996,5.2999999999999998,5,7,6.4000000000000004,6.9000000000000004,5.5,6.5,5.7000000000000002,6.2999999999999998,4.9000000000000004,6.5999999999999996,5.2000000000000002,5,5.9000000000000004,6,6.0999999999999996,5.5999999999999996,6.7000000000000002,5.5999999999999996,5.7999999999999998,6.2000000000000002,5.5999999999999996,5.9000000000000004,6.0999999999999996,6.2999999999999998,6.0999999999999996,6.4000000000000004,6.5999999999999996,6.7999999999999998,6.7000000000000002,6,5.7000000000000002,5.5,5.5,5.7999999999999998,6,5.4000000000000004,6,6.7000000000000002,6.2999999999999998,5.5999999999999996,5.5,5.5,6.0999999999999996,5.7999999999999998,5,5.5999999999999996,5.7000000000000002,5.7000000000000002,6.2000000000000002,5.0999999999999996,5.7000000000000002,6.2999999999999998,5.7999999999999998,7.0999999999999996,6.2999999999999998,6.5,7.5999999999999996,4.9000000000000004,7.2999999999999998,6.7000000000000002,7.2000000000000002,6.5,6.4000000000000004,6.7999999999999998,5.7000000000000002,5.7999999999999998,6.4000000000000004,6.5,7.7000000000000002,7.7000000000000002,6,6.9000000000000004,5.5999999999999996,7.7000000000000002,6.2999999999999998,6.7000000000000002,7.2000000000000002,6.2000000000000002,6.0999999999999996,6.4000000000000004,7.2000000000000002,7.4000000000000004,7.9000000000000004,6.4000000000000004,6.2999999999999998,6.0999999999999996,7.7000000000000002,6.2999999999999998,6.4000000000000004,6,6.9000000000000004,6.7000000000000002,6.9000000000000004,5.7999999999999998,6.7999999999999998,6.7000000000000002,6.7000000000000002,6.2999999999999998,6.5,6.2000000000000002,5.9000000000000004],\"Sepal.Width\":[3.5,3,3.2000000000000002,3.1000000000000001,3.6000000000000001,3.8999999999999999,3.3999999999999999,3.3999999999999999,2.8999999999999999,3.1000000000000001,3.7000000000000002,3.3999999999999999,3,3,4,4.4000000000000004,3.8999999999999999,3.5,3.7999999999999998,3.7999999999999998,3.3999999999999999,3.7000000000000002,3.6000000000000001,3.2999999999999998,3.3999999999999999,3,3.3999999999999999,3.5,3.3999999999999999,3.2000000000000002,3.1000000000000001,3.3999999999999999,4.0999999999999996,4.2000000000000002,3.1000000000000001,3.2000000000000002,3.5,3.6000000000000001,3,3.3999999999999999,3.5,2.2999999999999998,3.2000000000000002,3.5,3.7999999999999998,3,3.7999999999999998,3.2000000000000002,3.7000000000000002,3.2999999999999998,3.2000000000000002,3.2000000000000002,3.1000000000000001,2.2999999999999998,2.7999999999999998,2.7999999999999998,3.2999999999999998,2.3999999999999999,2.8999999999999999,2.7000000000000002,2,3,2.2000000000000002,2.8999999999999999,2.8999999999999999,3.1000000000000001,3,2.7000000000000002,2.2000000000000002,2.5,3.2000000000000002,2.7999999999999998,2.5,2.7999999999999998,2.8999999999999999,3,2.7999999999999998,3,2.8999999999999999,2.6000000000000001,2.3999999999999999,2.3999999999999999,2.7000000000000002,2.7000000000000002,3,3.3999999999999999,3.1000000000000001,2.2999999999999998,3,2.5,2.6000000000000001,3,2.6000000000000001,2.2999999999999998,2.7000000000000002,3,2.8999999999999999,2.8999999999999999,2.5,2.7999999999999998,3.2999999999999998,2.7000000000000002,3,2.8999999999999999,3,3,2.5,2.8999999999999999,2.5,3.6000000000000001,3.2000000000000002,2.7000000000000002,3,2.5,2.7999999999999998,3.2000000000000002,3,3.7999999999999998,2.6000000000000001,2.2000000000000002,3.2000000000000002,2.7999999999999998,2.7999999999999998,2.7000000000000002,3.2999999999999998,3.2000000000000002,2.7999999999999998,3,2.7999999999999998,3,2.7999999999999998,3.7999999999999998,2.7999999999999998,2.7999999999999998,2.6000000000000001,3,3.3999999999999999,3.1000000000000001,3,3.1000000000000001,3.1000000000000001,3.1000000000000001,2.7000000000000002,3.2000000000000002,3.2999999999999998,3,2.5,3,3.3999999999999999,3],\"Petal.Length\":[1.3999999999999999,1.3999999999999999,1.3,1.5,1.3999999999999999,1.7,1.3999999999999999,1.5,1.3999999999999999,1.5,1.5,1.6000000000000001,1.3999999999999999,1.1000000000000001,1.2,1.5,1.3,1.3999999999999999,1.7,1.5,1.7,1.5,1,1.7,1.8999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.3999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.5,1.3999999999999999,1.5,1.2,1.3,1.3999999999999999,1.3,1.5,1.3,1.3,1.3,1.6000000000000001,1.8999999999999999,1.3999999999999999,1.6000000000000001,1.3999999999999999,1.5,1.3999999999999999,4.7000000000000002,4.5,4.9000000000000004,4,4.5999999999999996,4.5,4.7000000000000002,3.2999999999999998,4.5999999999999996,3.8999999999999999,3.5,4.2000000000000002,4,4.7000000000000002,3.6000000000000001,4.4000000000000004,4.5,4.0999999999999996,4.5,3.8999999999999999,4.7999999999999998,4,4.9000000000000004,4.7000000000000002,4.2999999999999998,4.4000000000000004,4.7999999999999998,5,4.5,3.5,3.7999999999999998,3.7000000000000002,3.8999999999999999,5.0999999999999996,4.5,4.5,4.7000000000000002,4.4000000000000004,4.0999999999999996,4,4.4000000000000004,4.5999999999999996,4,3.2999999999999998,4.2000000000000002,4.2000000000000002,4.2000000000000002,4.2999999999999998,3,4.0999999999999996,6,5.0999999999999996,5.9000000000000004,5.5999999999999996,5.7999999999999998,6.5999999999999996,4.5,6.2999999999999998,5.7999999999999998,6.0999999999999996,5.0999999999999996,5.2999999999999998,5.5,5,5.0999999999999996,5.2999999999999998,5.5,6.7000000000000002,6.9000000000000004,5,5.7000000000000002,4.9000000000000004,6.7000000000000002,4.9000000000000004,5.7000000000000002,6,4.7999999999999998,4.9000000000000004,5.5999999999999996,5.7999999999999998,6.0999999999999996,6.4000000000000004,5.5999999999999996,5.0999999999999996,5.5999999999999996,6.0999999999999996,5.5999999999999996,5.5,4.7999999999999998,5.4000000000000004,5.5999999999999996,5.0999999999999996,5.0999999999999996,5.9000000000000004,5.7000000000000002,5.2000000000000002,5,5.2000000000000002,5.4000000000000004,5.0999999999999996],\"Petal.Width\":[0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.10000000000000001,0.20000000000000001,0.40000000000000002,0.40000000000000002,0.29999999999999999,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.5,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.59999999999999998,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,1.3999999999999999,1.5,1.5,1.3,1.5,1.3,1.6000000000000001,1,1.3,1.3999999999999999,1,1.5,1,1.3999999999999999,1.3,1.3999999999999999,1.5,1,1.5,1.1000000000000001,1.8,1.3,1.5,1.2,1.3,1.3999999999999999,1.3999999999999999,1.7,1.5,1,1.1000000000000001,1,1.2,1.6000000000000001,1.5,1.6000000000000001,1.5,1.3,1.3,1.3,1.2,1.3999999999999999,1.2,1,1.3,1.2,1.3,1.3,1.1000000000000001,1.3,2.5,1.8999999999999999,2.1000000000000001,1.8,2.2000000000000002,2.1000000000000001,1.7,1.8,1.8,2.5,2,1.8999999999999999,2.1000000000000001,2,2.3999999999999999,2.2999999999999998,1.8,2.2000000000000002,2.2999999999999998,1.5,2.2999999999999998,2,2,1.8,2.1000000000000001,1.8,1.8,1.8,2.1000000000000001,1.6000000000000001,1.8999999999999999,2,2.2000000000000002,1.5,1.3999999999999999,2.2999999999999998,2.3999999999999999,1.8,1.8,2.1000000000000001,2.3999999999999999,2.2999999999999998,1.8999999999999999,2.2999999999999998,2.5,2.2999999999999998,1.8999999999999999,2,2.2999999999999998,1.8],\"Species\":[\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\"]},\"columns\":[{\"id\":\"Sepal.Length\",\"name\":\"Sepal.Length\",\"type\":\"numeric\"},{\"id\":\"Sepal.Width\",\"name\":\"Sepal.Width\",\"type\":\"numeric\"},{\"id\":\"Petal.Length\",\"name\":\"Petal.Length\",\"type\":\"numeric\"},{\"id\":\"Petal.Width\",\"name\":\"Petal.Width\",\"type\":\"numeric\"},{\"id\":\"Species\",\"name\":\"Species\",\"type\":\"factor\"}],\"dataKey\":\"d7e78f537dda4af331ef122927bbb6b7\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]} # Grouping and aggregation reactable(   iris,   groupBy = \"Species\",   columns = list(     Sepal.Length = colDef(aggregate = \"count\"),     Sepal.Width = colDef(aggregate = \"mean\"),     Petal.Length = colDef(aggregate = \"sum\"),     Petal.Width = colDef(aggregate = \"max\")   ) )  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Sepal.Length\":[5.0999999999999996,4.9000000000000004,4.7000000000000002,4.5999999999999996,5,5.4000000000000004,4.5999999999999996,5,4.4000000000000004,4.9000000000000004,5.4000000000000004,4.7999999999999998,4.7999999999999998,4.2999999999999998,5.7999999999999998,5.7000000000000002,5.4000000000000004,5.0999999999999996,5.7000000000000002,5.0999999999999996,5.4000000000000004,5.0999999999999996,4.5999999999999996,5.0999999999999996,4.7999999999999998,5,5,5.2000000000000002,5.2000000000000002,4.7000000000000002,4.7999999999999998,5.4000000000000004,5.2000000000000002,5.5,4.9000000000000004,5,5.5,4.9000000000000004,4.4000000000000004,5.0999999999999996,5,4.5,4.4000000000000004,5,5.0999999999999996,4.7999999999999998,5.0999999999999996,4.5999999999999996,5.2999999999999998,5,7,6.4000000000000004,6.9000000000000004,5.5,6.5,5.7000000000000002,6.2999999999999998,4.9000000000000004,6.5999999999999996,5.2000000000000002,5,5.9000000000000004,6,6.0999999999999996,5.5999999999999996,6.7000000000000002,5.5999999999999996,5.7999999999999998,6.2000000000000002,5.5999999999999996,5.9000000000000004,6.0999999999999996,6.2999999999999998,6.0999999999999996,6.4000000000000004,6.5999999999999996,6.7999999999999998,6.7000000000000002,6,5.7000000000000002,5.5,5.5,5.7999999999999998,6,5.4000000000000004,6,6.7000000000000002,6.2999999999999998,5.5999999999999996,5.5,5.5,6.0999999999999996,5.7999999999999998,5,5.5999999999999996,5.7000000000000002,5.7000000000000002,6.2000000000000002,5.0999999999999996,5.7000000000000002,6.2999999999999998,5.7999999999999998,7.0999999999999996,6.2999999999999998,6.5,7.5999999999999996,4.9000000000000004,7.2999999999999998,6.7000000000000002,7.2000000000000002,6.5,6.4000000000000004,6.7999999999999998,5.7000000000000002,5.7999999999999998,6.4000000000000004,6.5,7.7000000000000002,7.7000000000000002,6,6.9000000000000004,5.5999999999999996,7.7000000000000002,6.2999999999999998,6.7000000000000002,7.2000000000000002,6.2000000000000002,6.0999999999999996,6.4000000000000004,7.2000000000000002,7.4000000000000004,7.9000000000000004,6.4000000000000004,6.2999999999999998,6.0999999999999996,7.7000000000000002,6.2999999999999998,6.4000000000000004,6,6.9000000000000004,6.7000000000000002,6.9000000000000004,5.7999999999999998,6.7999999999999998,6.7000000000000002,6.7000000000000002,6.2999999999999998,6.5,6.2000000000000002,5.9000000000000004],\"Sepal.Width\":[3.5,3,3.2000000000000002,3.1000000000000001,3.6000000000000001,3.8999999999999999,3.3999999999999999,3.3999999999999999,2.8999999999999999,3.1000000000000001,3.7000000000000002,3.3999999999999999,3,3,4,4.4000000000000004,3.8999999999999999,3.5,3.7999999999999998,3.7999999999999998,3.3999999999999999,3.7000000000000002,3.6000000000000001,3.2999999999999998,3.3999999999999999,3,3.3999999999999999,3.5,3.3999999999999999,3.2000000000000002,3.1000000000000001,3.3999999999999999,4.0999999999999996,4.2000000000000002,3.1000000000000001,3.2000000000000002,3.5,3.6000000000000001,3,3.3999999999999999,3.5,2.2999999999999998,3.2000000000000002,3.5,3.7999999999999998,3,3.7999999999999998,3.2000000000000002,3.7000000000000002,3.2999999999999998,3.2000000000000002,3.2000000000000002,3.1000000000000001,2.2999999999999998,2.7999999999999998,2.7999999999999998,3.2999999999999998,2.3999999999999999,2.8999999999999999,2.7000000000000002,2,3,2.2000000000000002,2.8999999999999999,2.8999999999999999,3.1000000000000001,3,2.7000000000000002,2.2000000000000002,2.5,3.2000000000000002,2.7999999999999998,2.5,2.7999999999999998,2.8999999999999999,3,2.7999999999999998,3,2.8999999999999999,2.6000000000000001,2.3999999999999999,2.3999999999999999,2.7000000000000002,2.7000000000000002,3,3.3999999999999999,3.1000000000000001,2.2999999999999998,3,2.5,2.6000000000000001,3,2.6000000000000001,2.2999999999999998,2.7000000000000002,3,2.8999999999999999,2.8999999999999999,2.5,2.7999999999999998,3.2999999999999998,2.7000000000000002,3,2.8999999999999999,3,3,2.5,2.8999999999999999,2.5,3.6000000000000001,3.2000000000000002,2.7000000000000002,3,2.5,2.7999999999999998,3.2000000000000002,3,3.7999999999999998,2.6000000000000001,2.2000000000000002,3.2000000000000002,2.7999999999999998,2.7999999999999998,2.7000000000000002,3.2999999999999998,3.2000000000000002,2.7999999999999998,3,2.7999999999999998,3,2.7999999999999998,3.7999999999999998,2.7999999999999998,2.7999999999999998,2.6000000000000001,3,3.3999999999999999,3.1000000000000001,3,3.1000000000000001,3.1000000000000001,3.1000000000000001,2.7000000000000002,3.2000000000000002,3.2999999999999998,3,2.5,3,3.3999999999999999,3],\"Petal.Length\":[1.3999999999999999,1.3999999999999999,1.3,1.5,1.3999999999999999,1.7,1.3999999999999999,1.5,1.3999999999999999,1.5,1.5,1.6000000000000001,1.3999999999999999,1.1000000000000001,1.2,1.5,1.3,1.3999999999999999,1.7,1.5,1.7,1.5,1,1.7,1.8999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.3999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.5,1.3999999999999999,1.5,1.2,1.3,1.3999999999999999,1.3,1.5,1.3,1.3,1.3,1.6000000000000001,1.8999999999999999,1.3999999999999999,1.6000000000000001,1.3999999999999999,1.5,1.3999999999999999,4.7000000000000002,4.5,4.9000000000000004,4,4.5999999999999996,4.5,4.7000000000000002,3.2999999999999998,4.5999999999999996,3.8999999999999999,3.5,4.2000000000000002,4,4.7000000000000002,3.6000000000000001,4.4000000000000004,4.5,4.0999999999999996,4.5,3.8999999999999999,4.7999999999999998,4,4.9000000000000004,4.7000000000000002,4.2999999999999998,4.4000000000000004,4.7999999999999998,5,4.5,3.5,3.7999999999999998,3.7000000000000002,3.8999999999999999,5.0999999999999996,4.5,4.5,4.7000000000000002,4.4000000000000004,4.0999999999999996,4,4.4000000000000004,4.5999999999999996,4,3.2999999999999998,4.2000000000000002,4.2000000000000002,4.2000000000000002,4.2999999999999998,3,4.0999999999999996,6,5.0999999999999996,5.9000000000000004,5.5999999999999996,5.7999999999999998,6.5999999999999996,4.5,6.2999999999999998,5.7999999999999998,6.0999999999999996,5.0999999999999996,5.2999999999999998,5.5,5,5.0999999999999996,5.2999999999999998,5.5,6.7000000000000002,6.9000000000000004,5,5.7000000000000002,4.9000000000000004,6.7000000000000002,4.9000000000000004,5.7000000000000002,6,4.7999999999999998,4.9000000000000004,5.5999999999999996,5.7999999999999998,6.0999999999999996,6.4000000000000004,5.5999999999999996,5.0999999999999996,5.5999999999999996,6.0999999999999996,5.5999999999999996,5.5,4.7999999999999998,5.4000000000000004,5.5999999999999996,5.0999999999999996,5.0999999999999996,5.9000000000000004,5.7000000000000002,5.2000000000000002,5,5.2000000000000002,5.4000000000000004,5.0999999999999996],\"Petal.Width\":[0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.10000000000000001,0.20000000000000001,0.40000000000000002,0.40000000000000002,0.29999999999999999,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.5,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.59999999999999998,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,1.3999999999999999,1.5,1.5,1.3,1.5,1.3,1.6000000000000001,1,1.3,1.3999999999999999,1,1.5,1,1.3999999999999999,1.3,1.3999999999999999,1.5,1,1.5,1.1000000000000001,1.8,1.3,1.5,1.2,1.3,1.3999999999999999,1.3999999999999999,1.7,1.5,1,1.1000000000000001,1,1.2,1.6000000000000001,1.5,1.6000000000000001,1.5,1.3,1.3,1.3,1.2,1.3999999999999999,1.2,1,1.3,1.2,1.3,1.3,1.1000000000000001,1.3,2.5,1.8999999999999999,2.1000000000000001,1.8,2.2000000000000002,2.1000000000000001,1.7,1.8,1.8,2.5,2,1.8999999999999999,2.1000000000000001,2,2.3999999999999999,2.2999999999999998,1.8,2.2000000000000002,2.2999999999999998,1.5,2.2999999999999998,2,2,1.8,2.1000000000000001,1.8,1.8,1.8,2.1000000000000001,1.6000000000000001,1.8999999999999999,2,2.2000000000000002,1.5,1.3999999999999999,2.2999999999999998,2.3999999999999999,1.8,1.8,2.1000000000000001,2.3999999999999999,2.2999999999999998,1.8999999999999999,2.2999999999999998,2.5,2.2999999999999998,1.8999999999999999,2,2.2999999999999998,1.8],\"Species\":[\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\"]},\"columns\":[{\"id\":\"Sepal.Length\",\"name\":\"Sepal.Length\",\"type\":\"numeric\",\"aggregate\":\"count\"},{\"id\":\"Sepal.Width\",\"name\":\"Sepal.Width\",\"type\":\"numeric\",\"aggregate\":\"mean\"},{\"id\":\"Petal.Length\",\"name\":\"Petal.Length\",\"type\":\"numeric\",\"aggregate\":\"sum\"},{\"id\":\"Petal.Width\",\"name\":\"Petal.Width\",\"type\":\"numeric\",\"aggregate\":\"max\"},{\"id\":\"Species\",\"name\":\"Species\",\"type\":\"factor\"}],\"groupBy\":[\"Species\"],\"dataKey\":\"29a29b6d9f27c953469f3269aef42915\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]} # Row details reactable(iris, details = function(index) {   htmltools::div(     \"Details for row: \", index,     htmltools::tags$pre(paste(capture.output(iris[index, ]), collapse = \"\\n\"))   ) })  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Sepal.Length\":[5.0999999999999996,4.9000000000000004,4.7000000000000002,4.5999999999999996,5,5.4000000000000004,4.5999999999999996,5,4.4000000000000004,4.9000000000000004,5.4000000000000004,4.7999999999999998,4.7999999999999998,4.2999999999999998,5.7999999999999998,5.7000000000000002,5.4000000000000004,5.0999999999999996,5.7000000000000002,5.0999999999999996,5.4000000000000004,5.0999999999999996,4.5999999999999996,5.0999999999999996,4.7999999999999998,5,5,5.2000000000000002,5.2000000000000002,4.7000000000000002,4.7999999999999998,5.4000000000000004,5.2000000000000002,5.5,4.9000000000000004,5,5.5,4.9000000000000004,4.4000000000000004,5.0999999999999996,5,4.5,4.4000000000000004,5,5.0999999999999996,4.7999999999999998,5.0999999999999996,4.5999999999999996,5.2999999999999998,5,7,6.4000000000000004,6.9000000000000004,5.5,6.5,5.7000000000000002,6.2999999999999998,4.9000000000000004,6.5999999999999996,5.2000000000000002,5,5.9000000000000004,6,6.0999999999999996,5.5999999999999996,6.7000000000000002,5.5999999999999996,5.7999999999999998,6.2000000000000002,5.5999999999999996,5.9000000000000004,6.0999999999999996,6.2999999999999998,6.0999999999999996,6.4000000000000004,6.5999999999999996,6.7999999999999998,6.7000000000000002,6,5.7000000000000002,5.5,5.5,5.7999999999999998,6,5.4000000000000004,6,6.7000000000000002,6.2999999999999998,5.5999999999999996,5.5,5.5,6.0999999999999996,5.7999999999999998,5,5.5999999999999996,5.7000000000000002,5.7000000000000002,6.2000000000000002,5.0999999999999996,5.7000000000000002,6.2999999999999998,5.7999999999999998,7.0999999999999996,6.2999999999999998,6.5,7.5999999999999996,4.9000000000000004,7.2999999999999998,6.7000000000000002,7.2000000000000002,6.5,6.4000000000000004,6.7999999999999998,5.7000000000000002,5.7999999999999998,6.4000000000000004,6.5,7.7000000000000002,7.7000000000000002,6,6.9000000000000004,5.5999999999999996,7.7000000000000002,6.2999999999999998,6.7000000000000002,7.2000000000000002,6.2000000000000002,6.0999999999999996,6.4000000000000004,7.2000000000000002,7.4000000000000004,7.9000000000000004,6.4000000000000004,6.2999999999999998,6.0999999999999996,7.7000000000000002,6.2999999999999998,6.4000000000000004,6,6.9000000000000004,6.7000000000000002,6.9000000000000004,5.7999999999999998,6.7999999999999998,6.7000000000000002,6.7000000000000002,6.2999999999999998,6.5,6.2000000000000002,5.9000000000000004],\"Sepal.Width\":[3.5,3,3.2000000000000002,3.1000000000000001,3.6000000000000001,3.8999999999999999,3.3999999999999999,3.3999999999999999,2.8999999999999999,3.1000000000000001,3.7000000000000002,3.3999999999999999,3,3,4,4.4000000000000004,3.8999999999999999,3.5,3.7999999999999998,3.7999999999999998,3.3999999999999999,3.7000000000000002,3.6000000000000001,3.2999999999999998,3.3999999999999999,3,3.3999999999999999,3.5,3.3999999999999999,3.2000000000000002,3.1000000000000001,3.3999999999999999,4.0999999999999996,4.2000000000000002,3.1000000000000001,3.2000000000000002,3.5,3.6000000000000001,3,3.3999999999999999,3.5,2.2999999999999998,3.2000000000000002,3.5,3.7999999999999998,3,3.7999999999999998,3.2000000000000002,3.7000000000000002,3.2999999999999998,3.2000000000000002,3.2000000000000002,3.1000000000000001,2.2999999999999998,2.7999999999999998,2.7999999999999998,3.2999999999999998,2.3999999999999999,2.8999999999999999,2.7000000000000002,2,3,2.2000000000000002,2.8999999999999999,2.8999999999999999,3.1000000000000001,3,2.7000000000000002,2.2000000000000002,2.5,3.2000000000000002,2.7999999999999998,2.5,2.7999999999999998,2.8999999999999999,3,2.7999999999999998,3,2.8999999999999999,2.6000000000000001,2.3999999999999999,2.3999999999999999,2.7000000000000002,2.7000000000000002,3,3.3999999999999999,3.1000000000000001,2.2999999999999998,3,2.5,2.6000000000000001,3,2.6000000000000001,2.2999999999999998,2.7000000000000002,3,2.8999999999999999,2.8999999999999999,2.5,2.7999999999999998,3.2999999999999998,2.7000000000000002,3,2.8999999999999999,3,3,2.5,2.8999999999999999,2.5,3.6000000000000001,3.2000000000000002,2.7000000000000002,3,2.5,2.7999999999999998,3.2000000000000002,3,3.7999999999999998,2.6000000000000001,2.2000000000000002,3.2000000000000002,2.7999999999999998,2.7999999999999998,2.7000000000000002,3.2999999999999998,3.2000000000000002,2.7999999999999998,3,2.7999999999999998,3,2.7999999999999998,3.7999999999999998,2.7999999999999998,2.7999999999999998,2.6000000000000001,3,3.3999999999999999,3.1000000000000001,3,3.1000000000000001,3.1000000000000001,3.1000000000000001,2.7000000000000002,3.2000000000000002,3.2999999999999998,3,2.5,3,3.3999999999999999,3],\"Petal.Length\":[1.3999999999999999,1.3999999999999999,1.3,1.5,1.3999999999999999,1.7,1.3999999999999999,1.5,1.3999999999999999,1.5,1.5,1.6000000000000001,1.3999999999999999,1.1000000000000001,1.2,1.5,1.3,1.3999999999999999,1.7,1.5,1.7,1.5,1,1.7,1.8999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.3999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.5,1.3999999999999999,1.5,1.2,1.3,1.3999999999999999,1.3,1.5,1.3,1.3,1.3,1.6000000000000001,1.8999999999999999,1.3999999999999999,1.6000000000000001,1.3999999999999999,1.5,1.3999999999999999,4.7000000000000002,4.5,4.9000000000000004,4,4.5999999999999996,4.5,4.7000000000000002,3.2999999999999998,4.5999999999999996,3.8999999999999999,3.5,4.2000000000000002,4,4.7000000000000002,3.6000000000000001,4.4000000000000004,4.5,4.0999999999999996,4.5,3.8999999999999999,4.7999999999999998,4,4.9000000000000004,4.7000000000000002,4.2999999999999998,4.4000000000000004,4.7999999999999998,5,4.5,3.5,3.7999999999999998,3.7000000000000002,3.8999999999999999,5.0999999999999996,4.5,4.5,4.7000000000000002,4.4000000000000004,4.0999999999999996,4,4.4000000000000004,4.5999999999999996,4,3.2999999999999998,4.2000000000000002,4.2000000000000002,4.2000000000000002,4.2999999999999998,3,4.0999999999999996,6,5.0999999999999996,5.9000000000000004,5.5999999999999996,5.7999999999999998,6.5999999999999996,4.5,6.2999999999999998,5.7999999999999998,6.0999999999999996,5.0999999999999996,5.2999999999999998,5.5,5,5.0999999999999996,5.2999999999999998,5.5,6.7000000000000002,6.9000000000000004,5,5.7000000000000002,4.9000000000000004,6.7000000000000002,4.9000000000000004,5.7000000000000002,6,4.7999999999999998,4.9000000000000004,5.5999999999999996,5.7999999999999998,6.0999999999999996,6.4000000000000004,5.5999999999999996,5.0999999999999996,5.5999999999999996,6.0999999999999996,5.5999999999999996,5.5,4.7999999999999998,5.4000000000000004,5.5999999999999996,5.0999999999999996,5.0999999999999996,5.9000000000000004,5.7000000000000002,5.2000000000000002,5,5.2000000000000002,5.4000000000000004,5.0999999999999996],\"Petal.Width\":[0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.10000000000000001,0.20000000000000001,0.40000000000000002,0.40000000000000002,0.29999999999999999,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.5,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.59999999999999998,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,1.3999999999999999,1.5,1.5,1.3,1.5,1.3,1.6000000000000001,1,1.3,1.3999999999999999,1,1.5,1,1.3999999999999999,1.3,1.3999999999999999,1.5,1,1.5,1.1000000000000001,1.8,1.3,1.5,1.2,1.3,1.3999999999999999,1.3999999999999999,1.7,1.5,1,1.1000000000000001,1,1.2,1.6000000000000001,1.5,1.6000000000000001,1.5,1.3,1.3,1.3,1.2,1.3999999999999999,1.2,1,1.3,1.2,1.3,1.3,1.1000000000000001,1.3,2.5,1.8999999999999999,2.1000000000000001,1.8,2.2000000000000002,2.1000000000000001,1.7,1.8,1.8,2.5,2,1.8999999999999999,2.1000000000000001,2,2.3999999999999999,2.2999999999999998,1.8,2.2000000000000002,2.2999999999999998,1.5,2.2999999999999998,2,2,1.8,2.1000000000000001,1.8,1.8,1.8,2.1000000000000001,1.6000000000000001,1.8999999999999999,2,2.2000000000000002,1.5,1.3999999999999999,2.2999999999999998,2.3999999999999999,1.8,1.8,2.1000000000000001,2.3999999999999999,2.2999999999999998,1.8999999999999999,2.2999999999999998,2.5,2.2999999999999998,1.8999999999999999,2,2.2999999999999998,1.8],\"Species\":[\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\",\"virginica\"]},\"columns\":[{\"id\":\".details\",\"name\":\"\",\"type\":null,\"sortable\":false,\"resizable\":false,\"filterable\":false,\"searchable\":false,\"width\":45,\"align\":\"center\",\"details\":[{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"1\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n1          5.1         3.5          1.4         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"2\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n2          4.9           3          1.4         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"3\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n3          4.7         3.2          1.3         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"4\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n4          4.6         3.1          1.5         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"5\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n5            5         3.6          1.4         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"6\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n6          5.4         3.9          1.7         0.4  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"7\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n7          4.6         3.4          1.4         0.3  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"8\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n8            5         3.4          1.5         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"9\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n9          4.4         2.9          1.4         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"10\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n10          4.9         3.1          1.5         0.1  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"11\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n11          5.4         3.7          1.5         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"12\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n12          4.8         3.4          1.6         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"13\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n13          4.8           3          1.4         0.1  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"14\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n14          4.3           3          1.1         0.1  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"15\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n15          5.8           4          1.2         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"16\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n16          5.7         4.4          1.5         0.4  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"17\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n17          5.4         3.9          1.3         0.4  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"18\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n18          5.1         3.5          1.4         0.3  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"19\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n19          5.7         3.8          1.7         0.3  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"20\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n20          5.1         3.8          1.5         0.3  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"21\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n21          5.4         3.4          1.7         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"22\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n22          5.1         3.7          1.5         0.4  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"23\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n23          4.6         3.6            1         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"24\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n24          5.1         3.3          1.7         0.5  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"25\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n25          4.8         3.4          1.9         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"26\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n26            5           3          1.6         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"27\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n27            5         3.4          1.6         0.4  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"28\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n28          5.2         3.5          1.5         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"29\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n29          5.2         3.4          1.4         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"30\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n30          4.7         3.2          1.6         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"31\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n31          4.8         3.1          1.6         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"32\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n32          5.4         3.4          1.5         0.4  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"33\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n33          5.2         4.1          1.5         0.1  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"34\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n34          5.5         4.2          1.4         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"35\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n35          4.9         3.1          1.5         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"36\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n36            5         3.2          1.2         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"37\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n37          5.5         3.5          1.3         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"38\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n38          4.9         3.6          1.4         0.1  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"39\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n39          4.4           3          1.3         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"40\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n40          5.1         3.4          1.5         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"41\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n41            5         3.5          1.3         0.3  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"42\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n42          4.5         2.3          1.3         0.3  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"43\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n43          4.4         3.2          1.3         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"44\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n44            5         3.5          1.6         0.6  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"45\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n45          5.1         3.8          1.9         0.4  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"46\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n46          4.8           3          1.4         0.3  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"47\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n47          5.1         3.8          1.6         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"48\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n48          4.6         3.2          1.4         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"49\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n49          5.3         3.7          1.5         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"50\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\\n50            5         3.3          1.4         0.2  setosa\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"51\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n51            7         3.2          4.7         1.4 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"52\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n52          6.4         3.2          4.5         1.5 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"53\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n53          6.9         3.1          4.9         1.5 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"54\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n54          5.5         2.3            4         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"55\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n55          6.5         2.8          4.6         1.5 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"56\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n56          5.7         2.8          4.5         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"57\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n57          6.3         3.3          4.7         1.6 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"58\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n58          4.9         2.4          3.3           1 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"59\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n59          6.6         2.9          4.6         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"60\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n60          5.2         2.7          3.9         1.4 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"61\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n61            5           2          3.5           1 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"62\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n62          5.9           3          4.2         1.5 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"63\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n63            6         2.2            4           1 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"64\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n64          6.1         2.9          4.7         1.4 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"65\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n65          5.6         2.9          3.6         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"66\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n66          6.7         3.1          4.4         1.4 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"67\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n67          5.6           3          4.5         1.5 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"68\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n68          5.8         2.7          4.1           1 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"69\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n69          6.2         2.2          4.5         1.5 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"70\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n70          5.6         2.5          3.9         1.1 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"71\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n71          5.9         3.2          4.8         1.8 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"72\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n72          6.1         2.8            4         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"73\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n73          6.3         2.5          4.9         1.5 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"74\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n74          6.1         2.8          4.7         1.2 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"75\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n75          6.4         2.9          4.3         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"76\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n76          6.6           3          4.4         1.4 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"77\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n77          6.8         2.8          4.8         1.4 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"78\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n78          6.7           3            5         1.7 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"79\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n79            6         2.9          4.5         1.5 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"80\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n80          5.7         2.6          3.5           1 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"81\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n81          5.5         2.4          3.8         1.1 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"82\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n82          5.5         2.4          3.7           1 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"83\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n83          5.8         2.7          3.9         1.2 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"84\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n84            6         2.7          5.1         1.6 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"85\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n85          5.4           3          4.5         1.5 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"86\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n86            6         3.4          4.5         1.6 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"87\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n87          6.7         3.1          4.7         1.5 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"88\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n88          6.3         2.3          4.4         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"89\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n89          5.6           3          4.1         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"90\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n90          5.5         2.5            4         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"91\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n91          5.5         2.6          4.4         1.2 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"92\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n92          6.1           3          4.6         1.4 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"93\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n93          5.8         2.6            4         1.2 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"94\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n94            5         2.3          3.3           1 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"95\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n95          5.6         2.7          4.2         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"96\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n96          5.7           3          4.2         1.2 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"97\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n97          5.7         2.9          4.2         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"98\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n98          6.2         2.9          4.3         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"99\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n99          5.1         2.5            3         1.1 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"100\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\\n100          5.7         2.8          4.1         1.3 versicolor\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"101\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n101          6.3         3.3            6         2.5 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"102\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n102          5.8         2.7          5.1         1.9 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"103\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n103          7.1           3          5.9         2.1 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"104\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n104          6.3         2.9          5.6         1.8 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"105\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n105          6.5           3          5.8         2.2 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"106\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n106          7.6           3          6.6         2.1 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"107\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n107          4.9         2.5          4.5         1.7 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"108\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n108          7.3         2.9          6.3         1.8 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"109\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n109          6.7         2.5          5.8         1.8 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"110\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n110          7.2         3.6          6.1         2.5 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"111\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n111          6.5         3.2          5.1           2 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"112\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n112          6.4         2.7          5.3         1.9 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"113\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n113          6.8           3          5.5         2.1 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"114\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n114          5.7         2.5            5           2 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"115\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n115          5.8         2.8          5.1         2.4 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"116\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n116          6.4         3.2          5.3         2.3 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"117\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n117          6.5           3          5.5         1.8 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"118\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n118          7.7         3.8          6.7         2.2 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"119\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n119          7.7         2.6          6.9         2.3 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"120\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n120            6         2.2            5         1.5 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"121\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n121          6.9         3.2          5.7         2.3 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"122\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n122          5.6         2.8          4.9           2 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"123\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n123          7.7         2.8          6.7           2 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"124\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n124          6.3         2.7          4.9         1.8 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"125\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n125          6.7         3.3          5.7         2.1 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"126\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n126          7.2         3.2            6         1.8 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"127\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n127          6.2         2.8          4.8         1.8 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"128\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n128          6.1           3          4.9         1.8 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"129\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n129          6.4         2.8          5.6         2.1 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"130\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n130          7.2           3          5.8         1.6 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"131\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n131          7.4         2.8          6.1         1.9 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"132\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n132          7.9         3.8          6.4           2 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"133\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n133          6.4         2.8          5.6         2.2 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"134\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n134          6.3         2.8          5.1         1.5 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"135\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n135          6.1         2.6          5.6         1.4 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"136\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n136          7.7           3          6.1         2.3 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"137\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n137          6.3         3.4          5.6         2.4 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"138\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n138          6.4         3.1          5.5         1.8 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"139\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n139            6           3          4.8         1.8 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"140\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n140          6.9         3.1          5.4         2.1 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"141\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n141          6.7         3.1          5.6         2.4 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"142\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n142          6.9         3.1          5.1         2.3 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"143\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n143          5.8         2.7          5.1         1.9 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"144\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n144          6.8         3.2          5.9         2.3 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"145\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n145          6.7         3.3          5.7         2.5 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"146\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n146          6.7           3          5.2         2.3 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"147\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n147          6.3         2.5            5         1.9 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"148\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n148          6.5           3          5.2           2 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"149\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n149          6.2         3.4          5.4         2.3 virginica\"]}]},{\"name\":\"div\",\"attribs\":{},\"children\":[\"Details for row: \",\"150\",{\"name\":\"pre\",\"attribs\":{},\"children\":[\"    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\\n150          5.9           3          5.1         1.8 virginica\"]}]}]},{\"id\":\"Sepal.Length\",\"name\":\"Sepal.Length\",\"type\":\"numeric\"},{\"id\":\"Sepal.Width\",\"name\":\"Sepal.Width\",\"type\":\"numeric\"},{\"id\":\"Petal.Length\",\"name\":\"Petal.Length\",\"type\":\"numeric\"},{\"id\":\"Petal.Width\",\"name\":\"Petal.Width\",\"type\":\"numeric\"},{\"id\":\"Species\",\"name\":\"Species\",\"type\":\"factor\"}],\"dataKey\":\"970e522024ae404f5f18e24adcc3a359\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]} # Conditional styling reactable(sleep, columns = list(   extra = colDef(style = function(value) {     if (value > 0) {       color <- \"green\"     } else if (value < 0) {       color <- \"red\"     } else {       color <- \"#777\"     }     list(color = color, fontWeight = \"bold\")   }) ))  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"extra\":[0.69999999999999996,-1.6000000000000001,-0.20000000000000001,-1.2,-0.10000000000000001,3.3999999999999999,3.7000000000000002,0.80000000000000004,0,2,1.8999999999999999,0.80000000000000004,1.1000000000000001,0.10000000000000001,-0.10000000000000001,4.4000000000000004,5.5,1.6000000000000001,4.5999999999999996,3.3999999999999999],\"group\":[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"2\",\"2\",\"2\",\"2\",\"2\",\"2\"],\"ID\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]},\"columns\":[{\"id\":\"extra\",\"name\":\"extra\",\"type\":\"numeric\",\"style\":[{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"red\",\"fontWeight\":\"bold\"},{\"color\":\"red\",\"fontWeight\":\"bold\"},{\"color\":\"red\",\"fontWeight\":\"bold\"},{\"color\":\"red\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"#777\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"red\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"},{\"color\":\"green\",\"fontWeight\":\"bold\"}]},{\"id\":\"group\",\"name\":\"group\",\"type\":\"factor\"},{\"id\":\"ID\",\"name\":\"ID\",\"type\":\"factor\"}],\"dataKey\":\"29947dfe9fa77ba347a2670469a01943\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reactable/reference/reactableLang.html","id":null,"dir":"Reference","previous_headings":"","what":"Language options — reactableLang","title":"Language options — reactableLang","text":"Use reactableLang() customize language strings table. Language strings include visible text accessible labels can read assistive technology, screen readers. set default language strings tables, use global reactable.language option.","code":""},{"path":"/reactable/reference/reactableLang.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Language options — reactableLang","text":"","code":"reactableLang(   sortLabel = \"Sort {name}\",   filterPlaceholder = \"\",   filterLabel = \"Filter {name}\",   searchPlaceholder = \"Search\",   searchLabel = \"Search\",   noData = \"No rows found\",   pageNext = \"Next\",   pagePrevious = \"Previous\",   pageNumbers = \"{page} of {pages}\",   pageInfo = \"{rowStart}\\u2013{rowEnd} of {rows} rows\",   pageSizeOptions = \"Show {rows}\",   pageNextLabel = \"Next page\",   pagePreviousLabel = \"Previous page\",   pageNumberLabel = \"Page {page}\",   pageJumpLabel = \"Go to page\",   pageSizeOptionsLabel = \"Rows per page\",   groupExpandLabel = \"Toggle group\",   detailsExpandLabel = \"Toggle details\",   selectAllRowsLabel = \"Select all rows\",   selectAllSubRowsLabel = \"Select all rows in group\",   selectRowLabel = \"Select row\",   defaultGroupHeader = NULL,   detailsCollapseLabel = NULL,   deselectAllRowsLabel = NULL,   deselectAllSubRowsLabel = NULL,   deselectRowLabel = NULL )"},{"path":"/reactable/reference/reactableLang.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Language options — reactableLang","text":"sortLabel Accessible label column sort buttons. Takes {name} parameter column name. filterPlaceholder Placeholder column filter inputs. filterLabel Accessible label column filter inputs. Takes {name} parameter column name. searchPlaceholder Placeholder table search input. searchLabel Accessible label table search input. noData Placeholder text table data. pageNext Text next page button. pagePrevious Text previous page button. pageNumbers Text page numbers info. used \"jump\" \"simple\" pagination types. Takes following parameters: {page} current page {pages} total number pages pageInfo Text page info. Takes following parameters: {rowStart} starting row page {rowEnd} ending row page {rows} total number rows pageSizeOptions Text page size options input. Takes {rows} parameter page size options input. pageNextLabel Accessible label next page button. pagePreviousLabel Accessible label previous page button. pageNumberLabel Accessible label page number buttons. used \"numbers\" pagination type. Takes {page} parameter page number. pageJumpLabel Accessible label page jump input. used \"jump\" pagination type. pageSizeOptionsLabel Accessible label page size options input. groupExpandLabel Accessible label row group expand button. detailsExpandLabel Accessible label row details expand button. selectAllRowsLabel Accessible label select rows checkbox. selectAllSubRowsLabel Accessible label select sub rows checkbox. selectRowLabel Accessible label select row checkbox. defaultGroupHeader Deprecated longer used. detailsCollapseLabel Deprecated longer used. deselectAllRowsLabel Deprecated longer used. deselectAllSubRowsLabel Deprecated longer used. deselectRowLabel Deprecated longer used.","code":""},{"path":"/reactable/reference/reactableLang.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Language options — reactableLang","text":"language options object can used customize language strings reactable().","code":""},{"path":"/reactable/reference/reactableLang.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Language options — reactableLang","text":"","code":"reactable(   iris[1:30, ],   searchable = TRUE,   paginationType = \"simple\",   language = reactableLang(     searchPlaceholder = \"Search...\",     noData = \"No entries found\",     pageInfo = \"{rowStart}\\u2013{rowEnd} of {rows} entries\",     pagePrevious = \"\\u276e\",     pageNext = \"\\u276f\",      # Accessible labels for assistive technology, such as screen readers     pagePreviousLabel = \"Previous page\",     pageNextLabel = \"Next page\"   ) )  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Sepal.Length\":[5.0999999999999996,4.9000000000000004,4.7000000000000002,4.5999999999999996,5,5.4000000000000004,4.5999999999999996,5,4.4000000000000004,4.9000000000000004,5.4000000000000004,4.7999999999999998,4.7999999999999998,4.2999999999999998,5.7999999999999998,5.7000000000000002,5.4000000000000004,5.0999999999999996,5.7000000000000002,5.0999999999999996,5.4000000000000004,5.0999999999999996,4.5999999999999996,5.0999999999999996,4.7999999999999998,5,5,5.2000000000000002,5.2000000000000002,4.7000000000000002],\"Sepal.Width\":[3.5,3,3.2000000000000002,3.1000000000000001,3.6000000000000001,3.8999999999999999,3.3999999999999999,3.3999999999999999,2.8999999999999999,3.1000000000000001,3.7000000000000002,3.3999999999999999,3,3,4,4.4000000000000004,3.8999999999999999,3.5,3.7999999999999998,3.7999999999999998,3.3999999999999999,3.7000000000000002,3.6000000000000001,3.2999999999999998,3.3999999999999999,3,3.3999999999999999,3.5,3.3999999999999999,3.2000000000000002],\"Petal.Length\":[1.3999999999999999,1.3999999999999999,1.3,1.5,1.3999999999999999,1.7,1.3999999999999999,1.5,1.3999999999999999,1.5,1.5,1.6000000000000001,1.3999999999999999,1.1000000000000001,1.2,1.5,1.3,1.3999999999999999,1.7,1.5,1.7,1.5,1,1.7,1.8999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.3999999999999999,1.6000000000000001],\"Petal.Width\":[0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.10000000000000001,0.20000000000000001,0.40000000000000002,0.40000000000000002,0.29999999999999999,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.5,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.20000000000000001,0.20000000000000001],\"Species\":[\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\"]},\"columns\":[{\"id\":\"Sepal.Length\",\"name\":\"Sepal.Length\",\"type\":\"numeric\"},{\"id\":\"Sepal.Width\",\"name\":\"Sepal.Width\",\"type\":\"numeric\"},{\"id\":\"Petal.Length\",\"name\":\"Petal.Length\",\"type\":\"numeric\"},{\"id\":\"Petal.Width\",\"name\":\"Petal.Width\",\"type\":\"numeric\"},{\"id\":\"Species\",\"name\":\"Species\",\"type\":\"factor\"}],\"searchable\":true,\"paginationType\":\"simple\",\"language\":{\"searchPlaceholder\":\"Search...\",\"noData\":\"No entries found\",\"pageNext\":\"❯\",\"pagePrevious\":\"❮\",\"pageInfo\":\"{rowStart}–{rowEnd} of {rows} entries\",\"pageNextLabel\":\"Next page\",\"pagePreviousLabel\":\"Previous page\"},\"dataKey\":\"58874e600beae978ba2aab8360876447\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]} # Set the default language for all tables options(reactable.language = reactableLang(   searchPlaceholder = \"Search...\",   noData = \"No entries found\",   pageInfo = \"{rowStart} to {rowEnd} of {rows} entries\" ))  reactable(iris[1:30, ], searchable = TRUE)  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Sepal.Length\":[5.0999999999999996,4.9000000000000004,4.7000000000000002,4.5999999999999996,5,5.4000000000000004,4.5999999999999996,5,4.4000000000000004,4.9000000000000004,5.4000000000000004,4.7999999999999998,4.7999999999999998,4.2999999999999998,5.7999999999999998,5.7000000000000002,5.4000000000000004,5.0999999999999996,5.7000000000000002,5.0999999999999996,5.4000000000000004,5.0999999999999996,4.5999999999999996,5.0999999999999996,4.7999999999999998,5,5,5.2000000000000002,5.2000000000000002,4.7000000000000002],\"Sepal.Width\":[3.5,3,3.2000000000000002,3.1000000000000001,3.6000000000000001,3.8999999999999999,3.3999999999999999,3.3999999999999999,2.8999999999999999,3.1000000000000001,3.7000000000000002,3.3999999999999999,3,3,4,4.4000000000000004,3.8999999999999999,3.5,3.7999999999999998,3.7999999999999998,3.3999999999999999,3.7000000000000002,3.6000000000000001,3.2999999999999998,3.3999999999999999,3,3.3999999999999999,3.5,3.3999999999999999,3.2000000000000002],\"Petal.Length\":[1.3999999999999999,1.3999999999999999,1.3,1.5,1.3999999999999999,1.7,1.3999999999999999,1.5,1.3999999999999999,1.5,1.5,1.6000000000000001,1.3999999999999999,1.1000000000000001,1.2,1.5,1.3,1.3999999999999999,1.7,1.5,1.7,1.5,1,1.7,1.8999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.3999999999999999,1.6000000000000001],\"Petal.Width\":[0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.10000000000000001,0.20000000000000001,0.40000000000000002,0.40000000000000002,0.29999999999999999,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.5,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.20000000000000001,0.20000000000000001],\"Species\":[\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\"]},\"columns\":[{\"id\":\"Sepal.Length\",\"name\":\"Sepal.Length\",\"type\":\"numeric\"},{\"id\":\"Sepal.Width\",\"name\":\"Sepal.Width\",\"type\":\"numeric\"},{\"id\":\"Petal.Length\",\"name\":\"Petal.Length\",\"type\":\"numeric\"},{\"id\":\"Petal.Width\",\"name\":\"Petal.Width\",\"type\":\"numeric\"},{\"id\":\"Species\",\"name\":\"Species\",\"type\":\"factor\"}],\"searchable\":true,\"language\":{\"searchPlaceholder\":\"Search...\",\"noData\":\"No entries found\",\"pageInfo\":\"{rowStart} to {rowEnd} of {rows} entries\"},\"dataKey\":\"58874e600beae978ba2aab8360876447\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reactable/reference/reactableTheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme options — reactableTheme","title":"Theme options — reactableTheme","text":"Use reactableTheme() customize default styling table. can set theme variables change default styles, add custom CSS specific elements table. color variables specified character strings CSS color values. width padding variables specified either character strings CSS width padding values, numeric pixel values. style arguments take custom CSS named lists camelCased properties. set default theme tables, use global reactable.theme option.","code":""},{"path":"/reactable/reference/reactableTheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme options — reactableTheme","text":"","code":"reactableTheme(   color = NULL,   backgroundColor = NULL,   borderColor = NULL,   borderWidth = NULL,   stripedColor = NULL,   highlightColor = NULL,   cellPadding = NULL,   style = NULL,   tableStyle = NULL,   headerStyle = NULL,   groupHeaderStyle = NULL,   tableBodyStyle = NULL,   rowGroupStyle = NULL,   rowStyle = NULL,   rowStripedStyle = NULL,   rowHighlightStyle = NULL,   rowSelectedStyle = NULL,   cellStyle = NULL,   footerStyle = NULL,   inputStyle = NULL,   filterInputStyle = NULL,   searchInputStyle = NULL,   selectStyle = NULL,   paginationStyle = NULL,   pageButtonStyle = NULL,   pageButtonHoverStyle = NULL,   pageButtonActiveStyle = NULL,   pageButtonCurrentStyle = NULL )"},{"path":"/reactable/reference/reactableTheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme options — reactableTheme","text":"color Default text color. backgroundColor Default background color. borderColor Default border color. borderWidth Default border width. stripedColor Default row stripe color. highlightColor Default row highlight color. cellPadding Default cell padding. style Additional CSS table. tableStyle Additional CSS table element (excludes pagination bar search input). headerStyle Additional CSS header cells. groupHeaderStyle Additional CSS group header cells. tableBodyStyle Additional CSS table body element. rowGroupStyle Additional CSS row groups. rowStyle Additional CSS rows. rowStripedStyle Additional CSS striped rows. rowHighlightStyle Additional CSS highlighted rows. rowSelectedStyle Additional CSS selected rows. cellStyle Additional CSS cells. footerStyle Additional CSS footer cells. inputStyle Additional CSS inputs. filterInputStyle Additional CSS filter inputs. searchInputStyle Additional CSS search input. selectStyle Additional CSS table select controls. paginationStyle Additional CSS pagination bar. pageButtonStyle, pageButtonHoverStyle, pageButtonActiveStyle, pageButtonCurrentStyle Additional CSS page buttons, page buttons hover active states, current page button.","code":""},{"path":"/reactable/reference/reactableTheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme options — reactableTheme","text":"theme options object can used customize default styling reactable().","code":""},{"path":"/reactable/reference/reactableTheme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Theme options — reactableTheme","text":"can use nested CSS selectors style arguments target current element, using & selector, child elements (just like Sass). useful adding pseudo-classes like &:hover, adding styles certain context like .outer-container &.","code":""},{"path":"/reactable/reference/reactableTheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme options — reactableTheme","text":"","code":"reactable(   iris[1:30, ],   searchable = TRUE,   striped = TRUE,   highlight = TRUE,   bordered = TRUE,   theme = reactableTheme(     borderColor = \"#dfe2e5\",     stripedColor = \"#f6f8fa\",     highlightColor = \"#f0f5f9\",     cellPadding = \"8px 12px\",     style = list(       fontFamily = \"-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif\"     ),     searchInputStyle = list(width = \"100%\")   ) )  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Sepal.Length\":[5.0999999999999996,4.9000000000000004,4.7000000000000002,4.5999999999999996,5,5.4000000000000004,4.5999999999999996,5,4.4000000000000004,4.9000000000000004,5.4000000000000004,4.7999999999999998,4.7999999999999998,4.2999999999999998,5.7999999999999998,5.7000000000000002,5.4000000000000004,5.0999999999999996,5.7000000000000002,5.0999999999999996,5.4000000000000004,5.0999999999999996,4.5999999999999996,5.0999999999999996,4.7999999999999998,5,5,5.2000000000000002,5.2000000000000002,4.7000000000000002],\"Sepal.Width\":[3.5,3,3.2000000000000002,3.1000000000000001,3.6000000000000001,3.8999999999999999,3.3999999999999999,3.3999999999999999,2.8999999999999999,3.1000000000000001,3.7000000000000002,3.3999999999999999,3,3,4,4.4000000000000004,3.8999999999999999,3.5,3.7999999999999998,3.7999999999999998,3.3999999999999999,3.7000000000000002,3.6000000000000001,3.2999999999999998,3.3999999999999999,3,3.3999999999999999,3.5,3.3999999999999999,3.2000000000000002],\"Petal.Length\":[1.3999999999999999,1.3999999999999999,1.3,1.5,1.3999999999999999,1.7,1.3999999999999999,1.5,1.3999999999999999,1.5,1.5,1.6000000000000001,1.3999999999999999,1.1000000000000001,1.2,1.5,1.3,1.3999999999999999,1.7,1.5,1.7,1.5,1,1.7,1.8999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.3999999999999999,1.6000000000000001],\"Petal.Width\":[0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.10000000000000001,0.20000000000000001,0.40000000000000002,0.40000000000000002,0.29999999999999999,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.5,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.20000000000000001,0.20000000000000001],\"Species\":[\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\"]},\"columns\":[{\"id\":\"Sepal.Length\",\"name\":\"Sepal.Length\",\"type\":\"numeric\"},{\"id\":\"Sepal.Width\",\"name\":\"Sepal.Width\",\"type\":\"numeric\"},{\"id\":\"Petal.Length\",\"name\":\"Petal.Length\",\"type\":\"numeric\"},{\"id\":\"Petal.Width\",\"name\":\"Petal.Width\",\"type\":\"numeric\"},{\"id\":\"Species\",\"name\":\"Species\",\"type\":\"factor\"}],\"searchable\":true,\"highlight\":true,\"bordered\":true,\"striped\":true,\"theme\":{\"borderColor\":\"#dfe2e5\",\"stripedColor\":\"#f6f8fa\",\"highlightColor\":\"#f0f5f9\",\"cellPadding\":\"8px 12px\",\"style\":{\"fontFamily\":\"-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif\"},\"searchInputStyle\":{\"width\":\"100%\"}},\"language\":{\"searchPlaceholder\":\"Search...\",\"noData\":\"No entries found\",\"pageInfo\":\"{rowStart} to {rowEnd} of {rows} entries\"},\"dataKey\":\"58874e600beae978ba2aab8360876447\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]} # Set the default theme for all tables options(reactable.theme = reactableTheme(   color = \"hsl(233, 9%, 87%)\",   backgroundColor = \"hsl(233, 9%, 19%)\",   borderColor = \"hsl(233, 9%, 22%)\",   stripedColor = \"hsl(233, 12%, 22%)\",   highlightColor = \"hsl(233, 12%, 24%)\",   inputStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),   selectStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),   pageButtonHoverStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),   pageButtonActiveStyle = list(backgroundColor = \"hsl(233, 9%, 28%)\") ))  reactable(   iris[1:30, ],   filterable = TRUE,   showPageSizeOptions = TRUE,   striped = TRUE,   highlight = TRUE,   details = function(index) paste(\"Details for row\", index) )  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Sepal.Length\":[5.0999999999999996,4.9000000000000004,4.7000000000000002,4.5999999999999996,5,5.4000000000000004,4.5999999999999996,5,4.4000000000000004,4.9000000000000004,5.4000000000000004,4.7999999999999998,4.7999999999999998,4.2999999999999998,5.7999999999999998,5.7000000000000002,5.4000000000000004,5.0999999999999996,5.7000000000000002,5.0999999999999996,5.4000000000000004,5.0999999999999996,4.5999999999999996,5.0999999999999996,4.7999999999999998,5,5,5.2000000000000002,5.2000000000000002,4.7000000000000002],\"Sepal.Width\":[3.5,3,3.2000000000000002,3.1000000000000001,3.6000000000000001,3.8999999999999999,3.3999999999999999,3.3999999999999999,2.8999999999999999,3.1000000000000001,3.7000000000000002,3.3999999999999999,3,3,4,4.4000000000000004,3.8999999999999999,3.5,3.7999999999999998,3.7999999999999998,3.3999999999999999,3.7000000000000002,3.6000000000000001,3.2999999999999998,3.3999999999999999,3,3.3999999999999999,3.5,3.3999999999999999,3.2000000000000002],\"Petal.Length\":[1.3999999999999999,1.3999999999999999,1.3,1.5,1.3999999999999999,1.7,1.3999999999999999,1.5,1.3999999999999999,1.5,1.5,1.6000000000000001,1.3999999999999999,1.1000000000000001,1.2,1.5,1.3,1.3999999999999999,1.7,1.5,1.7,1.5,1,1.7,1.8999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.3999999999999999,1.6000000000000001],\"Petal.Width\":[0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.10000000000000001,0.20000000000000001,0.40000000000000002,0.40000000000000002,0.29999999999999999,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.5,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.20000000000000001,0.20000000000000001],\"Species\":[\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\"]},\"columns\":[{\"id\":\".details\",\"name\":\"\",\"type\":null,\"sortable\":false,\"resizable\":false,\"filterable\":false,\"searchable\":false,\"width\":45,\"align\":\"center\",\"details\":[\"Details for row 1\",\"Details for row 2\",\"Details for row 3\",\"Details for row 4\",\"Details for row 5\",\"Details for row 6\",\"Details for row 7\",\"Details for row 8\",\"Details for row 9\",\"Details for row 10\",\"Details for row 11\",\"Details for row 12\",\"Details for row 13\",\"Details for row 14\",\"Details for row 15\",\"Details for row 16\",\"Details for row 17\",\"Details for row 18\",\"Details for row 19\",\"Details for row 20\",\"Details for row 21\",\"Details for row 22\",\"Details for row 23\",\"Details for row 24\",\"Details for row 25\",\"Details for row 26\",\"Details for row 27\",\"Details for row 28\",\"Details for row 29\",\"Details for row 30\"]},{\"id\":\"Sepal.Length\",\"name\":\"Sepal.Length\",\"type\":\"numeric\"},{\"id\":\"Sepal.Width\",\"name\":\"Sepal.Width\",\"type\":\"numeric\"},{\"id\":\"Petal.Length\",\"name\":\"Petal.Length\",\"type\":\"numeric\"},{\"id\":\"Petal.Width\",\"name\":\"Petal.Width\",\"type\":\"numeric\"},{\"id\":\"Species\",\"name\":\"Species\",\"type\":\"factor\"}],\"filterable\":true,\"showPageSizeOptions\":true,\"highlight\":true,\"striped\":true,\"theme\":{\"color\":\"hsl(233, 9%, 87%)\",\"backgroundColor\":\"hsl(233, 9%, 19%)\",\"borderColor\":\"hsl(233, 9%, 22%)\",\"stripedColor\":\"hsl(233, 12%, 22%)\",\"highlightColor\":\"hsl(233, 12%, 24%)\",\"inputStyle\":{\"backgroundColor\":\"hsl(233, 9%, 25%)\"},\"selectStyle\":{\"backgroundColor\":\"hsl(233, 9%, 25%)\"},\"pageButtonHoverStyle\":{\"backgroundColor\":\"hsl(233, 9%, 25%)\"},\"pageButtonActiveStyle\":{\"backgroundColor\":\"hsl(233, 9%, 28%)\"}},\"language\":{\"searchPlaceholder\":\"Search...\",\"noData\":\"No entries found\",\"pageInfo\":\"{rowStart} to {rowEnd} of {rows} entries\"},\"dataKey\":\"a05f3725ceb42d3a0fc42bc9aafd7a84\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]} # Use nested selectors to highlight headers when sorting reactable(   iris[1:30, ],   columns = list(Sepal.Length = colDef(sortable = FALSE)),   showSortable = TRUE,   theme = reactableTheme(     headerStyle = list(       \"&:hover[aria-sort]\" = list(background = \"hsl(0, 0%, 96%)\"),       \"&[aria-sort='ascending'], &[aria-sort='descending']\" = list(background = \"hsl(0, 0%, 96%)\"),       borderColor = \"#555\"     )   ) )  {\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Sepal.Length\":[5.0999999999999996,4.9000000000000004,4.7000000000000002,4.5999999999999996,5,5.4000000000000004,4.5999999999999996,5,4.4000000000000004,4.9000000000000004,5.4000000000000004,4.7999999999999998,4.7999999999999998,4.2999999999999998,5.7999999999999998,5.7000000000000002,5.4000000000000004,5.0999999999999996,5.7000000000000002,5.0999999999999996,5.4000000000000004,5.0999999999999996,4.5999999999999996,5.0999999999999996,4.7999999999999998,5,5,5.2000000000000002,5.2000000000000002,4.7000000000000002],\"Sepal.Width\":[3.5,3,3.2000000000000002,3.1000000000000001,3.6000000000000001,3.8999999999999999,3.3999999999999999,3.3999999999999999,2.8999999999999999,3.1000000000000001,3.7000000000000002,3.3999999999999999,3,3,4,4.4000000000000004,3.8999999999999999,3.5,3.7999999999999998,3.7999999999999998,3.3999999999999999,3.7000000000000002,3.6000000000000001,3.2999999999999998,3.3999999999999999,3,3.3999999999999999,3.5,3.3999999999999999,3.2000000000000002],\"Petal.Length\":[1.3999999999999999,1.3999999999999999,1.3,1.5,1.3999999999999999,1.7,1.3999999999999999,1.5,1.3999999999999999,1.5,1.5,1.6000000000000001,1.3999999999999999,1.1000000000000001,1.2,1.5,1.3,1.3999999999999999,1.7,1.5,1.7,1.5,1,1.7,1.8999999999999999,1.6000000000000001,1.6000000000000001,1.5,1.3999999999999999,1.6000000000000001],\"Petal.Width\":[0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.29999999999999999,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.20000000000000001,0.20000000000000001,0.10000000000000001,0.10000000000000001,0.20000000000000001,0.40000000000000002,0.40000000000000002,0.29999999999999999,0.29999999999999999,0.29999999999999999,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.5,0.20000000000000001,0.20000000000000001,0.40000000000000002,0.20000000000000001,0.20000000000000001,0.20000000000000001],\"Species\":[\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\",\"setosa\"]},\"columns\":[{\"id\":\"Sepal.Length\",\"name\":\"Sepal.Length\",\"type\":\"numeric\",\"sortable\":false},{\"id\":\"Sepal.Width\",\"name\":\"Sepal.Width\",\"type\":\"numeric\"},{\"id\":\"Petal.Length\",\"name\":\"Petal.Length\",\"type\":\"numeric\"},{\"id\":\"Petal.Width\",\"name\":\"Petal.Width\",\"type\":\"numeric\"},{\"id\":\"Species\",\"name\":\"Species\",\"type\":\"factor\"}],\"showSortable\":true,\"theme\":{\"headerStyle\":{\"&:hover[aria-sort]\":{\"background\":\"hsl(0, 0%, 96%)\"},\"&[aria-sort='ascending'], &[aria-sort='descending']\":{\"background\":\"hsl(0, 0%, 96%)\"},\"borderColor\":\"#555\"}},\"language\":{\"searchPlaceholder\":\"Search...\",\"noData\":\"No entries found\",\"pageInfo\":\"{rowStart} to {rowEnd} of {rows} entries\"},\"dataKey\":\"9551209736b7e751d011f90e2b854641\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reactable/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. htmlwidgets JS","code":""},{"path":"/reactable/reference/resolvedData.html","id":null,"dir":"Reference","previous_headings":"","what":"The result from handling a server-side data request — resolvedData","title":"The result from handling a server-side data request — resolvedData","text":"result handling server-side data request","code":""},{"path":"/reactable/reference/resolvedData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The result from handling a server-side data request — resolvedData","text":"","code":"resolvedData(data, rowCount = NULL, maxRowCount = NULL)"},{"path":"/reactable/reference/resolvedData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The result from handling a server-side data request — resolvedData","text":"data current page data. data frame. rowCount row count current page. maxRowCount maximum row count. Optional. Used determine whether pagination bar kept visible filtering searching reduces current rows one page, expanding rows (paginateSubRows TRUE) expand table beyond one page.","code":""},{"path":[]},{"path":"/reactable/reference/updateReactable.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a reactable instance — updateReactable","title":"Update a reactable instance — updateReactable","text":"updateReactable() updates reactable instance within Shiny application.","code":""},{"path":"/reactable/reference/updateReactable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a reactable instance — updateReactable","text":"","code":"updateReactable(   outputId,   data = NULL,   selected = NULL,   expanded = NULL,   page = NULL,   meta = NULL,   session = NULL )"},{"path":"/reactable/reference/updateReactable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a reactable instance — updateReactable","text":"outputId Shiny output ID reactable instance. data Table data. data frame matrix. data columns original table data. updating data, selected rows, expanded rows, current page reset unless explicitly specified. state persist, including sorting, filtering, grouping state. selected Selected rows. Either numeric vector row indices, NA deselect rows. expanded Expanded rows. Either TRUE expand rows, FALSE collapse rows. page current page. single, positive integer. meta Custom table metadata. Either named list new values, NA clear metadata. New values merged current metadata, values specified meta updated. session Shiny session object. Defaults current Shiny session.","code":""},{"path":"/reactable/reference/updateReactable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a reactable instance — updateReactable","text":"None","code":""},{"path":"/reactable/reference/updateReactable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a reactable instance — updateReactable","text":"","code":"# Run in an interactive R session if (interactive()) {  library(shiny) library(reactable)  data <- MASS::Cars93[, 1:7]  ui <- fluidPage(   actionButton(\"select_btn\", \"Select rows\"),   actionButton(\"clear_btn\", \"Clear selection\"),   actionButton(\"expand_btn\", \"Expand rows\"),   actionButton(\"collapse_btn\", \"Collapse rows\"),   actionButton(\"page_btn\", \"Change page\"),   selectInput(\"filter_type\", \"Filter type\", unique(data$Type), multiple = TRUE),   reactableOutput(\"table\") )  server <- function(input, output) {   output$table <- renderReactable({     reactable(       data,       filterable = TRUE,       searchable = TRUE,       selection = \"multiple\",       details = function(index) paste(\"Details for row:\", index)     )   })    observeEvent(input$select_btn, {     # Select rows     updateReactable(\"table\", selected = c(1, 3, 5))   })    observeEvent(input$clear_btn, {     # Clear row selection     updateReactable(\"table\", selected = NA)   })    observeEvent(input$expand_btn, {     # Expand all rows     updateReactable(\"table\", expanded = TRUE)   })    observeEvent(input$collapse_btn, {     # Collapse all rows     updateReactable(\"table\", expanded = FALSE)   })    observeEvent(input$page_btn, {     # Change current page     updateReactable(\"table\", page = 3)   })    observe({     # Filter data     filtered <- if (length(input$filter_type) > 0) {       data[data$Type %in% input$filter_type, ]     } else {       data     }     updateReactable(\"table\", data = filtered)   }) }  shinyApp(ui, server) }"},{"path":"/reactable/reference/widget_html.reactable.html","id":null,"dir":"Reference","previous_headings":"","what":"Called by HTMLWidgets to produce the widget's root element — widget_html.reactable","title":"Called by HTMLWidgets to produce the widget's root element — widget_html.reactable","text":"Called HTMLWidgets produce widget's root element","code":""},{"path":"/reactable/reference/widget_html.reactable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Called by HTMLWidgets to produce the widget's root element — widget_html.reactable","text":"","code":"widget_html.reactable(id, style, class, ...)"},{"path":"/reactable/reference/widget_html.reactable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Called by HTMLWidgets to produce the widget's root element — widget_html.reactable","text":"id Element ID. style Element style. class Element class. ... Additional arguments.","code":""},{"path":[]},{"path":"/reactable/news/index.html","id":"new-features-0-4-4-9000","dir":"Changelog","previous_headings":"","what":"New features","title":"reactable 0.4.4.9000 (Unreleased)","text":"New Reactable.gotoPage() Reactable.setPageSize() methods JavaScript API change current page set current page size. (#322)","code":""},{"path":"/reactable/news/index.html","id":"reactable-044","dir":"Changelog","previous_headings":"","what":"reactable 0.4.4","title":"reactable 0.4.4","text":"CRAN release: 2023-03-12 Documentation - reactable 0.4.4 Fixed failing CRAN check.","code":""},{"path":"/reactable/news/index.html","id":"reactable-043","dir":"Changelog","previous_headings":"","what":"reactable 0.4.3","title":"reactable 0.4.3","text":"CRAN release: 2023-01-07 Documentation - reactable 0.4.3 Fixed failing CRAN check r-devel-linux-x86_64-fedora-clang platform. (#308)","code":""},{"path":"/reactable/news/index.html","id":"reactable-042","dir":"Changelog","previous_headings":"","what":"reactable 0.4.2","title":"reactable 0.4.2","text":"CRAN release: 2023-01-05 Documentation - reactable 0.4.2","code":""},{"path":"/reactable/news/index.html","id":"minor-improvements-and-bug-fixes-0-4-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"reactable 0.4.2","text":"Fixed rendering embedded HTML widgets htmlwidgets 1.6.0 later installed. general, fixed rendering Shiny HTML tags duplicate attributes. (@tomsing1, #306)","code":""},{"path":"/reactable/news/index.html","id":"reactable-041","dir":"Changelog","previous_headings":"","what":"reactable 0.4.1","title":"reactable 0.4.1","text":"CRAN release: 2022-12-08 Documentation - reactable 0.4.1 Fixed failing test Fedora 36 earlier.","code":""},{"path":"/reactable/news/index.html","id":"reactable-040","dir":"Changelog","previous_headings":"","what":"reactable 0.4.0","title":"reactable 0.4.0","text":"CRAN release: 2022-12-04 Documentation - reactable 0.4.0","code":""},{"path":"/reactable/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"reactable 0.4.0","text":"Experimental support rendering tables static HTML R. Use reactable(static = TRUE) render table static HTML, options(reactable.status = TRUE) enable static rendering globally. static rendering, tables pre-rendered initial HTML appear immediately without flash content. Tables made interactive subsequently rendered JavaScript needed. Static rendering requires V8 package, installed reactable default. Learn Static Rendering article. reactable() gains meta argument pass arbitrary data R JavaScript render functions style functions. Custom metadata can accessed using state.meta property, updated using updateReactable() Shiny Reactable.setMeta() JavaScript API. See examples using custom metadata custom rendering custom metadata conditional styling. (#255) New Reactable.onStateChange() method JavaScript API sets function called whenever table state changes. (#265) New Reactable.setData() method JavaScript API updating table data. (#278) Reactable.downloadDataCSV() JavaScript API now supports additional options argument change field decimal separator, include specific columns, exclude column headers. (#239, #293) New Reactable.getDataCSV() method JavaScript API get table data CSV string. New Reactable.toggleHideColumn() Reactable.setHiddenColumns() methods JavaScript API toggle set hidden columns. JavaScript render functions style functions also receive new state.hiddenColumns property hidden columns table. (#246) getReactableState() now includes current sorted columns. (#265)","code":""},{"path":"/reactable/news/index.html","id":"minor-improvements-and-bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"reactable 0.4.0","text":"Updated documentation site Internet Explorer 11 (IE 11) deprecation, Bootstrap 5 theming, better accessibility. Examples now use modern JavaScript features aren’t supported IE 11, like template literals arrow functions. Examples now also use scalable font sizes length units appropriate (.e., rem/em instead px). documentation site uses default root font size 16px, examples may look different pages change root font size. example, Bootstrap 3 sets default root font size 10px, may need adjust rem values adapting examples site. (Bootstrap 4 longer change default root font size). R style functions longer apply aggregated cells rows incorrectly. (@fawda123, #250) JavaScript render functions style functions longer receive invalid cellInfo.index rowInfo.index property aggregated cells rows. (#250) Column group header widths now calculated correctly hidden columns column group. (@Patrikios, #253) NULL values list-columns now correctly appear missing values instead [object Object]. NULL values now represented null values JavaScript instead empty object like {}. reactableTheme() styles longer override custom user CSS HTML document <head>. getReactableState() now accepts multiple values name argument return subset state values. reactable() now respects htmlwidget::sizingPolicy()’s viewer.fill browser.fill fills RStudio Viewer pane default. (@cpsievert, #280) Using reactable() dplyr grouped data frame ( dplyr::group_by() grouped_df) rownames = TRUE longer adds stringsAsFactors column table. (@daattali, #283)","code":""},{"path":"/reactable/news/index.html","id":"breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"reactable 0.4.0","text":"Numeric NA values now represented null JavaScript instead \"NA\" string. Numeric NaN, Inf, -Inf values now represented NaN, Infinity, -Infinity JavaScript instead \"NaN\", \"Inf\", \"-Inf\" strings. (@daattali, #261) Support Internet Explorer 11 (IE 11) deprecated. Existing features continue work IE 11, new features may support IE 11, IE 11 longer tested. documentation website longer supports IE 11.","code":"function(cellInfo) {   // Old   cellInfo.value // \"NA\", \"NaN\", \"Inf\", \"-Inf\"    // New   cellInfo.value // null, NaN, Infinity, -Infinity }"},{"path":"/reactable/news/index.html","id":"reactable-030","dir":"Changelog","previous_headings":"","what":"reactable 0.3.0","title":"reactable 0.3.0","text":"CRAN release: 2022-05-26 Documentation - reactable 0.3.0 release upgrades new major version React Table (#35), brings many new features, improvements, bug fixes. reactable largely rewritten take advantage React Table’s new approach flexible table utility rather table component. means ’ll easier add new custom features, customize styling markup, maintain reactable future. features fixes release possible easy without upgrade. Backward compatibility kept possible, note several breaking changes, particularly around JavaScript API.","code":""},{"path":"/reactable/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"reactable 0.3.0","text":"Cell content can now vertically aligned using new vAlign headerVAlign arguments colDef(), new headerVAlign argument colGroup() (#142, #177). Sticky columns now supported using new sticky argument colDef() colGroup() (#19, #72, #141). New JavaScript API manipulate access tables JavaScript. Use create custom interactive controls, CSV download buttons, custom filter inputs, toggle buttons row grouping row expansion (#11, #28, #182, #194). Learn JavaScript API guide JavaScript API examples. reactable() gains searchMethod argument use custom JavaScript function global table searching (#222). colDef() gains filterMethod argument use custom JavaScript function column filtering (#9, #90, #145). colDef() gains filterInput argument render custom filter input column filtering (#9). reactable() gains paginateSubRows argument include grouped sub rows pagination. recommended grouped tables large number rows expanded rows may fit one page. Expanded rows now stay expanded sorting, filtering, pagination changes. Previously, expanded rows always collapsed sorting pagination changes, incorrectly persisted filtering changes (#39). Aggregated rows can now selected multiple selection enabled. colDef() gains grouped argument customize rendering grouped cells groupBy columns (#33, #94, #148). Column group headers can now resized. Column group headers filters now sticky. Previously, column headers sticky (#107). rowInfo.expanded cellInfo.expanded indicating whether row expanded cellInfo.selected indicating whether cell’s row selected state.page, state.pageSize, state.pages current page index, page size, number pages table cellInfo.filterValue column.filterValue column filter value, column.setFilter set filter value state.filters column filter values state.searchValue table search value state.selected selected row indices JavaScript render functions cells, headers, footers, row details receive new state argument access table state (#88). Custom cell click actions also now receive state argument. R render functions row details now receive additional argument column name (@ksnap28, #155). colDef() gains searchable argument enable disable global table searching. Columns can excluded searching using colDef(searchable = FALSE), hidden columns can included searching using colDef(searchable = TRUE) (#217).","code":""},{"path":[]},{"path":"/reactable/news/index.html","id":"javascript-render-and-style-functions-0-3-0","dir":"Changelog","previous_headings":"Breaking changes","what":"JavaScript render and style functions","title":"reactable 0.3.0","text":"Several properties arguments renamed moved consistency rest API. properties removed unless rarely used, code continue work upon upgrading. rowInfo.row property now deprecated, renamed rowInfo.values. rowInfo.row remains supported, replace usages rowInfo.values possible. colInfo.column colInfo.data properties header cell render functions now deprecated. colInfo object now contains properties colInfo.column, now referred column documentation. possible, replace usages colInfo column, colInfo.column column, colInfo.data state.sortedData (current rows sorting filtering) state.data (original data). state.expanded property removed. check whether row expanded, use rowInfo.expanded instead. rowInfo.page cellInfo.page properties removed. get current page index table, use state.page instead. accessing row data JavaScript render functions style functions: Date time values now represented UTC time (ISO 8601 format), rather local time without timezone. Single values (length-1 vectors) list-columns longer represented arrays (.e., data now serialized using jsonlite::toJSON(auto_unbox = TRUE)). example, list(x = 1) R now represented {x: 1} JavaScript instead {x: [1]}.","code":"// Old function(rowInfo) {   rowInfo.row }  // New function(rowInfo) {   rowInfo.values } // Old function(colInfo) {   colInfo.column.id   colInfo.data }  // New function(column, state) {   column.id   state.sortedData } // Old function(rowInfo, column, state) {   if (state.expanded[rowInfo.index]) { // row is expanded ... } }  // New function(rowInfo, column, state) {   if (rowInfo.expanded) { // row is expanded ... } } // Old function(rowInfo, column, state) {   rowInfo.page }  // New function(rowInfo, column, state) {   state.page } function(cellInfo) {   // Old   cellInfo.value // 2022-05-22T19:30:00    // New   cellInfo.value // 2022-05-22T19:30:00Z    // With a UTC time, it's much easier to format dates in the user's local time   return new Date(cellInfo.value).toLocaleString() }"},{"path":"/reactable/news/index.html","id":"other-changes-0-3-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Other changes","title":"reactable 0.3.0","text":"columnGroups groupBy arguments provided reactable(), groupBy columns longer added column group automatically (#87). defaultGroupHeader argument reactableLang() now deprecated longer used. Use columnGroups argument reactable() customize column group header groupBy columns. detailsCollapseLabel, deselectAllRowsLabel, deselectAllSubRowsLabel, deselectRowLabel arguments reactableLang() now deprecated longer used (#167). row selection column now always placed first column table, even groupBy row details columns (#71). Increased default width row selection column match row details column (45px). default cell padding can longer overridden using custom CSS inline styles cells. customize cell padding, use theme instead, like reactableTheme(cellPadding = \"...\") (#248, #142, #177).","code":""},{"path":"/reactable/news/index.html","id":"minor-improvements-and-bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"reactable 0.3.0","text":"Setting show = FALSE default value defaultColDef() now works (@csgillespie, #105). Setting sortNALast, html, na default values defaultColDef() also now works. Using single value pageSizeOptions reactable() now works. Column resizing now limited min max width column. Column group headers filter cells fixed height tables now display properly Safari, Chrome, RStudio Viewer (#76). reactable(), defaultExpanded = TRUE now expands rows table, just rows first page. reactable(), defaultExpanded = TRUE now works column groups present. Aggregated cell values now recalculated filtering searching table. Aggregate functions now always take unaggregated values column. Previously, multiple groupBy columns, aggregate functions take aggregated values produce inaccurate calculations (e.g., calculating mean values). \"max\" \"min\" aggregate functions now work dates, date-times, strings (#130). Column formatters longer apply empty aggregated cell values. Searching now properly ignores row details selection columns. Selected rows now reset table data changes Shiny (#110). selecting rows, errors Crosstalk widgets longer cause table disappear. HTML widgets HTML dependencies nested tables now render correctly (#125). Tables now displayed full width rendered inside R Markdown document R Notebook (#163). reactable() now works data frames difftime objects objects custom classes (#164). colFormat() now formats dates times user’s time zone, rather ignoring time zones. Row expand buttons longer change accessible labels based expanded state. now use aria-expanded attribute indicate expanded collapsed state, use “Toggle details” default label (#167). reactableLang() gains groupExpandLabel argument customize accessible label row group expand buttons (#167). Row selection checkboxes radio buttons longer change accessible labels based selection state (#167). Cells can now marked row headers assistive technologies, using new rowHeader argument colDef(). Cells row names column automatically marked row headers (#167). page info “rows found” message now marked ARIA live regions page changes can announced assistive technologies searching, filtering, paging table (#167). Scrollable tables now focusable scrollable using keyboard (#167). reactableTheme(), filterInputStyle now applies correctly rerendering table Shiny (#186). reactableTheme(), cellPadding now applies column group headers correctly. Columns square brackets ([ ]) column name now render correctly (#187). Disabling pagination using reactable(pagination = FALSE) now works correctly table data updates (#214). HTML attributes supported rendering HTML tags, onclick (#150). Improved initial load time tables large number rows (50% faster cases).","code":""},{"path":"/reactable/news/index.html","id":"reactable-023","dir":"Changelog","previous_headings":"","what":"reactable 0.2.3","title":"reactable 0.2.3","text":"CRAN release: 2020-10-04","code":""},{"path":"/reactable/news/index.html","id":"bug-fixes-0-2-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"reactable 0.2.3","text":"Fixed character encoding issue documentation.","code":""},{"path":"/reactable/news/index.html","id":"reactable-022","dir":"Changelog","previous_headings":"","what":"reactable 0.2.2","title":"reactable 0.2.2","text":"CRAN release: 2020-09-13","code":""},{"path":"/reactable/news/index.html","id":"bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"reactable 0.2.2","text":"Headers fixed height tables now display properly Safari, Chrome, RStudio Viewer (#76).","code":""},{"path":"/reactable/news/index.html","id":"reactable-021","dir":"Changelog","previous_headings":"","what":"reactable 0.2.1","title":"reactable 0.2.1","text":"CRAN release: 2020-09-01","code":""},{"path":"/reactable/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"New features","title":"reactable 0.2.1","text":"updateReactable() gains data argument update data reactable instance Shiny (#49).","code":""},{"path":"/reactable/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"reactable 0.2.1","text":"Row selection columns now display correctly tables column groups (#52). defaultSelected now works correctly Crosstalk linked selection. Crosstalk selection filtering now works nested dynamically rendered tables #57). Tables now display correctly Crosstalk SharedData objects zero one rows. Shiny UI elements expanded row details now properly removed collapsed page changes. colFormat() now always formats numbers localized string locales specified. Table rows longer stretch fill height container (#69). make rows stretch , use theme like reactableTheme(tableBodyStyle = list(flex = \"auto\")). Multi-sorting longer selects text column headers.","code":""},{"path":"/reactable/news/index.html","id":"reactable-020","dir":"Changelog","previous_headings":"","what":"reactable 0.2.0","title":"reactable 0.2.0","text":"CRAN release: 2020-05-28","code":""},{"path":"/reactable/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"reactable 0.2.0","text":"reactable() now supports linked selection filtering Crosstalk-compatible HTML widgets (#46). reactable() gains theme argument customize default styling table. reactable() gains language argument customize language strings table (#24). reactable() gains defaultSelected argument set default selected rows. reactable() gains defaultExpanded argument set default expanded rows (#23). New updateReactable() function update selected rows, expanded rows, current page reactable instance Shiny (#20). New getReactableState() function get state reactable instance Shiny (#20). colDef() gains \"median\" aggregate function calculate median numbers (#30). row selection column can now customized using \".selection\" column name (#19). reactable(), rowClass, rowStyle, details JavaScript functions now receive rowInfo.selected property indicating whether row selected (#20).","code":""},{"path":"/reactable/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"reactable 0.2.0","text":"selectionId argument reactable() deprecated future release. Use getReactableState() get selected rows table Shiny instead.","code":""},{"path":"/reactable/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"reactable 0.2.0","text":"General accessibility improvements, particularly screen reader users. Table searching now works correctly row selection enabled. colFormat(date = TRUE) now formats YYYY-MM-DD dates correctly (#38). colFormat(percent = TRUE) now works correctly viewing tables IE11. Cell click actions now work cells aggregated rows. Aggregated cells columns row details longer throw error clicked. colDef(), class style R functions now handle list-columns correctly. Column headers now truncate long text properly. Footers now display properly fixed height tables Safari Chrome (#41). Dark themes longer affect text color RStudio R Notebooks (#21). Checkboxes radio buttons now align multi-line text selectable tables. Text selection now works column headers. Row striping highlighting styles longer affect nested tables.","code":""},{"path":"/reactable/news/index.html","id":"reactable-0101","dir":"Changelog","previous_headings":"","what":"reactable 0.1.0.1","title":"reactable 0.1.0.1","text":"CRAN release: 2020-02-29 Updated tests compatibility R 4.0.0.","code":""},{"path":"/reactable/news/index.html","id":"reactable-010","dir":"Changelog","previous_headings":"","what":"reactable 0.1.0","title":"reactable 0.1.0","text":"CRAN release: 2019-11-15 Initial release.","code":""}]
